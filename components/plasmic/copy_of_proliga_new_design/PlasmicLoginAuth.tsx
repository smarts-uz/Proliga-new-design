// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qrPZwqtrqWM4S9b4djCj1H
// Component: maGCetjbMwYp

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import TextInput from "../../TextInput"; // plasmic-import: 1UJD2btGUkCV/component
import Button from "../../Button"; // plasmic-import: JtHKLkRqLyx-/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: qrPZwqtrqWM4S9b4djCj1H/projectcss
import sty from "./PlasmicLoginAuth.module.css"; // plasmic-import: maGCetjbMwYp/css

import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: DJCZ30FSSW4V/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: wUfM8ozzkHkf/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 3vZ6LsfPOxdi/icon

createPlasmicElementProxy;

export type PlasmicLoginAuth__VariantMembers = {};
export type PlasmicLoginAuth__VariantsArgs = {};
type VariantPropType = keyof PlasmicLoginAuth__VariantsArgs;
export const PlasmicLoginAuth__VariantProps = new Array<VariantPropType>();

export type PlasmicLoginAuth__ArgsType = {};
type ArgPropType = keyof PlasmicLoginAuth__ArgsType;
export const PlasmicLoginAuth__ArgProps = new Array<ArgPropType>();

export type PlasmicLoginAuth__OverridesType = {
  root?: Flex__<"div">;
  columns?: Flex__<"div">;
  login?: Flex__<"div">;
  emailInput?: Flex__<typeof TextInput>;
  passwordInput?: Flex__<typeof TextInput>;
  submitButton?: Flex__<typeof Button>;
  nadpis?: Flex__<"div">;
};

export interface DefaultLoginAuthProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLoginAuth__RenderFunc(props: {
  variants: PlasmicLoginAuth__VariantsArgs;
  args: PlasmicLoginAuth__ArgsType;
  overrides: PlasmicLoginAuth__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "emailInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "passwordInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__ajhj)}
      >
        <PlasmicImg__
          alt={""}
          className={classNames(sty.img__eywfF)}
          displayHeight={"auto"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"500px"}
          loading={"lazy"}
          src={
            "https://dlcdnwebimgs.asus.com/gain/3EF83AFB-7D9C-4D1A-918E-8910190606D1/fwebp"
          }
        />

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__dWnOm
          )}
        >
          {"Biz bilan o'ynang va sovg'alar yutib oling!"}
        </div>
      </Stack__>
      <div className={classNames(projectcss.all, sty.freeBox___4UOhR)}>
        <div
          data-plasmic-name={"columns"}
          data-plasmic-override={overrides.columns}
          className={classNames(projectcss.all, sty.columns)}
        >
          <Stack__
            as={"div"}
            data-plasmic-name={"login"}
            data-plasmic-override={overrides.login}
            hasGap={true}
            className={classNames(projectcss.all, sty.login)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__dLz6J
              )}
            >
              {"Pochta"}
            </div>
            <TextInput
              data-plasmic-name={"emailInput"}
              data-plasmic-override={overrides.emailInput}
              className={classNames("__wab_instance", sty.emailInput)}
              onChange={(...eventArgs) => {
                generateStateOnChangeProp($state, ["emailInput", "value"])(
                  (e => e.target?.value).apply(null, eventArgs)
                );
              }}
              placeholder={"Pochta"}
              required={true}
              value={
                generateStateValueProp($state, ["emailInput", "value"]) ?? ""
              }
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__jI7Ds
              )}
            >
              {"PAROL"}
            </div>
            <TextInput
              data-plasmic-name={"passwordInput"}
              data-plasmic-override={overrides.passwordInput}
              className={classNames("__wab_instance", sty.passwordInput)}
              onChange={(...eventArgs) => {
                generateStateOnChangeProp($state, ["passwordInput", "value"])(
                  (e => e.target?.value).apply(null, eventArgs)
                );
              }}
              placeholder={"Parol"}
              required={true}
              type={"password"}
              value={
                generateStateValueProp($state, ["passwordInput", "value"]) ?? ""
              }
            />

            <Button
              data-plasmic-name={"submitButton"}
              data-plasmic-override={overrides.submitButton}
              className={classNames("__wab_instance", sty.submitButton)}
              color={"green"}
              onClick={async event => {
                const $steps = {};

                $steps["updateEmailInputValue"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["emailInput", "value"]
                        },
                        operation: 0
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateEmailInputValue"] != null &&
                  typeof $steps["updateEmailInputValue"] === "object" &&
                  typeof $steps["updateEmailInputValue"].then === "function"
                ) {
                  $steps["updateEmailInputValue"] = await $steps[
                    "updateEmailInputValue"
                  ];
                }
              }}
            >
              {"Kirish"}
            </Button>
            <div className={classNames(projectcss.all, sty.freeBox__eTw3T)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__rYqBo
                )}
              >
                {"Don't you have an account "}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___5JQ9P
                )}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToSignup"] = true
                    ? (() => {
                        const actionArgs = { destination: `/signup` };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToSignup"] != null &&
                    typeof $steps["goToSignup"] === "object" &&
                    typeof $steps["goToSignup"].then === "function"
                  ) {
                    $steps["goToSignup"] = await $steps["goToSignup"];
                  }
                }}
              >
                {"Ro'yhatdan o'tish"}
              </div>
            </div>
          </Stack__>
          <div
            data-plasmic-name={"nadpis"}
            data-plasmic-override={overrides.nadpis}
            className={classNames(projectcss.all, sty.nadpis)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__bPj3J
              )}
            >
              {
                "Lorem ipsum dolor sit amet consectetur adipisicing elit. Maxime mollitia,\nmolestiae quas vel sint commodi repudiandae consequuntur voluptatum laborum\nnumquam blanditiis harum quisquam eius sed odit fugiat iusto fuga praesentium\noptio, eaque rerum! Provident similique accusantium nemo autem. Veritatis\nobcaecati tenetur iure eius earum ut molestias architecto voluptate aliquam"
              }
            </div>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__e0Ig)}
            >
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__xvGRu)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={
                  "https://seeklogo.com/images/P/premier-league-new-logo-D22A0CE87E-seeklogo.com.png"
                }
                width={"150px"}
              />

              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__kno9)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={
                  "https://seeklogo.com/images/P/premier-league-new-logo-D22A0CE87E-seeklogo.com.png"
                }
                width={"150px"}
              />

              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__obOD)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={
                  "https://seeklogo.com/images/P/premier-league-new-logo-D22A0CE87E-seeklogo.com.png"
                }
                width={"150px"}
              />
            </Stack__>
          </div>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "columns",
    "login",
    "emailInput",
    "passwordInput",
    "submitButton",
    "nadpis"
  ],
  columns: [
    "columns",
    "login",
    "emailInput",
    "passwordInput",
    "submitButton",
    "nadpis"
  ],
  login: ["login", "emailInput", "passwordInput", "submitButton"],
  emailInput: ["emailInput"],
  passwordInput: ["passwordInput"],
  submitButton: ["submitButton"],
  nadpis: ["nadpis"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  columns: "div";
  login: "div";
  emailInput: typeof TextInput;
  passwordInput: typeof TextInput;
  submitButton: typeof Button;
  nadpis: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLoginAuth__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLoginAuth__VariantsArgs;
    args?: PlasmicLoginAuth__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLoginAuth__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicLoginAuth__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLoginAuth__ArgProps,
          internalVariantPropNames: PlasmicLoginAuth__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLoginAuth__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLoginAuth";
  } else {
    func.displayName = `PlasmicLoginAuth.${nodeName}`;
  }
  return func;
}

export const PlasmicLoginAuth = Object.assign(
  // Top-level PlasmicLoginAuth renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    columns: makeNodeComponent("columns"),
    login: makeNodeComponent("login"),
    emailInput: makeNodeComponent("emailInput"),
    passwordInput: makeNodeComponent("passwordInput"),
    submitButton: makeNodeComponent("submitButton"),
    nadpis: makeNodeComponent("nadpis"),

    // Metadata about props expected for PlasmicLoginAuth
    internalVariantProps: PlasmicLoginAuth__VariantProps,
    internalArgProps: PlasmicLoginAuth__ArgProps
  }
);

export default PlasmicLoginAuth;
/* prettier-ignore-end */
