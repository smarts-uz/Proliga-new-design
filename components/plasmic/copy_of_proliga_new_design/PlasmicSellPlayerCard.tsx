// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qrPZwqtrqWM4S9b4djCj1H
// Component: 8eHqUMWBUQQZ

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: qrPZwqtrqWM4S9b4djCj1H/projectcss
import sty from "./PlasmicSellPlayerCard.module.css"; // plasmic-import: 8eHqUMWBUQQZ/css

createPlasmicElementProxy;

export type PlasmicSellPlayerCard__VariantMembers = {
  courtua: "courtua";
  gimenez: "gimenez";
  traore: "traore";
  ardaGuler: "ardaGuler";
  ayozePerez: "ayozePerez";
  budimir: "budimir";
  ceballos: "ceballos";
  davidGarcia: "davidGarcia";
  deGalarreta: "deGalarreta";
  deJong: "deJong";
  deLeon: "deLeon";
  franGarcia: "franGarcia";
  isaac: "isaac";
};
export type PlasmicSellPlayerCard__VariantsArgs = {
  courtua?: SingleBooleanChoiceArg<"courtua">;
  gimenez?: SingleBooleanChoiceArg<"gimenez">;
  traore?: SingleBooleanChoiceArg<"traore">;
  ardaGuler?: SingleBooleanChoiceArg<"ardaGuler">;
  ayozePerez?: SingleBooleanChoiceArg<"ayozePerez">;
  budimir?: SingleBooleanChoiceArg<"budimir">;
  ceballos?: SingleBooleanChoiceArg<"ceballos">;
  davidGarcia?: SingleBooleanChoiceArg<"davidGarcia">;
  deGalarreta?: SingleBooleanChoiceArg<"deGalarreta">;
  deJong?: SingleBooleanChoiceArg<"deJong">;
  deLeon?: SingleBooleanChoiceArg<"deLeon">;
  franGarcia?: SingleBooleanChoiceArg<"franGarcia">;
  isaac?: SingleBooleanChoiceArg<"isaac">;
};
type VariantPropType = keyof PlasmicSellPlayerCard__VariantsArgs;
export const PlasmicSellPlayerCard__VariantProps = new Array<VariantPropType>(
  "courtua",
  "gimenez",
  "traore",
  "ardaGuler",
  "ayozePerez",
  "budimir",
  "ceballos",
  "davidGarcia",
  "deGalarreta",
  "deJong",
  "deLeon",
  "franGarcia",
  "isaac"
);

export type PlasmicSellPlayerCard__ArgsType = {};
type ArgPropType = keyof PlasmicSellPlayerCard__ArgsType;
export const PlasmicSellPlayerCard__ArgProps = new Array<ArgPropType>();

export type PlasmicSellPlayerCard__OverridesType = {
  root?: Flex__<"div">;
  link?: Flex__<"a"> & Partial<LinkProps>;
};

export interface DefaultSellPlayerCardProps {
  courtua?: SingleBooleanChoiceArg<"courtua">;
  gimenez?: SingleBooleanChoiceArg<"gimenez">;
  traore?: SingleBooleanChoiceArg<"traore">;
  ardaGuler?: SingleBooleanChoiceArg<"ardaGuler">;
  ayozePerez?: SingleBooleanChoiceArg<"ayozePerez">;
  budimir?: SingleBooleanChoiceArg<"budimir">;
  ceballos?: SingleBooleanChoiceArg<"ceballos">;
  davidGarcia?: SingleBooleanChoiceArg<"davidGarcia">;
  deGalarreta?: SingleBooleanChoiceArg<"deGalarreta">;
  deJong?: SingleBooleanChoiceArg<"deJong">;
  deLeon?: SingleBooleanChoiceArg<"deLeon">;
  franGarcia?: SingleBooleanChoiceArg<"franGarcia">;
  isaac?: SingleBooleanChoiceArg<"isaac">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSellPlayerCard__RenderFunc(props: {
  variants: PlasmicSellPlayerCard__VariantsArgs;
  args: PlasmicSellPlayerCard__ArgsType;
  overrides: PlasmicSellPlayerCard__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "courtua",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.courtua
      },
      {
        path: "gimenez",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.gimenez
      },
      {
        path: "traore",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.traore
      },
      {
        path: "ardaGuler",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.ardaGuler
      },
      {
        path: "ayozePerez",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.ayozePerez
      },
      {
        path: "budimir",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.budimir
      },
      {
        path: "ceballos",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.ceballos
      },
      {
        path: "davidGarcia",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.davidGarcia
      },
      {
        path: "deGalarreta",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.deGalarreta
      },
      {
        path: "deJong",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.deJong
      },
      {
        path: "deLeon",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.deLeon
      },
      {
        path: "franGarcia",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.franGarcia
      },
      {
        path: "isaac",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isaac
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    query: usePlasmicDataOp(() => {
      return {
        sourceId: "8cdHi4ivRUEkK6qbegQevF",
        opId: "22bad793-23fb-4697-9e46-0b36c07c0aee",
        userArgs: {},
        cacheKey: `plasmic.$.22bad793-23fb-4697-9e46-0b36c07c0aee.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootdeJong]: hasVariant($state, "deJong", "deJong"),
          [sty.rootisaac]: hasVariant($state, "isaac", "isaac")
        }
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__sf2Q0)}>
        <PlasmicImg__
          alt={""}
          className={classNames(sty.img__rnc7R, {
            [sty.imgardaGuler__rnc7R3RMyG]: hasVariant(
              $state,
              "ardaGuler",
              "ardaGuler"
            ),
            [sty.imgayozePerez__rnc7Rrr2Tz]: hasVariant(
              $state,
              "ayozePerez",
              "ayozePerez"
            ),
            [sty.imgbudimir__rnc7RWp2]: hasVariant(
              $state,
              "budimir",
              "budimir"
            ),
            [sty.imgceballos__rnc7R2ZaOf]: hasVariant(
              $state,
              "ceballos",
              "ceballos"
            ),
            [sty.imgcourtua__rnc7RpuGbh]: hasVariant(
              $state,
              "courtua",
              "courtua"
            ),
            [sty.imgdavidGarcia__rnc7RspXh5]: hasVariant(
              $state,
              "davidGarcia",
              "davidGarcia"
            ),
            [sty.imgdeGalarreta__rnc7RsIfeb]: hasVariant(
              $state,
              "deGalarreta",
              "deGalarreta"
            ),
            [sty.imgdeJong__rnc7R3KoUd]: hasVariant($state, "deJong", "deJong"),
            [sty.imgdeLeon__rnc7RuXPgz]: hasVariant($state, "deLeon", "deLeon"),
            [sty.imgfranGarcia__rnc7Ra0Lv9]: hasVariant(
              $state,
              "franGarcia",
              "franGarcia"
            ),
            [sty.imgfranGarcia_deLeon__rnc7Ra0Lv9UXPgz]:
              hasVariant($state, "franGarcia", "franGarcia") &&
              hasVariant($state, "deLeon", "deLeon"),
            [sty.imggimenez__rnc7RbgMPs]: hasVariant(
              $state,
              "gimenez",
              "gimenez"
            ),
            [sty.imgisaac__rnc7Rs9Dhn]: hasVariant($state, "isaac", "isaac"),
            [sty.imgtraore__rnc7RuIa70]: hasVariant($state, "traore", "traore")
          })}
          displayHeight={"auto"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"214px"}
          loading={"lazy"}
          src={
            hasVariant($state, "isaac", "isaac")
              ? {
                  src: "/plasmic/copy_of_proliga_new_design/images/isaacpng.png",
                  fullWidth: 256,
                  fullHeight: 256,
                  aspectRatio: undefined
                }
              : hasVariant($state, "franGarcia", "franGarcia")
              ? {
                  src: "/plasmic/copy_of_proliga_new_design/images/franGarciapng.png",
                  fullWidth: 256,
                  fullHeight: 256,
                  aspectRatio: undefined
                }
              : hasVariant($state, "deLeon", "deLeon")
              ? {
                  src: "/plasmic/copy_of_proliga_new_design/images/deLeonpng.png",
                  fullWidth: 256,
                  fullHeight: 256,
                  aspectRatio: undefined
                }
              : hasVariant($state, "deJong", "deJong")
              ? {
                  src: "/plasmic/copy_of_proliga_new_design/images/deJongpng.png",
                  fullWidth: 256,
                  fullHeight: 256,
                  aspectRatio: undefined
                }
              : hasVariant($state, "deGalarreta", "deGalarreta")
              ? {
                  src: "/plasmic/copy_of_proliga_new_design/images/deGalarretapng.png",
                  fullWidth: 256,
                  fullHeight: 256,
                  aspectRatio: undefined
                }
              : hasVariant($state, "davidGarcia", "davidGarcia")
              ? {
                  src: "/plasmic/copy_of_proliga_new_design/images/davidGarciapng.png",
                  fullWidth: 256,
                  fullHeight: 256,
                  aspectRatio: undefined
                }
              : hasVariant($state, "ceballos", "ceballos")
              ? {
                  src: "/plasmic/copy_of_proliga_new_design/images/ceballospng.png",
                  fullWidth: 256,
                  fullHeight: 256,
                  aspectRatio: undefined
                }
              : hasVariant($state, "budimir", "budimir")
              ? {
                  src: "/plasmic/copy_of_proliga_new_design/images/budimirpng.png",
                  fullWidth: 256,
                  fullHeight: 256,
                  aspectRatio: undefined
                }
              : hasVariant($state, "ayozePerez", "ayozePerez")
              ? {
                  src: "/plasmic/copy_of_proliga_new_design/images/ayozePerezpng.png",
                  fullWidth: 256,
                  fullHeight: 256,
                  aspectRatio: undefined
                }
              : hasVariant($state, "ardaGuler", "ardaGuler")
              ? {
                  src: "/plasmic/copy_of_proliga_new_design/images/ardaGulerpng.png",
                  fullWidth: 256,
                  fullHeight: 256,
                  aspectRatio: undefined
                }
              : hasVariant($state, "traore", "traore")
              ? {
                  src: "/plasmic/copy_of_proliga_new_design/images/traorepng.png",
                  fullWidth: 256,
                  fullHeight: 256,
                  aspectRatio: undefined
                }
              : hasVariant($state, "gimenez", "gimenez")
              ? {
                  src: "/plasmic/copy_of_proliga_new_design/images/gimenezpng.png",
                  fullWidth: 256,
                  fullHeight: 256,
                  aspectRatio: undefined
                }
              : hasVariant($state, "courtua", "courtua")
              ? {
                  src: "/plasmic/copy_of_proliga_new_design/images/courtuapng.png",
                  fullWidth: 256,
                  fullHeight: 256,
                  aspectRatio: undefined
                }
              : undefined
          }
        />
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__syIew)}>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__rlNtM
          )}
        >
          {"Position"}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___7Glpf,
            {
              [sty.textgimenez___7GlpFbgMPs]: hasVariant(
                $state,
                "gimenez",
                "gimenez"
              )
            }
          )}
        >
          {"FSYP"}
        </div>
      </div>
      <div
        className={classNames(projectcss.all, sty.freeBox__ilPg0, {
          [sty.freeBoxcourtua__ilPg0PuGbh]: hasVariant(
            $state,
            "courtua",
            "courtua"
          ),
          [sty.freeBoxdeLeon__ilPg0UXPgz]: hasVariant(
            $state,
            "deLeon",
            "deLeon"
          ),
          [sty.freeBoxtraore__ilPg0UIa70]: hasVariant(
            $state,
            "traore",
            "traore"
          )
        })}
      >
        <PlasmicLink__
          data-plasmic-name={"link"}
          data-plasmic-override={overrides.link}
          className={classNames(
            projectcss.all,
            projectcss.a,
            projectcss.__wab_text,
            sty.link
          )}
          component={Link}
          href={"https://www.plasmic.app/"}
          platform={"nextjs"}
        >
          {"STR"}
        </PlasmicLink__>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__sCrh,
            {
              [sty.textardaGuler__sCrh3RMyG]: hasVariant(
                $state,
                "ardaGuler",
                "ardaGuler"
              ),
              [sty.textayozePerez__sCrhrr2Tz]: hasVariant(
                $state,
                "ayozePerez",
                "ayozePerez"
              ),
              [sty.textbudimir__sCrhWp2]: hasVariant(
                $state,
                "budimir",
                "budimir"
              ),
              [sty.textceballos__sCrh2ZaOf]: hasVariant(
                $state,
                "ceballos",
                "ceballos"
              ),
              [sty.textcourtua__sCrhpuGbh]: hasVariant(
                $state,
                "courtua",
                "courtua"
              ),
              [sty.textdavidGarcia__sCrHspXh5]: hasVariant(
                $state,
                "davidGarcia",
                "davidGarcia"
              ),
              [sty.textdeGalarreta__sCrhsIfeb]: hasVariant(
                $state,
                "deGalarreta",
                "deGalarreta"
              ),
              [sty.textdeJong__sCrh3KoUd]: hasVariant(
                $state,
                "deJong",
                "deJong"
              ),
              [sty.textdeLeon__sCrHuXPgz]: hasVariant(
                $state,
                "deLeon",
                "deLeon"
              ),
              [sty.textfranGarcia__sCrHa0Lv9]: hasVariant(
                $state,
                "franGarcia",
                "franGarcia"
              ),
              [sty.textgimenez__sCrHbgMPs]: hasVariant(
                $state,
                "gimenez",
                "gimenez"
              ),
              [sty.textisaac__sCrHs9Dhn]: hasVariant($state, "isaac", "isaac"),
              [sty.texttraore__sCrhuIa70]: hasVariant(
                $state,
                "traore",
                "traore"
              )
            }
          )}
        >
          {hasVariant($state, "isaac", "isaac") ? (
            "Isaac"
          ) : hasVariant($state, "franGarcia", "franGarcia") ? (
            "Fran Garc\u00eda"
          ) : hasVariant($state, "deLeon", "deLeon") ? (
            "De Leon"
          ) : hasVariant($state, "deJong", "deJong") ? (
            "De Jong"
          ) : hasVariant($state, "deGalarreta", "deGalarreta") ? (
            "De Galarreta"
          ) : hasVariant($state, "davidGarcia", "davidGarcia") ? (
            "David Garc\u00eda"
          ) : hasVariant($state, "ceballos", "ceballos") ? (
            "Ceballos"
          ) : hasVariant($state, "budimir", "budimir") ? (
            "Budimir"
          ) : hasVariant($state, "ayozePerez", "ayozePerez") ? (
            "Ayoze P\u00e9rez"
          ) : hasVariant($state, "ardaGuler", "ardaGuler") ? (
            "Arda G\u00fcler"
          ) : hasVariant($state, "traore", "traore") ? (
            "Traor\u00e9"
          ) : hasVariant($state, "gimenez", "gimenez") ? (
            "Gim\u00e9nez"
          ) : hasVariant($state, "courtua", "courtua") ? (
            "Courtua"
          ) : (
            <React.Fragment>
              {(() => {
                try {
                  return $queries.query.data[0].player_name;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Borja Mayoral";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          )}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__xGhd8,
            {
              [sty.textardaGuler__xGhd83RMyG]: hasVariant(
                $state,
                "ardaGuler",
                "ardaGuler"
              ),
              [sty.textayozePerez__xGhd8Rr2Tz]: hasVariant(
                $state,
                "ayozePerez",
                "ayozePerez"
              ),
              [sty.textbudimir__xGhd8Wp2]: hasVariant(
                $state,
                "budimir",
                "budimir"
              ),
              [sty.textceballos__xGhd82ZaOf]: hasVariant(
                $state,
                "ceballos",
                "ceballos"
              ),
              [sty.textcourtua__xGhd8PuGbh]: hasVariant(
                $state,
                "courtua",
                "courtua"
              ),
              [sty.textdavidGarcia__xGhd8SpXh5]: hasVariant(
                $state,
                "davidGarcia",
                "davidGarcia"
              ),
              [sty.textdeGalarreta__xGhd8SIfeb]: hasVariant(
                $state,
                "deGalarreta",
                "deGalarreta"
              ),
              [sty.textdeJong__xGhd83KoUd]: hasVariant(
                $state,
                "deJong",
                "deJong"
              ),
              [sty.textdeLeon__xGhd8UXPgz]: hasVariant(
                $state,
                "deLeon",
                "deLeon"
              ),
              [sty.textfranGarcia__xGhd8A0Lv9]: hasVariant(
                $state,
                "franGarcia",
                "franGarcia"
              ),
              [sty.textgimenez__xGhd8BgMPs]: hasVariant(
                $state,
                "gimenez",
                "gimenez"
              ),
              [sty.textisaac__xGhd8S9Dhn]: hasVariant($state, "isaac", "isaac")
            }
          )}
          onClick={async event => {
            const $steps = {};

            $steps["updateStateVariable"] = true
              ? (() => {
                  const actionArgs = {};
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;
                    undefined;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateStateVariable"] != null &&
              typeof $steps["updateStateVariable"] === "object" &&
              typeof $steps["updateStateVariable"].then === "function"
            ) {
              $steps["updateStateVariable"] = await $steps[
                "updateStateVariable"
              ];
            }
          }}
        >
          {hasVariant($state, "isaac", "isaac")
            ? "174"
            : hasVariant($state, "franGarcia", "franGarcia")
            ? "172"
            : hasVariant($state, "deLeon", "deLeon")
            ? "171"
            : hasVariant($state, "deJong", "deJong")
            ? "185"
            : hasVariant($state, "deGalarreta", "deGalarreta")
            ? "175"
            : hasVariant($state, "davidGarcia", "davidGarcia")
            ? "177"
            : hasVariant($state, "budimir", "budimir")
            ? "169"
            : hasVariant($state, "ayozePerez", "ayozePerez")
            ? "175"
            : hasVariant($state, "gimenez", "gimenez")
            ? "9"
            : hasVariant($state, "courtua", "courtua")
            ? "11"
            : "166"}
        </div>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__isUvm)}>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__dYvzy
          )}
        >
          {"Value"}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__pz0Kh
          )}
        >
          {"Average:"}
        </div>
      </div>
      <div
        className={classNames(projectcss.all, sty.freeBox__jHddx, {
          [sty.freeBoxayozePerez__jHddxRr2Tz]: hasVariant(
            $state,
            "ayozePerez",
            "ayozePerez"
          ),
          [sty.freeBoxdeGalarreta__jHddxSIfeb]: hasVariant(
            $state,
            "deGalarreta",
            "deGalarreta"
          ),
          [sty.freeBoxgimenez__jHddxbgMPs]: hasVariant(
            $state,
            "gimenez",
            "gimenez"
          ),
          [sty.freeBoxtraore__jHddxUIa70]: hasVariant(
            $state,
            "traore",
            "traore"
          )
        })}
      >
        <PlasmicImg__
          alt={""}
          className={classNames(sty.img__bGe84)}
          displayHeight={"auto"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"14px"}
          loading={"lazy"}
          src={{
            src: "/plasmic/copy_of_proliga_new_design/images/pngtreeEuroSymbolCurrencyPngImage3974231Png2.png",
            fullWidth: 512,
            fullHeight: 512,
            aspectRatio: undefined
          }}
        />

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__zhHEi
          )}
        >
          {"8.175.716"}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___1HnyX,
            {
              [sty.textardaGuler___1HnyX3RMyG]: hasVariant(
                $state,
                "ardaGuler",
                "ardaGuler"
              ),
              [sty.textayozePerez___1HnyXrr2Tz]: hasVariant(
                $state,
                "ayozePerez",
                "ayozePerez"
              ),
              [sty.textbudimir___1HnyXWp2]: hasVariant(
                $state,
                "budimir",
                "budimir"
              ),
              [sty.textceballos___1HnyX2ZaOf]: hasVariant(
                $state,
                "ceballos",
                "ceballos"
              ),
              [sty.textcourtua___1HnyXpuGbh]: hasVariant(
                $state,
                "courtua",
                "courtua"
              ),
              [sty.textdavidGarcia___1HnyXspXh5]: hasVariant(
                $state,
                "davidGarcia",
                "davidGarcia"
              ),
              [sty.textdeGalarreta___1HnyXsIfeb]: hasVariant(
                $state,
                "deGalarreta",
                "deGalarreta"
              ),
              [sty.textdeJong___1HnyX3KoUd]: hasVariant(
                $state,
                "deJong",
                "deJong"
              ),
              [sty.textdeLeon___1HnyXuXPgz]: hasVariant(
                $state,
                "deLeon",
                "deLeon"
              ),
              [sty.textfranGarcia___1HnyXa0Lv9]: hasVariant(
                $state,
                "franGarcia",
                "franGarcia"
              ),
              [sty.textgimenez___1HnyXbgMPs]: hasVariant(
                $state,
                "gimenez",
                "gimenez"
              ),
              [sty.textisaac___1HnyXs9Dhn]: hasVariant(
                $state,
                "isaac",
                "isaac"
              ),
              [sty.texttraore___1HnyXuIa70]: hasVariant(
                $state,
                "traore",
                "traore"
              )
            }
          )}
        >
          {hasVariant($state, "isaac", "isaac")
            ? "8,54"
            : hasVariant($state, "franGarcia", "franGarcia")
            ? "5,59"
            : hasVariant($state, "deLeon", "deLeon")
            ? "9,58"
            : hasVariant($state, "deJong", "deJong")
            ? "5,58"
            : hasVariant($state, "deGalarreta", "deGalarreta")
            ? "6,32"
            : hasVariant($state, "davidGarcia", "davidGarcia")
            ? "7,52"
            : hasVariant($state, "ceballos", "ceballos")
            ? "8,5"
            : hasVariant($state, "budimir", "budimir")
            ? "7,15"
            : hasVariant($state, "ayozePerez", "ayozePerez")
            ? "7.58"
            : hasVariant($state, "ardaGuler", "ardaGuler")
            ? "5.68"
            : hasVariant($state, "gimenez", "gimenez")
            ? "12"
            : hasVariant($state, "courtua", "courtua")
            ? "11"
            : "6,15"}
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "link"],
  link: ["link"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  link: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSellPlayerCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSellPlayerCard__VariantsArgs;
    args?: PlasmicSellPlayerCard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSellPlayerCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSellPlayerCard__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSellPlayerCard__ArgProps,
          internalVariantPropNames: PlasmicSellPlayerCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSellPlayerCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSellPlayerCard";
  } else {
    func.displayName = `PlasmicSellPlayerCard.${nodeName}`;
  }
  return func;
}

export const PlasmicSellPlayerCard = Object.assign(
  // Top-level PlasmicSellPlayerCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    link: makeNodeComponent("link"),

    // Metadata about props expected for PlasmicSellPlayerCard
    internalVariantProps: PlasmicSellPlayerCard__VariantProps,
    internalArgProps: PlasmicSellPlayerCard__ArgProps
  }
);

export default PlasmicSellPlayerCard;
/* prettier-ignore-end */
