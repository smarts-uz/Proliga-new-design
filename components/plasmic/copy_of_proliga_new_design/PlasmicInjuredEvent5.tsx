// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qrPZwqtrqWM4S9b4djCj1H
// Component: aJOke30P1rS_

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: qrPZwqtrqWM4S9b4djCj1H/projectcss
import sty from "./PlasmicInjuredEvent5.module.css"; // plasmic-import: aJOke30P1rS_/css

createPlasmicElementProxy;

export type PlasmicInjuredEvent5__VariantMembers = {
  goals: "goals";
  goalAssists: "goalAssists";
  bigChanceCreated: "bigChanceCreated";
  ballsIntoTheBox: "ballsIntoTheBox";
  penaltiesWon: "penaltiesWon";
  penaltiesSaved: "penaltiesSaved";
  saves: "saves";
  effectiveClearanes: "effectiveClearanes";
  penaltiesMissed: "penaltiesMissed";
  ownGoals: "ownGoals";
  goalsAgainst: "goalsAgainst";
  yellowCard: "yellowCard";
  secondaryYellowCard: "secondaryYellowCard";
  redCard: "redCard";
  goalAttempts: "goalAttempts";
  effectiveDribbles: "effectiveDribbles";
  recoviries: "recoviries";
  lostBalls: "lostBalls";
  commitedPenalties: "commitedPenalties";
};
export type PlasmicInjuredEvent5__VariantsArgs = {
  goals?: SingleBooleanChoiceArg<"goals">;
  goalAssists?: SingleBooleanChoiceArg<"goalAssists">;
  bigChanceCreated?: SingleBooleanChoiceArg<"bigChanceCreated">;
  ballsIntoTheBox?: SingleBooleanChoiceArg<"ballsIntoTheBox">;
  penaltiesWon?: SingleBooleanChoiceArg<"penaltiesWon">;
  penaltiesSaved?: SingleBooleanChoiceArg<"penaltiesSaved">;
  saves?: SingleBooleanChoiceArg<"saves">;
  effectiveClearanes?: SingleBooleanChoiceArg<"effectiveClearanes">;
  penaltiesMissed?: SingleBooleanChoiceArg<"penaltiesMissed">;
  ownGoals?: SingleBooleanChoiceArg<"ownGoals">;
  goalsAgainst?: SingleBooleanChoiceArg<"goalsAgainst">;
  yellowCard?: SingleBooleanChoiceArg<"yellowCard">;
  secondaryYellowCard?: SingleBooleanChoiceArg<"secondaryYellowCard">;
  redCard?: SingleBooleanChoiceArg<"redCard">;
  goalAttempts?: SingleBooleanChoiceArg<"goalAttempts">;
  effectiveDribbles?: SingleBooleanChoiceArg<"effectiveDribbles">;
  recoviries?: SingleBooleanChoiceArg<"recoviries">;
  lostBalls?: SingleBooleanChoiceArg<"lostBalls">;
  commitedPenalties?: SingleBooleanChoiceArg<"commitedPenalties">;
};
type VariantPropType = keyof PlasmicInjuredEvent5__VariantsArgs;
export const PlasmicInjuredEvent5__VariantProps = new Array<VariantPropType>(
  "goals",
  "goalAssists",
  "bigChanceCreated",
  "ballsIntoTheBox",
  "penaltiesWon",
  "penaltiesSaved",
  "saves",
  "effectiveClearanes",
  "penaltiesMissed",
  "ownGoals",
  "goalsAgainst",
  "yellowCard",
  "secondaryYellowCard",
  "redCard",
  "goalAttempts",
  "effectiveDribbles",
  "recoviries",
  "lostBalls",
  "commitedPenalties"
);

export type PlasmicInjuredEvent5__ArgsType = {};
type ArgPropType = keyof PlasmicInjuredEvent5__ArgsType;
export const PlasmicInjuredEvent5__ArgProps = new Array<ArgPropType>();

export type PlasmicInjuredEvent5__OverridesType = {
  root?: Flex__<"div">;
  columns?: Flex__<"div">;
};

export interface DefaultInjuredEvent5Props {
  goals?: SingleBooleanChoiceArg<"goals">;
  goalAssists?: SingleBooleanChoiceArg<"goalAssists">;
  bigChanceCreated?: SingleBooleanChoiceArg<"bigChanceCreated">;
  ballsIntoTheBox?: SingleBooleanChoiceArg<"ballsIntoTheBox">;
  penaltiesWon?: SingleBooleanChoiceArg<"penaltiesWon">;
  penaltiesSaved?: SingleBooleanChoiceArg<"penaltiesSaved">;
  saves?: SingleBooleanChoiceArg<"saves">;
  effectiveClearanes?: SingleBooleanChoiceArg<"effectiveClearanes">;
  penaltiesMissed?: SingleBooleanChoiceArg<"penaltiesMissed">;
  ownGoals?: SingleBooleanChoiceArg<"ownGoals">;
  goalsAgainst?: SingleBooleanChoiceArg<"goalsAgainst">;
  yellowCard?: SingleBooleanChoiceArg<"yellowCard">;
  secondaryYellowCard?: SingleBooleanChoiceArg<"secondaryYellowCard">;
  redCard?: SingleBooleanChoiceArg<"redCard">;
  goalAttempts?: SingleBooleanChoiceArg<"goalAttempts">;
  effectiveDribbles?: SingleBooleanChoiceArg<"effectiveDribbles">;
  recoviries?: SingleBooleanChoiceArg<"recoviries">;
  lostBalls?: SingleBooleanChoiceArg<"lostBalls">;
  commitedPenalties?: SingleBooleanChoiceArg<"commitedPenalties">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicInjuredEvent5__RenderFunc(props: {
  variants: PlasmicInjuredEvent5__VariantsArgs;
  args: PlasmicInjuredEvent5__ArgsType;
  overrides: PlasmicInjuredEvent5__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "goals",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.goals
      },
      {
        path: "goalAssists",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.goalAssists
      },
      {
        path: "bigChanceCreated",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.bigChanceCreated
      },
      {
        path: "ballsIntoTheBox",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.ballsIntoTheBox
      },
      {
        path: "penaltiesWon",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.penaltiesWon
      },
      {
        path: "penaltiesSaved",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.penaltiesSaved
      },
      {
        path: "saves",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.saves
      },
      {
        path: "effectiveClearanes",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.effectiveClearanes
      },
      {
        path: "penaltiesMissed",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.penaltiesMissed
      },
      {
        path: "ownGoals",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.ownGoals
      },
      {
        path: "goalsAgainst",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.goalsAgainst
      },
      {
        path: "yellowCard",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.yellowCard
      },
      {
        path: "secondaryYellowCard",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.secondaryYellowCard
      },
      {
        path: "redCard",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.redCard
      },
      {
        path: "goalAttempts",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.goalAttempts
      },
      {
        path: "effectiveDribbles",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.effectiveDribbles
      },
      {
        path: "recoviries",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.recoviries
      },
      {
        path: "lostBalls",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.lostBalls
      },
      {
        path: "commitedPenalties",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.commitedPenalties
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"columns"}
        data-plasmic-override={overrides.columns}
        className={classNames(projectcss.all, sty.columns)}
      >
        <div className={classNames(projectcss.all, sty.column___8UzfX)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__x13W
            )}
          >
            {"_"}
          </div>
        </div>
        <div
          className={classNames(projectcss.all, sty.column__pGJmr, {
            [sty.columngoalsAgainst__pGJmrKCzTa]: hasVariant(
              $state,
              "goalsAgainst",
              "goalsAgainst"
            )
          })}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___9RtrP,
              {
                [sty.textballsIntoTheBox___9RtrPpq40Q]: hasVariant(
                  $state,
                  "ballsIntoTheBox",
                  "ballsIntoTheBox"
                ),
                [sty.textbigChanceCreated___9RtrP6O0UO]: hasVariant(
                  $state,
                  "bigChanceCreated",
                  "bigChanceCreated"
                ),
                [sty.textcommitedPenalties___9RtrPgi3Zc]: hasVariant(
                  $state,
                  "commitedPenalties",
                  "commitedPenalties"
                ),
                [sty.texteffectiveClearanes___9RtrPqqLyE]: hasVariant(
                  $state,
                  "effectiveClearanes",
                  "effectiveClearanes"
                ),
                [sty.texteffectiveDribbles___9RtrPUbj7S]: hasVariant(
                  $state,
                  "effectiveDribbles",
                  "effectiveDribbles"
                ),
                [sty.textgoalAssists___9RtrP8Fzg1]: hasVariant(
                  $state,
                  "goalAssists",
                  "goalAssists"
                ),
                [sty.textgoalAttempts___9RtrPzf16L]: hasVariant(
                  $state,
                  "goalAttempts",
                  "goalAttempts"
                ),
                [sty.textgoalsAgainst___9RtrPkCzTa]: hasVariant(
                  $state,
                  "goalsAgainst",
                  "goalsAgainst"
                ),
                [sty.textgoals___9RtrP6L3E]: hasVariant(
                  $state,
                  "goals",
                  "goals"
                ),
                [sty.textlostBalls___9RtrPMnThs]: hasVariant(
                  $state,
                  "lostBalls",
                  "lostBalls"
                ),
                [sty.textownGoals___9RtrP1M5Ry]: hasVariant(
                  $state,
                  "ownGoals",
                  "ownGoals"
                ),
                [sty.textpenaltiesMissed___9RtrP4Muw8]: hasVariant(
                  $state,
                  "penaltiesMissed",
                  "penaltiesMissed"
                ),
                [sty.textpenaltiesSaved___9RtrP9FAOn]: hasVariant(
                  $state,
                  "penaltiesSaved",
                  "penaltiesSaved"
                ),
                [sty.textpenaltiesWon___9RtrPocA5L]: hasVariant(
                  $state,
                  "penaltiesWon",
                  "penaltiesWon"
                ),
                [sty.textrecoviries___9RtrPLzVh]: hasVariant(
                  $state,
                  "recoviries",
                  "recoviries"
                ),
                [sty.textredCard___9RtrPc2Cu3]: hasVariant(
                  $state,
                  "redCard",
                  "redCard"
                ),
                [sty.textsaves___9RtrPlwCyS]: hasVariant(
                  $state,
                  "saves",
                  "saves"
                ),
                [sty.textsecondaryYellowCard___9RtrPCyaNv]: hasVariant(
                  $state,
                  "secondaryYellowCard",
                  "secondaryYellowCard"
                ),
                [sty.textyellowCard___9RtrP1ESs9]: hasVariant(
                  $state,
                  "yellowCard",
                  "yellowCard"
                )
              }
            )}
          >
            {hasVariant($state, "commitedPenalties", "commitedPenalties")
              ? "Commited penalties"
              : hasVariant($state, "lostBalls", "lostBalls")
              ? "Lost balls"
              : hasVariant($state, "recoviries", "recoviries")
              ? "Recoviries"
              : hasVariant($state, "effectiveDribbles", "effectiveDribbles")
              ? "Effective dribbles"
              : hasVariant($state, "goalAttempts", "goalAttempts")
              ? "Goal attempts"
              : hasVariant($state, "redCard", "redCard")
              ? "Red card"
              : hasVariant($state, "secondaryYellowCard", "secondaryYellowCard")
              ? "Secondary yellow card"
              : hasVariant($state, "yellowCard", "yellowCard")
              ? "Yellow card"
              : hasVariant($state, "goalsAgainst", "goalsAgainst")
              ? "Goals against"
              : hasVariant($state, "ownGoals", "ownGoals")
              ? "Own goals"
              : hasVariant($state, "penaltiesMissed", "penaltiesMissed")
              ? "Penalties missed"
              : hasVariant($state, "effectiveClearanes", "effectiveClearanes")
              ? "Effective clearanes"
              : hasVariant($state, "saves", "saves")
              ? "Saves"
              : hasVariant($state, "penaltiesSaved", "penaltiesSaved")
              ? "Penalties saved"
              : hasVariant($state, "penaltiesWon", "penaltiesWon")
              ? "Penalties won"
              : hasVariant($state, "ballsIntoTheBox", "ballsIntoTheBox")
              ? "Balls into the box"
              : hasVariant($state, "bigChanceCreated", "bigChanceCreated")
              ? "Big chance created"
              : hasVariant($state, "goalAssists", "goalAssists")
              ? "Goal assists"
              : hasVariant($state, "goals", "goals")
              ? "Goals"
              : "Minutes played"}
          </div>
        </div>
        <div className={classNames(projectcss.all, sty.column__dcHqm)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__pPyFt
            )}
          >
            {"_"}
          </div>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "columns"],
  columns: ["columns"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  columns: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicInjuredEvent5__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicInjuredEvent5__VariantsArgs;
    args?: PlasmicInjuredEvent5__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicInjuredEvent5__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicInjuredEvent5__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicInjuredEvent5__ArgProps,
          internalVariantPropNames: PlasmicInjuredEvent5__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicInjuredEvent5__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicInjuredEvent5";
  } else {
    func.displayName = `PlasmicInjuredEvent5.${nodeName}`;
  }
  return func;
}

export const PlasmicInjuredEvent5 = Object.assign(
  // Top-level PlasmicInjuredEvent5 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    columns: makeNodeComponent("columns"),

    // Metadata about props expected for PlasmicInjuredEvent5
    internalVariantProps: PlasmicInjuredEvent5__VariantProps,
    internalArgProps: PlasmicInjuredEvent5__ArgProps
  }
);

export default PlasmicInjuredEvent5;
/* prettier-ignore-end */
