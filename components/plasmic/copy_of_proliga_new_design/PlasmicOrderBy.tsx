// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qrPZwqtrqWM4S9b4djCj1H
// Component: bY524CGT1Qpz

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import UpDownOrder from "../../UpDownOrder"; // plasmic-import: QACqVA5nfjte/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: qrPZwqtrqWM4S9b4djCj1H/projectcss
import sty from "./PlasmicOrderBy.module.css"; // plasmic-import: bY524CGT1Qpz/css

createPlasmicElementProxy;

export type PlasmicOrderBy__VariantMembers = {};
export type PlasmicOrderBy__VariantsArgs = {};
type VariantPropType = keyof PlasmicOrderBy__VariantsArgs;
export const PlasmicOrderBy__VariantProps = new Array<VariantPropType>();

export type PlasmicOrderBy__ArgsType = {
  onclickPrice?: (event: any) => void;
  onclickAllPoint?: (event: any) => void;
  upDown?: (val: any) => void;
  upDownLink?: (event: any) => void;
};
type ArgPropType = keyof PlasmicOrderBy__ArgsType;
export const PlasmicOrderBy__ArgProps = new Array<ArgPropType>(
  "onclickPrice",
  "onclickAllPoint",
  "upDown",
  "upDownLink"
);

export type PlasmicOrderBy__OverridesType = {
  orderBy?: Flex__<"div">;
  name?: Flex__<"div">;
  link?: Flex__<"a"> & Partial<LinkProps>;
  upDownOrder?: Flex__<typeof UpDownOrder>;
  позиция?: Flex__<"div">;
  клуб?: Flex__<"div">;
  очко?: Flex__<"div">;
  upDownOrder2?: Flex__<typeof UpDownOrder>;
  цена?: Flex__<"div">;
  upDownOrder3?: Flex__<typeof UpDownOrder>;
};

export interface DefaultOrderByProps {
  onclickPrice?: (event: any) => void;
  onclickAllPoint?: (event: any) => void;
  upDown?: (val: any) => void;
  upDownLink?: (event: any) => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicOrderBy__RenderFunc(props: {
  variants: PlasmicOrderBy__VariantsArgs;
  args: PlasmicOrderBy__ArgsType;
  overrides: PlasmicOrderBy__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "orderType",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "upDownOrder.down",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "upDownOrder2.down",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "upDownOrder3.down",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"orderBy"}
      data-plasmic-override={overrides.orderBy}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.orderBy
      )}
    >
      <div
        data-plasmic-name={"name"}
        data-plasmic-override={overrides.name}
        className={classNames(projectcss.all, sty.name)}
        onClick={async event => {
          const $steps = {};
        }}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__dhafo
          )}
        >
          {"O'yinchi"}
        </div>
        <PlasmicLink__
          data-plasmic-name={"link"}
          data-plasmic-override={overrides.link}
          className={classNames(projectcss.all, projectcss.a, sty.link)}
          component={Link}
          onClick={args.upDownLink}
          platform={"nextjs"}
        >
          <UpDownOrder
            data-plasmic-name={"upDownOrder"}
            data-plasmic-override={overrides.upDownOrder}
            className={classNames("__wab_instance", sty.upDownOrder)}
            down={generateStateValueProp($state, ["upDownOrder", "down"])}
            onDownChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["upDownOrder", "down"]).apply(
                null,
                eventArgs
              );
              args.upDown.apply(null, eventArgs);
            }}
          />
        </PlasmicLink__>
      </div>
      <div
        data-plasmic-name={"\u043f\u043e\u0437\u0438\u0446\u0438\u044f"}
        data-plasmic-override={overrides.позиция}
        className={classNames(projectcss.all, sty.позиция)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__rwTcp
          )}
        >
          {"Pozitsiya"}
        </div>
      </div>
      <div
        data-plasmic-name={"\u043a\u043b\u0443\u0431"}
        data-plasmic-override={overrides.клуб}
        className={classNames(projectcss.all, sty.клуб)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__zSh9V
          )}
        >
          {"Klub"}
        </div>
      </div>
      <div
        data-plasmic-name={"\u043e\u0447\u043a\u043e"}
        data-plasmic-override={overrides.очко}
        className={classNames(projectcss.all, sty.очко)}
        onClick={args.onclickPrice}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__lyBe
          )}
        >
          {"Narx"}
        </div>
        <UpDownOrder
          data-plasmic-name={"upDownOrder2"}
          data-plasmic-override={overrides.upDownOrder2}
          className={classNames("__wab_instance", sty.upDownOrder2)}
          down={generateStateValueProp($state, ["upDownOrder2", "down"])}
          onDownChange={generateStateOnChangeProp($state, [
            "upDownOrder2",
            "down"
          ])}
        />
      </div>
      <div
        data-plasmic-name={"\u0446\u0435\u043d\u0430"}
        data-plasmic-override={overrides.цена}
        className={classNames(projectcss.all, sty.цена)}
        onClick={args.onclickAllPoint}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___3Dp9O
          )}
        >
          {"Ochko"}
        </div>
        <UpDownOrder
          data-plasmic-name={"upDownOrder3"}
          data-plasmic-override={overrides.upDownOrder3}
          className={classNames("__wab_instance", sty.upDownOrder3)}
          down={generateStateValueProp($state, ["upDownOrder3", "down"])}
          onDownChange={generateStateOnChangeProp($state, [
            "upDownOrder3",
            "down"
          ])}
        />
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  orderBy: [
    "orderBy",
    "name",
    "link",
    "upDownOrder",
    "\u043f\u043e\u0437\u0438\u0446\u0438\u044f",
    "\u043a\u043b\u0443\u0431",
    "\u043e\u0447\u043a\u043e",
    "upDownOrder2",
    "\u0446\u0435\u043d\u0430",
    "upDownOrder3"
  ],
  name: ["name", "link", "upDownOrder"],
  link: ["link", "upDownOrder"],
  upDownOrder: ["upDownOrder"],
  позиция: ["\u043f\u043e\u0437\u0438\u0446\u0438\u044f"],
  клуб: ["\u043a\u043b\u0443\u0431"],
  очко: ["\u043e\u0447\u043a\u043e", "upDownOrder2"],
  upDownOrder2: ["upDownOrder2"],
  цена: ["\u0446\u0435\u043d\u0430", "upDownOrder3"],
  upDownOrder3: ["upDownOrder3"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  orderBy: "div";
  name: "div";
  link: "a";
  upDownOrder: typeof UpDownOrder;
  позиция: "div";
  клуб: "div";
  очко: "div";
  upDownOrder2: typeof UpDownOrder;
  цена: "div";
  upDownOrder3: typeof UpDownOrder;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicOrderBy__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicOrderBy__VariantsArgs;
    args?: PlasmicOrderBy__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicOrderBy__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicOrderBy__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicOrderBy__ArgProps,
          internalVariantPropNames: PlasmicOrderBy__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicOrderBy__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "orderBy") {
    func.displayName = "PlasmicOrderBy";
  } else {
    func.displayName = `PlasmicOrderBy.${nodeName}`;
  }
  return func;
}

export const PlasmicOrderBy = Object.assign(
  // Top-level PlasmicOrderBy renders the root element
  makeNodeComponent("orderBy"),
  {
    // Helper components rendering sub-elements
    _name: makeNodeComponent("name"),
    link: makeNodeComponent("link"),
    upDownOrder: makeNodeComponent("upDownOrder"),
    позиция: makeNodeComponent("\u043f\u043e\u0437\u0438\u0446\u0438\u044f"),
    клуб: makeNodeComponent("\u043a\u043b\u0443\u0431"),
    очко: makeNodeComponent("\u043e\u0447\u043a\u043e"),
    upDownOrder2: makeNodeComponent("upDownOrder2"),
    цена: makeNodeComponent("\u0446\u0435\u043d\u0430"),
    upDownOrder3: makeNodeComponent("upDownOrder3"),

    // Metadata about props expected for PlasmicOrderBy
    internalVariantProps: PlasmicOrderBy__VariantProps,
    internalArgProps: PlasmicOrderBy__ArgProps
  }
);

export default PlasmicOrderBy;
/* prettier-ignore-end */
