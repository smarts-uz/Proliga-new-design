// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qrPZwqtrqWM4S9b4djCj1H
// Component: S2d4_Y9RJ5wv

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Navbar from "../../Navbar"; // plasmic-import: j_koFSvK1RER/component
import { AntdDropdown } from "@plasmicpkgs/antd5/skinny/registerDropdown";
import { AntdMenuItem } from "@plasmicpkgs/antd5/skinny/registerMenu";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import Rankings2 from "../../Rankings2"; // plasmic-import: uEofcDWE96YI/component
import Footer from "../../Footer"; // plasmic-import: sRXlHXHXDYps/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantskuWqqBs0ERIp } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: KuWQQBs0eRIp/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: qrPZwqtrqWM4S9b4djCj1H/projectcss
import sty from "./PlasmicRankings.module.css"; // plasmic-import: S2d4_Y9RJ5wv/css

createPlasmicElementProxy;

export type PlasmicRankings__VariantMembers = {};
export type PlasmicRankings__VariantsArgs = {};
type VariantPropType = keyof PlasmicRankings__VariantsArgs;
export const PlasmicRankings__VariantProps = new Array<VariantPropType>();

export type PlasmicRankings__ArgsType = {};
type ArgPropType = keyof PlasmicRankings__ArgsType;
export const PlasmicRankings__ArgProps = new Array<ArgPropType>();

export type PlasmicRankings__OverridesType = {
  rankings?: Flex__<"div">;
  navbar?: Flex__<typeof Navbar>;
  h4?: Flex__<"h4">;
  rankings2?: Flex__<typeof Rankings2>;
  h5?: Flex__<"h5">;
  img?: Flex__<typeof PlasmicImg__>;
  footer?: Flex__<typeof Footer>;
};

export interface DefaultRankingsProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicRankings__RenderFunc(props: {
  variants: PlasmicRankings__VariantsArgs;
  args: PlasmicRankings__ArgsType;
  overrides: PlasmicRankings__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantskuWqqBs0ERIp()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicRankings.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicRankings.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicRankings.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"rankings"}
          data-plasmic-override={overrides.rankings}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.rankings
          )}
        >
          <Navbar
            data-plasmic-name={"navbar"}
            data-plasmic-override={overrides.navbar}
            className={classNames("__wab_instance", sty.navbar)}
          />

          <div className={classNames(projectcss.all, sty.freeBox__cMhjR)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__grvyo
              )}
            >
              {"Global Rankings"}
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__z5W2O)}>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__n3Sv3)}
            >
              <AntdDropdown
                className={classNames("__wab_instance", sty.dropdown__hRsFk)}
                dropdownMenuScopeClassName={
                  sty["dropdown__hRsFk__dropdownMenu"]
                }
                menuItems={() => (
                  <React.Fragment>
                    <AntdMenuItem
                      className={classNames(
                        "__wab_instance",
                        sty.menuItem__np14J
                      )}
                      key={"menu-item-1"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__lAmIn
                        )}
                      >
                        {"Menu item"}
                      </div>
                    </AntdMenuItem>
                    <AntdMenuItem
                      className={classNames(
                        "__wab_instance",
                        sty.menuItem__qTxuR
                      )}
                      key={"menu-item-2"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__wrWxM
                        )}
                      >
                        {"Menu item"}
                      </div>
                    </AntdMenuItem>
                  </React.Fragment>
                )}
                menuItemsJson={(() => {
                  const __composite = [
                    { type: "item", value: "action1", label: null },
                    { type: "item", value: "action2", label: null },
                    { type: "item", label: null },
                    { type: "item", label: null }
                  ];
                  __composite["0"]["label"] = "LaLiga";
                  __composite["1"]["label"] = "DAZN";
                  __composite["2"]["label"] = "Mahou";
                  __composite["3"]["label"] = "Burger KIng";
                  return __composite;
                })()}
              >
                <AntdButton
                  className={classNames("__wab_instance", sty.button__iqU5G)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__lMibz
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>{""}</React.Fragment>
                      {
                        <h6
                          className={classNames(
                            projectcss.all,
                            projectcss.h6,
                            projectcss.__wab_text,
                            sty.h6__oQc8K
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ color: "#FFFFFF" }}
                            >
                              {"All sponsors"}
                            </span>
                            <React.Fragment>{"\n"}</React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ color: "#FFFFFF" }}
                            >
                              {""}
                            </span>
                          </React.Fragment>
                        </h6>
                      }
                      <React.Fragment>{""}</React.Fragment>
                    </React.Fragment>
                  </div>
                </AntdButton>
              </AntdDropdown>
              <AntdDropdown
                className={classNames("__wab_instance", sty.dropdown__ua7U8)}
                dropdownMenuScopeClassName={
                  sty["dropdown__ua7U8__dropdownMenu"]
                }
                menuItems={() => (
                  <React.Fragment>
                    <AntdMenuItem
                      className={classNames(
                        "__wab_instance",
                        sty.menuItem___4XvV
                      )}
                      key={"menu-item-1"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__sfSpM
                        )}
                      >
                        {"Menu item"}
                      </div>
                    </AntdMenuItem>
                    <AntdMenuItem
                      className={classNames(
                        "__wab_instance",
                        sty.menuItem__jrwb8
                      )}
                      key={"menu-item-2"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__m7GDi
                        )}
                      >
                        {"Menu item"}
                      </div>
                    </AntdMenuItem>
                  </React.Fragment>
                )}
                menuItemsJson={(() => {
                  const __composite = [
                    { type: "item", value: "action1", label: null }
                  ];
                  __composite["0"]["label"] = "By month";
                  return __composite;
                })()}
              >
                <AntdButton
                  className={classNames("__wab_instance", sty.button__gu6DB)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ggMgS
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>{""}</React.Fragment>
                      {
                        <h6
                          className={classNames(
                            projectcss.all,
                            projectcss.h6,
                            projectcss.__wab_text,
                            sty.h6__afT2W
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ color: "#FFFFFF" }}
                            >
                              {"By fixture"}
                            </span>
                            <React.Fragment>{"\n"}</React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ color: "#FFFFFF" }}
                            >
                              {""}
                            </span>
                          </React.Fragment>
                        </h6>
                      }
                      <React.Fragment>{""}</React.Fragment>
                    </React.Fragment>
                  </div>
                </AntdButton>
              </AntdDropdown>
              <AntdDropdown
                className={classNames("__wab_instance", sty.dropdown__fji4Z)}
                dropdownMenuScopeClassName={
                  sty["dropdown__fji4Z__dropdownMenu"]
                }
                menuItems={() => (
                  <React.Fragment>
                    <AntdMenuItem
                      className={classNames(
                        "__wab_instance",
                        sty.menuItem__oqvEe
                      )}
                      key={"menu-item-1"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__uqdB
                        )}
                      >
                        {"Menu item"}
                      </div>
                    </AntdMenuItem>
                    <AntdMenuItem
                      className={classNames(
                        "__wab_instance",
                        sty.menuItem__fhW2I
                      )}
                      key={"menu-item-2"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__nagzv
                        )}
                      >
                        {"Menu item"}
                      </div>
                    </AntdMenuItem>
                  </React.Fragment>
                )}
                menuItemsJson={(() => {
                  try {
                    return undefined;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [
                        { type: "item", value: "action1", label: "Action 1" },
                        { type: "item", value: "action2", label: "Action 2" }
                      ];
                    }
                    throw e;
                  }
                })()}
                trigger={"hover"}
              >
                <AntdButton
                  className={classNames("__wab_instance", sty.button__avvy5)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xWbn8
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>{""}</React.Fragment>
                      {
                        <h6
                          className={classNames(
                            projectcss.all,
                            projectcss.h6,
                            projectcss.__wab_text,
                            sty.h6__ldgnL
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ color: "#FFFFFF" }}
                            >
                              {"All"}
                            </span>
                            <React.Fragment>{"\n"}</React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ color: "#FFFFFF" }}
                            >
                              {""}
                            </span>
                          </React.Fragment>
                        </h6>
                      }
                      <React.Fragment>{""}</React.Fragment>
                    </React.Fragment>
                  </div>
                </AntdButton>
              </AntdDropdown>
            </Stack__>
            <div className={classNames(projectcss.all, sty.freeBox__fe3Vc)}>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__bFqcC)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__o8ZMn)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___9VI3B
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>{""}</React.Fragment>
                      {
                        <h4
                          data-plasmic-name={"h4"}
                          data-plasmic-override={overrides.h4}
                          className={classNames(
                            projectcss.all,
                            projectcss.h4,
                            projectcss.__wab_text,
                            sty.h4
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ color: "#FFD300" }}
                            >
                              {"Top 100  "}
                            </span>
                            <React.Fragment>{""}</React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ color: "#FFFFFF" }}
                            >
                              {"Managers"}
                            </span>
                          </React.Fragment>
                        </h4>
                      }
                      <React.Fragment>{""}</React.Fragment>
                    </React.Fragment>
                  </div>
                </div>
                <Rankings2
                  data-plasmic-name={"rankings2"}
                  data-plasmic-override={overrides.rankings2}
                  className={classNames("__wab_instance", sty.rankings2)}
                />
              </Stack__>
              <div className={classNames(projectcss.all, sty.freeBox__gl7O)}>
                <div className={classNames(projectcss.all, sty.freeBox__morqj)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__f33Xk
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>{""}</React.Fragment>
                      {
                        <h5
                          data-plasmic-name={"h5"}
                          data-plasmic-override={overrides.h5}
                          className={classNames(
                            projectcss.all,
                            projectcss.h5,
                            projectcss.__wab_text,
                            sty.h5
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ color: "#FFFFFF" }}
                            >
                              {"Line-up"}
                            </span>
                          </React.Fragment>
                        </h5>
                      }
                      <React.Fragment>{""}</React.Fragment>
                    </React.Fragment>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___04VGq)}
                  >
                    <PlasmicImg__
                      data-plasmic-name={"img"}
                      data-plasmic-override={overrides.img}
                      alt={""}
                      className={classNames(sty.img)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/copy_of_proliga_new_design/images/emptyStateNoResultswebp.webp",
                        fullWidth: 145,
                        fullHeight: 110,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                </div>
              </div>
            </div>
          </div>
          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  rankings: ["rankings", "navbar", "h4", "rankings2", "h5", "img", "footer"],
  navbar: ["navbar"],
  h4: ["h4"],
  rankings2: ["rankings2"],
  h5: ["h5"],
  img: ["img"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  rankings: "div";
  navbar: typeof Navbar;
  h4: "h4";
  rankings2: typeof Rankings2;
  h5: "h5";
  img: typeof PlasmicImg__;
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicRankings__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicRankings__VariantsArgs;
    args?: PlasmicRankings__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicRankings__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicRankings__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicRankings__ArgProps,
          internalVariantPropNames: PlasmicRankings__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicRankings__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "rankings") {
    func.displayName = "PlasmicRankings";
  } else {
    func.displayName = `PlasmicRankings.${nodeName}`;
  }
  return func;
}

export const PlasmicRankings = Object.assign(
  // Top-level PlasmicRankings renders the root element
  makeNodeComponent("rankings"),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    h4: makeNodeComponent("h4"),
    rankings2: makeNodeComponent("rankings2"),
    h5: makeNodeComponent("h5"),
    img: makeNodeComponent("img"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicRankings
    internalVariantProps: PlasmicRankings__VariantProps,
    internalArgProps: PlasmicRankings__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Rankings",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicRankings;
/* prettier-ignore-end */
