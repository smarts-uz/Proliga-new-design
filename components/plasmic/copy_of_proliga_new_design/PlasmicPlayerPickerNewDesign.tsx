// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qrPZwqtrqWM4S9b4djCj1H
// Component: Lk6JgqMmYsF6

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: qrPZwqtrqWM4S9b4djCj1H/projectcss
import sty from "./PlasmicPlayerPickerNewDesign.module.css"; // plasmic-import: Lk6JgqMmYsF6/css

createPlasmicElementProxy;

export type PlasmicPlayerPickerNewDesign__VariantMembers = {};
export type PlasmicPlayerPickerNewDesign__VariantsArgs = {};
type VariantPropType = keyof PlasmicPlayerPickerNewDesign__VariantsArgs;
export const PlasmicPlayerPickerNewDesign__VariantProps =
  new Array<VariantPropType>();

export type PlasmicPlayerPickerNewDesign__ArgsType = {
  name?: string;
  position?: string;
  buttonVisibility?: string;
  onclickPlus?: (event: any) => void;
  onclickMinus?: (event: any) => void;
  clubName?: string;
  price?: number;
  point?: number;
  teamBalance?: number;
  playerPrice?: string;
  onclick?: (event: any) => void;
  checkPlayer?: number;
  playerClubCount?: number;
  onclickAvatar?: (event: any) => void;
};
type ArgPropType = keyof PlasmicPlayerPickerNewDesign__ArgsType;
export const PlasmicPlayerPickerNewDesign__ArgProps = new Array<ArgPropType>(
  "name",
  "position",
  "buttonVisibility",
  "onclickPlus",
  "onclickMinus",
  "clubName",
  "price",
  "point",
  "teamBalance",
  "playerPrice",
  "onclick",
  "checkPlayer",
  "playerClubCount",
  "onclickAvatar"
);

export type PlasmicPlayerPickerNewDesign__OverridesType = {
  root?: Flex__<"div">;
  checkBuy?: Flex__<"div">;
  minusBalance?: Flex__<"div">;
  buy?: Flex__<"div">;
  buyPlus?: Flex__<"div">;
  buySell?: Flex__<"div">;
};

export interface DefaultPlayerPickerNewDesignProps {
  name?: string;
  position?: string;
  buttonVisibility?: string;
  onclickPlus?: (event: any) => void;
  onclickMinus?: (event: any) => void;
  clubName?: string;
  price?: number;
  point?: number;
  teamBalance?: number;
  playerPrice?: string;
  onclick?: (event: any) => void;
  checkPlayer?: number;
  playerClubCount?: number;
  onclickAvatar?: (event: any) => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPlayerPickerNewDesign__RenderFunc(props: {
  variants: PlasmicPlayerPickerNewDesign__VariantsArgs;
  args: PlasmicPlayerPickerNewDesign__ArgsType;
  overrides: PlasmicPlayerPickerNewDesign__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          name: "Player",
          position: "DEF",
          clubName: "RealMadrid",
          price: 9,
          point: 88,
          teamBalance: 100,
          playerPrice: "12",
          playerClubCount: 4
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    playerPickLimit: usePlasmicDataOp(() => {
      return {
        sourceId: "vQtRPuFArSfh43vUmgx2PS",
        opId: "c4407b10-fad7-4a9f-a1e5-9ffb1e683a9c",
        userArgs: {},
        cacheKey: `plasmic.$.c4407b10-fad7-4a9f-a1e5-9ffb1e683a9c.$.`,
        invalidatedKeys: null,
        roleId: "ead2b235-73a3-4579-b15a-7fc91fc1a23a"
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__chTgW
        )}
      >
        <React.Fragment>
          {(() => {
            try {
              return $props.position;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "";
              }
              throw e;
            }
          })()}
        </React.Fragment>
      </div>
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text___89ZTj
        )}
      >
        <React.Fragment>
          {(() => {
            try {
              return $props.name;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "Player";
              }
              throw e;
            }
          })()}
        </React.Fragment>
      </div>
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__wEpef
        )}
      >
        <React.Fragment>
          {(() => {
            try {
              return $props.clubName;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "";
              }
              throw e;
            }
          })()}
        </React.Fragment>
      </div>
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__zpatG
        )}
      >
        <React.Fragment>
          {(() => {
            try {
              return $props.point;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "";
              }
              throw e;
            }
          })()}
        </React.Fragment>
      </div>
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__vxgcA
        )}
      >
        <React.Fragment>
          {(() => {
            try {
              return $props.price;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "";
              }
              throw e;
            }
          })()}
        </React.Fragment>
      </div>
      <div
        data-plasmic-name={"checkBuy"}
        data-plasmic-override={overrides.checkBuy}
        className={classNames(projectcss.all, sty.checkBuy)}
      >
        {(() => {
          try {
            return $props.checkPlayer == undefined;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <div
            data-plasmic-name={"minusBalance"}
            data-plasmic-override={overrides.minusBalance}
            className={classNames(projectcss.all, sty.minusBalance)}
          >
            {(() => {
              try {
                return $props.playerPrice > $props.teamBalance;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__wrW1Y)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"20px"}
                loading={"lazy"}
                onClick={args.onclick}
                src={{
                  src: "/plasmic/copy_of_proliga_new_design/images/icons8Dollar50Png.png",
                  fullWidth: 50,
                  fullHeight: 50,
                  aspectRatio: undefined
                }}
              />
            ) : null}
            {(() => {
              try {
                return $props.playerPrice <= $props.teamBalance;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div
                data-plasmic-name={"buy"}
                data-plasmic-override={overrides.buy}
                className={classNames(projectcss.all, sty.buy)}
              >
                {(() => {
                  try {
                    return (
                      $props.playerClubCount <
                      $queries.playerPickLimit.data.response[0].value
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    data-plasmic-name={"buyPlus"}
                    data-plasmic-override={overrides.buyPlus}
                    className={classNames(projectcss.all, sty.buyPlus)}
                  >
                    {(() => {
                      try {
                        return $props.buttonVisibility === undefined;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__qwDqn)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"20px"}
                        loading={"lazy"}
                        onClick={args.onclickPlus}
                        src={{
                          src: "/plasmic/copy_of_proliga_new_design/images/plus33Svg.svg",
                          fullWidth: 1024,
                          fullHeight: 1024,
                          aspectRatio: 1
                        }}
                      />
                    ) : null}
                  </div>
                ) : null}
                {(() => {
                  try {
                    return (
                      $props.playerClubCount >=
                      $queries.playerPickLimit.data.response[0].value
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__oSgy7)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"20px"}
                    loading={"lazy"}
                    onClick={args.onclickAvatar}
                    src={{
                      src: "/plasmic/copy_of_proliga_new_design/images/icons8Avatar50Png.png",
                      fullWidth: 50,
                      fullHeight: 50,
                      aspectRatio: undefined
                    }}
                  />
                ) : null}
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___0GhD4
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $props.playerClubCount;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "limit";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
            ) : null}
          </div>
        ) : null}
        {(() => {
          try {
            return $props.checkPlayer != undefined;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <div
            data-plasmic-name={"buySell"}
            data-plasmic-override={overrides.buySell}
            className={classNames(projectcss.all, sty.buySell)}
          >
            {(() => {
              try {
                return $props.buttonVisibility != undefined;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img___8ZuV)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"20px"}
                loading={"lazy"}
                onClick={args.onclickMinus}
                src={{
                  src: "/plasmic/copy_of_proliga_new_design/images/redXLineIconsvg.svg",
                  fullWidth: 122.88,
                  fullHeight: 122.879,
                  aspectRatio: 1.000008
                }}
              />
            ) : null}
          </div>
        ) : null}
      </div>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "checkBuy", "minusBalance", "buy", "buyPlus", "buySell"],
  checkBuy: ["checkBuy", "minusBalance", "buy", "buyPlus", "buySell"],
  minusBalance: ["minusBalance", "buy", "buyPlus"],
  buy: ["buy", "buyPlus"],
  buyPlus: ["buyPlus"],
  buySell: ["buySell"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  checkBuy: "div";
  minusBalance: "div";
  buy: "div";
  buyPlus: "div";
  buySell: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPlayerPickerNewDesign__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPlayerPickerNewDesign__VariantsArgs;
    args?: PlasmicPlayerPickerNewDesign__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPlayerPickerNewDesign__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicPlayerPickerNewDesign__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPlayerPickerNewDesign__ArgProps,
          internalVariantPropNames: PlasmicPlayerPickerNewDesign__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPlayerPickerNewDesign__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPlayerPickerNewDesign";
  } else {
    func.displayName = `PlasmicPlayerPickerNewDesign.${nodeName}`;
  }
  return func;
}

export const PlasmicPlayerPickerNewDesign = Object.assign(
  // Top-level PlasmicPlayerPickerNewDesign renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    checkBuy: makeNodeComponent("checkBuy"),
    minusBalance: makeNodeComponent("minusBalance"),
    buy: makeNodeComponent("buy"),
    buyPlus: makeNodeComponent("buyPlus"),
    buySell: makeNodeComponent("buySell"),

    // Metadata about props expected for PlasmicPlayerPickerNewDesign
    internalVariantProps: PlasmicPlayerPickerNewDesign__VariantProps,
    internalArgProps: PlasmicPlayerPickerNewDesign__ArgProps
  }
);

export default PlasmicPlayerPickerNewDesign;
/* prettier-ignore-end */
