// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qrPZwqtrqWM4S9b4djCj1H
// Component: 3OP_nNTq-kKC

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import Navbar from "../../Navbar"; // plasmic-import: j_koFSvK1RER/component
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import AvatarPlayerNewDesign from "../../AvatarPlayerNewDesign"; // plasmic-import: DGhYAOC2J13B/component
import SoccerPlaceMensNewDesign from "../../SoccerPlaceMensNewDesign"; // plasmic-import: K0e1kB1AsK1C/component
import TextInput from "../../TextInput"; // plasmic-import: 1UJD2btGUkCV/component
import Select from "../../Select"; // plasmic-import: WDDaSJMd5buE/component
import EditTeamPageTitle from "../../EditTeamPageTitle"; // plasmic-import: h-qCNPumay6S/component
import { TabsContainer } from "@plasmicpkgs/plasmic-tabs";
import { TabContent } from "@plasmicpkgs/plasmic-tabs";
import OrderBy from "../../OrderBy"; // plasmic-import: bY524CGT1Qpz/component
import OrderByNewDesign from "../../OrderByNewDesign"; // plasmic-import: pBfrWGe6jKYv/component
import PlayerPicker from "../../PlayerPicker"; // plasmic-import: -eDXHzfdIeHq/component
import PlayerPickerNewDesign from "../../PlayerPickerNewDesign"; // plasmic-import: Lk6JgqMmYsF6/component
import { AntdPagination } from "@plasmicpkgs/antd5/skinny/registerPagination";
import { paginationHelpers as AntdPagination_Helpers } from "@plasmicpkgs/antd5/skinny/registerPagination";
import { AntdInputNumber } from "@plasmicpkgs/antd5/skinny/registerInput";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: qrPZwqtrqWM4S9b4djCj1H/projectcss
import sty from "./PlasmicEditTeam2.module.css"; // plasmic-import: 3OP_nNTq-kKC/css

import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: DJCZ30FSSW4V/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: wUfM8ozzkHkf/icon

createPlasmicElementProxy;

export type PlasmicEditTeam2__VariantMembers = {};
export type PlasmicEditTeam2__VariantsArgs = {};
type VariantPropType = keyof PlasmicEditTeam2__VariantsArgs;
export const PlasmicEditTeam2__VariantProps = new Array<VariantPropType>();

export type PlasmicEditTeam2__ArgsType = {};
type ArgPropType = keyof PlasmicEditTeam2__ArgsType;
export const PlasmicEditTeam2__ArgProps = new Array<ArgPropType>();

export type PlasmicEditTeam2__OverridesType = {
  root?: Flex__<"div">;
  navbar?: Flex__<typeof Navbar>;
  teamInfo2?: Flex__<"div">;
  selectFormation2?: Flex__<typeof AntdSelect>;
  goa2?: Flex__<"div">;
  def2?: Flex__<"div">;
  mid2?: Flex__<"div">;
  str2?: Flex__<"div">;
  soccerPlaceMensNewDesign?: Flex__<typeof SoccerPlaceMensNewDesign>;
  teamName?: Flex__<typeof TextInput>;
  capitanSelect?: Flex__<typeof Select>;
  button?: Flex__<"button">;
  columns?: Flex__<"div">;
  selectClub?: Flex__<typeof Select>;
  teamName5?: Flex__<typeof TextInput>;
  selectClub3?: Flex__<typeof Select>;
  teamName3?: Flex__<typeof TextInput>;
  teamName4?: Flex__<typeof TextInput>;
  playerList2?: Flex__<"div">;
  tabsContainer?: Flex__<typeof TabsContainer>;
  tabAllContent2?: Flex__<typeof TabContent>;
  orderByAll2?: Flex__<typeof OrderBy>;
  orderByNewDesign?: Flex__<typeof OrderByNewDesign>;
  playerPickerNewDesign?: Flex__<typeof PlayerPickerNewDesign>;
  pagination2?: Flex__<typeof AntdPagination>;
  tabClubContent2?: Flex__<typeof TabContent>;
  selectClub2?: Flex__<typeof AntdSelect>;
  pagclubtab2?: Flex__<typeof AntdPagination>;
  tabPositionContent2?: Flex__<typeof TabContent>;
  select3?: Flex__<typeof Select>;
  pagpostab2?: Flex__<typeof AntdPagination>;
  tabPriceContent2?: Flex__<typeof TabContent>;
  startPrice2?: Flex__<typeof AntdInputNumber>;
  endPrice2?: Flex__<typeof AntdInputNumber>;
  price2?: Flex__<"div">;
  pagpricetab2?: Flex__<typeof AntdPagination>;
};

export interface DefaultEditTeam2Props {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicEditTeam2__RenderFunc(props: {
  variants: PlasmicEditTeam2__VariantsArgs;
  args: PlasmicEditTeam2__ArgsType;
  overrides: PlasmicEditTeam2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "clubs",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.clubsnameid.data.response;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "userId",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return currentUser.customProperties.response[0].id;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "all",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "orderName",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "price"
      },
      {
        path: "orderType",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "desc"
      },
      {
        path: "playerId",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.teamPlayer.data.response[0].id;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "updateCapitanVisibility",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "selectFormation2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.query.data.response[0].formation;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 1;
              }
              throw e;
            }
          })()
      },
      {
        path: "pagination2.currentPage",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 1,

        onMutate: generateOnMutateForSpec("currentPage", AntdPagination_Helpers)
      },
      {
        path: "pagination2.pageSize",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 6,

        onMutate: generateOnMutateForSpec("pageSize", AntdPagination_Helpers)
      },
      {
        path: "pagination2.startIndex",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("startIndex", AntdPagination_Helpers)
      },
      {
        path: "pagination2.endIndex",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("endIndex", AntdPagination_Helpers)
      },
      {
        path: "selectClub2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => 1
      },
      {
        path: "pagclubtab2.currentPage",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 1,

        onMutate: generateOnMutateForSpec("currentPage", AntdPagination_Helpers)
      },
      {
        path: "pagclubtab2.pageSize",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 6,

        onMutate: generateOnMutateForSpec("pageSize", AntdPagination_Helpers)
      },
      {
        path: "pagclubtab2.startIndex",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("startIndex", AntdPagination_Helpers)
      },
      {
        path: "pagclubtab2.endIndex",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("endIndex", AntdPagination_Helpers)
      },
      {
        path: "select3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "DEF"
      },
      {
        path: "pagpostab2.currentPage",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 1,

        onMutate: generateOnMutateForSpec("currentPage", AntdPagination_Helpers)
      },
      {
        path: "pagpostab2.pageSize",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 6,

        onMutate: generateOnMutateForSpec("pageSize", AntdPagination_Helpers)
      },
      {
        path: "pagpostab2.startIndex",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("startIndex", AntdPagination_Helpers)
      },
      {
        path: "pagpostab2.endIndex",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("endIndex", AntdPagination_Helpers)
      },
      {
        path: "startPrice2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "endPrice2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => 100
      },
      {
        path: "pagpricetab2.currentPage",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 1,

        onMutate: generateOnMutateForSpec("currentPage", AntdPagination_Helpers)
      },
      {
        path: "pagpricetab2.pageSize",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 6,

        onMutate: generateOnMutateForSpec("pageSize", AntdPagination_Helpers)
      },
      {
        path: "pagpricetab2.startIndex",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("startIndex", AntdPagination_Helpers)
      },
      {
        path: "pagpricetab2.endIndex",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("endIndex", AntdPagination_Helpers)
      },
      {
        path: "teamName3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "0"
      },
      {
        path: "teamName4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "100"
      },
      {
        path: "data",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.query2.data.response;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "selectClub.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "all"
      },
      {
        path: "teamName5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "selectClub3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "all"
      },
      {
        path: "sum",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.teamPlayerS.data.response.reduce(
                (accumulator, currentValue) =>
                  accumulator + (currentValue.player_id?.price || 0),
                0
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "filter",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (
                ($state.teamName5.value
                  ? "&select=*&name=ilike.*" + $state.teamName5.value + "*"
                  : "") +
                ($state.teamName3.value
                  ? "&price=gte." + $state.teamName3.value
                  : "") +
                ($state.teamName4.value
                  ? "&price=lte." + $state.teamName4.value
                  : "") +
                ($state.selectClub3.value !== "all"
                  ? "&position=eq." + $state.selectClub3.value
                  : "") +
                ($state.selectClub.value !== "all"
                  ? "&club_id=eq." + $state.selectClub.value
                  : "") +
                "&order=price.desc"
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "data1",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.selectClub.value
                ? $queries.tabsClub.data.response
                : $state.selectClub3.value !== "all"
                ? $queries.tabsPos.data.response
                : $state.teamName3.value !== "0" ||
                  $state.teamName4.value !== "100"
                ? $queries.tabPrice.data.response
                : $queries.tabAll.data.response;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "teamName.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.query.data.response[0].name;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "capitanSelect.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    query: usePlasmicDataOp(() => {
      return {
        sourceId: "vQtRPuFArSfh43vUmgx2PS",
        opId: "b9166369-6f93-4b78-967c-09499f0a9ae6",
        userArgs: {
          params: [$ctx.params.id, $ctx.params.comp_id, $state.userId]
        },
        cacheKey: `plasmic.$.${(() => {
          try {
            return "getOne";
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return "";
            }
            throw e;
          }
        })()}.$.b9166369-6f93-4b78-967c-09499f0a9ae6.$.`,
        invalidatedKeys: null,
        roleId: "ead2b235-73a3-4579-b15a-7fc91fc1a23a"
      };
    }),
    teamPlayer: usePlasmicDataOp(() => {
      return {
        sourceId: "vQtRPuFArSfh43vUmgx2PS",
        opId: "707a8f8f-2a00-4af5-8462-1217cdbacae9",
        userArgs: {
          params: [$queries.query.data.response[0].id]
        },
        cacheKey: `plasmic.$.707a8f8f-2a00-4af5-8462-1217cdbacae9.$.`,
        invalidatedKeys: null,
        roleId: "ead2b235-73a3-4579-b15a-7fc91fc1a23a"
      };
    }),
    playerList: usePlasmicDataOp(() => {
      return {
        sourceId: "vQtRPuFArSfh43vUmgx2PS",
        opId: "964e5d91-2ac7-4881-8f97-120c019a3f7c",
        userArgs: {
          params: [$queries.query.data.response[0].competition_id]
        },
        cacheKey: `plasmic.$.964e5d91-2ac7-4881-8f97-120c019a3f7c.$.`,
        invalidatedKeys: null,
        roleId: "ead2b235-73a3-4579-b15a-7fc91fc1a23a"
      };
    }),
    playercount: usePlasmicDataOp(() => {
      return {
        sourceId: "vQtRPuFArSfh43vUmgx2PS",
        opId: "38ef613e-6433-4c8c-bfff-633f526d6646",
        userArgs: {
          path: [$state.filter],
          params: [$queries.query.data.response[0].competition_id]
        },
        cacheKey: `plasmic.$.38ef613e-6433-4c8c-bfff-633f526d6646.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    tabAll: usePlasmicDataOp(() => {
      return {
        sourceId: "vQtRPuFArSfh43vUmgx2PS",
        opId: "8d7c2872-ef5b-424b-b01e-b7085ef7962c",
        userArgs: {
          path: [
            $state.pagination2.pageSize,
            $state.pagination2.startIndex,
            "*" + $state.teamName5.value + "*",
            $state.orderName,
            $state.orderType
          ],
          params: [$queries.query.data.response[0].competition_id]
        },
        cacheKey: `plasmic.$.8d7c2872-ef5b-424b-b01e-b7085ef7962c.$.`,
        invalidatedKeys: null,
        roleId: "ead2b235-73a3-4579-b15a-7fc91fc1a23a"
      };
    }),
    clubsnameid: usePlasmicDataOp(() => {
      return {
        sourceId: "vQtRPuFArSfh43vUmgx2PS",
        opId: "145e9346-c08d-49b7-9040-a86258d65343",
        userArgs: {
          params: [
            $queries.countryId.data.response[0].country_id,
            $ctx.params.comp_id
          ]
        },
        cacheKey: `plasmic.$.145e9346-c08d-49b7-9040-a86258d65343.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    countryId: usePlasmicDataOp(() => {
      return {
        sourceId: "vQtRPuFArSfh43vUmgx2PS",
        opId: "f1c7bf22-4390-490f-aa49-4bf897292d0c",
        userArgs: {
          params: [$queries.query.data.response[0].competition_id]
        },
        cacheKey: `plasmic.$.f1c7bf22-4390-490f-aa49-4bf897292d0c.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    tabsClub: usePlasmicDataOp(() => {
      return {
        sourceId: "vQtRPuFArSfh43vUmgx2PS",
        opId: "b777671d-460c-4994-8fef-61bbbef80142",
        userArgs: {
          path: [
            $state.selectClub.value,
            $state.pagination2.pageSize,
            $state.pagination2.startIndex,
            $state.orderName,
            $state.orderType
          ],
          params: [$queries.query.data.response[0].competition_id]
        },
        cacheKey: `plasmic.$.b777671d-460c-4994-8fef-61bbbef80142.$.`,
        invalidatedKeys: null,
        roleId: "ead2b235-73a3-4579-b15a-7fc91fc1a23a"
      };
    }),
    tabsPos: usePlasmicDataOp(() => {
      return {
        sourceId: "vQtRPuFArSfh43vUmgx2PS",
        opId: "7110f3e0-a43a-476d-a2cc-9bed234d79ae",
        userArgs: {
          path: [
            $state.selectClub3.value,
            $state.pagination2.pageSize,
            $state.pagination2.startIndex,
            $state.orderName,
            $state.orderType
          ],
          params: [$queries.query.data.response[0].competition_id]
        },
        cacheKey: `plasmic.$.7110f3e0-a43a-476d-a2cc-9bed234d79ae.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    tabPrice: usePlasmicDataOp(() => {
      return {
        sourceId: "vQtRPuFArSfh43vUmgx2PS",
        opId: "ac33b385-6538-4ded-b548-75bf35539922",
        userArgs: {
          path: [
            $state.teamName3.value,
            $state.teamName4.value,
            $state.pagination2.pageSize,
            $state.pagination2.startIndex,
            $state.teamName5.value,
            $state.orderName,
            $state.orderType
          ],
          params: [$queries.query.data.response[0].competition_id]
        },
        cacheKey: `plasmic.$.ac33b385-6538-4ded-b548-75bf35539922.$.`,
        invalidatedKeys: null,
        roleId: "ead2b235-73a3-4579-b15a-7fc91fc1a23a"
      };
    }),
    tabsClubAll: usePlasmicDataOp(() => {
      return {
        sourceId: "vQtRPuFArSfh43vUmgx2PS",
        opId: "ee139b75-f09f-4b56-a48c-ec2dd301e604",
        userArgs: {
          path: [
            $state.selectClub.value,
            $state.teamName5.value,
            $state.orderName
          ],
          params: [$queries.query.data.response[0].competition_id]
        },
        cacheKey: `plasmic.$.ee139b75-f09f-4b56-a48c-ec2dd301e604.$.`,
        invalidatedKeys: null,
        roleId: "ead2b235-73a3-4579-b15a-7fc91fc1a23a"
      };
    }),
    tabsPosAll: usePlasmicDataOp(() => {
      return {
        sourceId: "vQtRPuFArSfh43vUmgx2PS",
        opId: "db732cb3-be8a-4ab6-976c-d9cde271d3af",
        userArgs: {
          path: [$state.selectClub3.value, $state.teamName5.value],
          params: [$queries.query.data.response[0].competition_id]
        },
        cacheKey: `plasmic.$.db732cb3-be8a-4ab6-976c-d9cde271d3af.$.`,
        invalidatedKeys: null,
        roleId: "ead2b235-73a3-4579-b15a-7fc91fc1a23a"
      };
    }),
    tabsPriceAll: usePlasmicDataOp(() => {
      return {
        sourceId: "vQtRPuFArSfh43vUmgx2PS",
        opId: "3b8f3523-d07e-4b2d-97e2-d29ee345e8c8",
        userArgs: {
          path: [
            $state.teamName3.value,
            $state.teamName4.value,
            $state.teamName5.value
          ],
          params: [$queries.query.data.response[0].competition_id]
        },
        cacheKey: `plasmic.$.3b8f3523-d07e-4b2d-97e2-d29ee345e8c8.$.`,
        invalidatedKeys: null,
        roleId: "ead2b235-73a3-4579-b15a-7fc91fc1a23a"
      };
    }),
    formationList: usePlasmicDataOp(() => {
      return {
        sourceId: "vQtRPuFArSfh43vUmgx2PS",
        opId: "5fa0bf49-23c6-4f90-bd3a-a54f52fe6e75",
        userArgs: {},
        cacheKey: `plasmic.$.5fa0bf49-23c6-4f90-bd3a-a54f52fe6e75.$.`,
        invalidatedKeys: null,
        roleId: "ead2b235-73a3-4579-b15a-7fc91fc1a23a"
      };
    }),
    systemConfigPlayerPickLimit: usePlasmicDataOp(() => {
      return {
        sourceId: "vQtRPuFArSfh43vUmgx2PS",
        opId: "c8f0d738-898f-4578-8d8b-ba1e5a3236e5",
        userArgs: {},
        cacheKey: `plasmic.$.c8f0d738-898f-4578-8d8b-ba1e5a3236e5.$.`,
        invalidatedKeys: null,
        roleId: "ead2b235-73a3-4579-b15a-7fc91fc1a23a"
      };
    }),
    teamCaptainPlayerList: usePlasmicDataOp(() => {
      return {
        sourceId: "vQtRPuFArSfh43vUmgx2PS",
        opId: "1359a403-85b9-4b56-b614-7453cfb0a01d",
        userArgs: {
          params: [$queries.query.data.response[0].id]
        },
        cacheKey: `plasmic.$.1359a403-85b9-4b56-b614-7453cfb0a01d.$.`,
        invalidatedKeys: null,
        roleId: "ead2b235-73a3-4579-b15a-7fc91fc1a23a"
      };
    }),
    match: usePlasmicDataOp(() => {
      return {
        sourceId: "vQtRPuFArSfh43vUmgx2PS",
        opId: "ba65f4d9-5fdf-4ab4-b435-c6ae658ff811",
        userArgs: {},
        cacheKey: `plasmic.$.ba65f4d9-5fdf-4ab4-b435-c6ae658ff811.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    teamPlayerS: usePlasmicDataOp(() => {
      return {
        sourceId: "vQtRPuFArSfh43vUmgx2PS",
        opId: "f9c6dc72-4813-4221-9670-23fc7b3e2a2b",
        userArgs: {
          params: [$queries.query.data.response[0].id]
        },
        cacheKey: `plasmic.$.f9c6dc72-4813-4221-9670-23fc7b3e2a2b.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    query2: usePlasmicDataOp(() => {
      return {
        sourceId: "vQtRPuFArSfh43vUmgx2PS",
        opId: "18901baa-baf3-494c-aa88-474f616be563",
        userArgs: {
          path: [
            $state.pagination2.pageSize,
            $state.pagination2.startIndex,
            $state.filter
          ],
          params: [$ctx.params.comp_id]
        },
        cacheKey: `plasmic.$.18901baa-baf3-494c-aa88-474f616be563.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <Navbar
            data-plasmic-name={"navbar"}
            data-plasmic-override={overrides.navbar}
            className={classNames("__wab_instance", sty.navbar)}
          />

          <div className={classNames(projectcss.all, sty.freeBox__rCxB1)}>
            <div className={classNames(projectcss.all, sty.freeBox___0MBh4)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__bHuWe
                )}
              >
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ color: "#FFFFFF" }}
                  >
                    {"O\u2019Z FUTBOL JAMOANGIZNI"}
                  </span>
                </React.Fragment>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ksG1J
                )}
              >
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ color: "#FFFFFF" }}
                  >
                    {"BIZ BILAN YARATING!"}
                  </span>
                </React.Fragment>
              </div>
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__h8H)}
                displayHeight={"63px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"727px"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/copy_of_proliga_new_design/images/image2024072515111110053Png.png",
                  fullWidth: 1314,
                  fullHeight: 23,
                  aspectRatio: undefined
                }}
              />
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__qcKrF)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__yj95P
              )}
            >
              {"O\u2019Z "}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__yzInk
              )}
            >
              {"JAMOANGIZNI "}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__mUmpb
              )}
            >
              {"YEG\u2019ING!"}
            </div>
          </div>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__mMHsE)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__ybU3I)}>
              <div className={classNames(projectcss.all, sty.freeBox__nbAbq)}>
                <div className={classNames(projectcss.all, sty.freeBox__dzR4D)}>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"teamInfo2"}
                    data-plasmic-override={overrides.teamInfo2}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.teamInfo2)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__bA5Y4)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___1BNgr
                        )}
                      >
                        {"Taktika:"}
                      </div>
                      <AntdSelect
                        data-plasmic-name={"selectFormation2"}
                        data-plasmic-override={overrides.selectFormation2}
                        bordered={false}
                        className={classNames(
                          "__wab_instance",
                          sty.selectFormation2
                        )}
                        defaultStylesClassName={classNames(
                          projectcss.root_reset,
                          projectcss.plasmic_default_styles,
                          projectcss.plasmic_mixins,
                          projectcss.plasmic_tokens,
                          plasmic_antd_5_hostless_css.plasmic_tokens,
                          plasmic_plasmic_rich_components_css.plasmic_tokens
                        )}
                        defaultValue={(() => {
                          try {
                            return $queries.query.data.response[0].formation;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return 1;
                            }
                            throw e;
                          }
                        })()}
                        onChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "selectFormation2",
                            "value"
                          ]).apply(null, eventArgs);
                          (async (value, option) => {
                            const $steps = {};

                            $steps["updateFormation"] = true
                              ? (() => {
                                  const actionArgs = {
                                    dataOp: {
                                      sourceId: "vQtRPuFArSfh43vUmgx2PS",
                                      opId: "b3f3df08-506b-45c3-bd7e-8d901d332e4e",
                                      userArgs: {
                                        params: [
                                          $queries.query.data.response[0].id
                                        ],
                                        body: [$state.selectFormation2.value]
                                      },
                                      cacheKey: null,
                                      invalidatedKeys: ["plasmic_refresh_all"],
                                      roleId: null
                                    },
                                    continueOnError: true
                                  };
                                  return (async ({
                                    dataOp,
                                    continueOnError
                                  }) => {
                                    try {
                                      const response =
                                        await executePlasmicDataOp(dataOp, {
                                          userAuthToken:
                                            dataSourcesCtx?.userAuthToken,
                                          user: dataSourcesCtx?.user
                                        });
                                      await plasmicInvalidate(
                                        dataOp.invalidatedKeys
                                      );
                                      return response;
                                    } catch (e) {
                                      if (!continueOnError) {
                                        throw e;
                                      }
                                      return e;
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateFormation"] != null &&
                              typeof $steps["updateFormation"] === "object" &&
                              typeof $steps["updateFormation"].then ===
                                "function"
                            ) {
                              $steps["updateFormation"] = await $steps[
                                "updateFormation"
                              ];
                            }

                            $steps["catchError"] =
                              $steps.updateFormation.message != null
                                ? (() => {
                                    const actionArgs = {
                                      args: [
                                        "error",
                                        "Taktikani almashtirishni iloji yo'q. Mos pozitsiyalarni bo'shating",
                                        undefined,
                                        4,
                                        "top"
                                      ]
                                    };
                                    return $globalActions[
                                      "plasmic-antd5-config-provider.showNotification"
                                    ]?.apply(null, [...actionArgs.args]);
                                  })()
                                : undefined;
                            if (
                              $steps["catchError"] != null &&
                              typeof $steps["catchError"] === "object" &&
                              typeof $steps["catchError"].then === "function"
                            ) {
                              $steps["catchError"] = await $steps["catchError"];
                            }
                          }).apply(null, eventArgs);
                        }}
                        options={(() => {
                          try {
                            return $queries.formationList.data.response;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                        placeholder={"Select..."}
                        popupScopeClassName={sty["selectFormation2__popup"]}
                        showSearch={false}
                        size={"small"}
                        value={generateStateValueProp($state, [
                          "selectFormation2",
                          "value"
                        ])}
                      />
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__k3TD0
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return (
                              "100 / " +
                              ($queries.query.data.response[0].balance -
                                $state.sum)
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__rrZ0L)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img___1QSr0)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"150px"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/copy_of_proliga_new_design/images/image5.png",
                        fullWidth: 300,
                        fullHeight: 66,
                        aspectRatio: undefined
                      }}
                    />

                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__xll1E)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"150px"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/copy_of_proliga_new_design/images/image5.png",
                        fullWidth: 300,
                        fullHeight: 66,
                        aspectRatio: undefined
                      }}
                    />
                  </Stack__>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__b3Sid)}
                  >
                    <div
                      data-plasmic-name={"goa2"}
                      data-plasmic-override={overrides.goa2}
                      className={classNames(projectcss.all, sty.goa2)}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $queries.teamPlayer.data.response.filter(
                              x => x.position === "GOA"
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___5AegC
                            )}
                            key={currentIndex}
                          >
                            <AvatarPlayerNewDesign
                              capitanVisibility={(() => {
                                try {
                                  return currentItem.is_captain === true;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return false;
                                  }
                                  throw e;
                                }
                              })()}
                              className={classNames(
                                "__wab_instance",
                                sty.avatarPlayerNewDesign__mjCdO
                              )}
                              image={(() => {
                                try {
                                  return $queries.playerList.data.response.find(
                                    x => x.id === currentItem.player_id
                                  ).image;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                              name={(() => {
                                try {
                                  return $queries.playerList.data.response.find(
                                    x => x.id === currentItem.player_id
                                  )?.name;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                              onclickX={async event => {
                                const $steps = {};

                                $steps["httpPatch"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        dataOp: {
                                          sourceId: "vQtRPuFArSfh43vUmgx2PS",
                                          opId: "eed8d1bb-b1ba-4064-a80f-f37a75fcd3c2",
                                          userArgs: {
                                            params: [
                                              currentItem.id,
                                              $queries.query.data.response[0].id
                                            ],
                                            body: [null]
                                          },
                                          cacheKey: null,
                                          invalidatedKeys: [
                                            "plasmic_refresh_all"
                                          ],
                                          roleId: null
                                        }
                                      };
                                      return (async ({
                                        dataOp,
                                        continueOnError
                                      }) => {
                                        try {
                                          const response =
                                            await executePlasmicDataOp(dataOp, {
                                              userAuthToken:
                                                dataSourcesCtx?.userAuthToken,
                                              user: dataSourcesCtx?.user
                                            });
                                          await plasmicInvalidate(
                                            dataOp.invalidatedKeys
                                          );
                                          return response;
                                        } catch (e) {
                                          if (!continueOnError) {
                                            throw e;
                                          }
                                          return e;
                                        }
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["httpPatch"] != null &&
                                  typeof $steps["httpPatch"] === "object" &&
                                  typeof $steps["httpPatch"].then === "function"
                                ) {
                                  $steps["httpPatch"] = await $steps[
                                    "httpPatch"
                                  ];
                                }
                              }}
                              price={(() => {
                                try {
                                  return $queries.playerList.data.response.find(
                                    x => x.id === currentItem.player_id
                                  ).price;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return 0;
                                  }
                                  throw e;
                                }
                              })()}
                            />
                          </div>
                        );
                      })}
                    </div>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"def2"}
                      data-plasmic-override={overrides.def2}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.def2)}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $queries.teamPlayer.data.response.filter(
                              x => x.position === "DEF"
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__vKohC
                            )}
                            key={currentIndex}
                          >
                            <AvatarPlayerNewDesign
                              capitanVisibility={(() => {
                                try {
                                  return currentItem.is_captain === true;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return false;
                                  }
                                  throw e;
                                }
                              })()}
                              className={classNames(
                                "__wab_instance",
                                sty.avatarPlayerNewDesign__by4M
                              )}
                              image={(() => {
                                try {
                                  return $queries.playerList.data.response.find(
                                    x => x.id === currentItem.player_id
                                  ).image;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                              name={(() => {
                                try {
                                  return $queries.playerList.data.response.find(
                                    x => x.id === currentItem.player_id
                                  )?.name;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                              onclickX={async event => {
                                const $steps = {};

                                $steps["httpPatch"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        dataOp: {
                                          sourceId: "vQtRPuFArSfh43vUmgx2PS",
                                          opId: "eed8d1bb-b1ba-4064-a80f-f37a75fcd3c2",
                                          userArgs: {
                                            params: [
                                              currentItem.id,
                                              $queries.query.data.response[0].id
                                            ],
                                            body: [null]
                                          },
                                          cacheKey: null,
                                          invalidatedKeys: [
                                            "plasmic_refresh_all"
                                          ],
                                          roleId: null
                                        }
                                      };
                                      return (async ({
                                        dataOp,
                                        continueOnError
                                      }) => {
                                        try {
                                          const response =
                                            await executePlasmicDataOp(dataOp, {
                                              userAuthToken:
                                                dataSourcesCtx?.userAuthToken,
                                              user: dataSourcesCtx?.user
                                            });
                                          await plasmicInvalidate(
                                            dataOp.invalidatedKeys
                                          );
                                          return response;
                                        } catch (e) {
                                          if (!continueOnError) {
                                            throw e;
                                          }
                                          return e;
                                        }
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["httpPatch"] != null &&
                                  typeof $steps["httpPatch"] === "object" &&
                                  typeof $steps["httpPatch"].then === "function"
                                ) {
                                  $steps["httpPatch"] = await $steps[
                                    "httpPatch"
                                  ];
                                }
                              }}
                              price={(() => {
                                try {
                                  return $queries.playerList.data.response.find(
                                    x => x.id === currentItem.player_id
                                  ).price;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return 0;
                                  }
                                  throw e;
                                }
                              })()}
                            />
                          </div>
                        );
                      })}
                    </Stack__>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"mid2"}
                      data-plasmic-override={overrides.mid2}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.mid2)}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $queries.teamPlayer.data.response.filter(
                              x => x.position === "MID"
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__xUasW
                            )}
                            key={currentIndex}
                          >
                            <AvatarPlayerNewDesign
                              capitanVisibility={(() => {
                                try {
                                  return currentItem.is_captain === true;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return false;
                                  }
                                  throw e;
                                }
                              })()}
                              className={classNames(
                                "__wab_instance",
                                sty.avatarPlayerNewDesign__zTiJ
                              )}
                              image={(() => {
                                try {
                                  return $queries.playerList.data.response.find(
                                    x => x.id === currentItem.player_id
                                  ).image;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                              name={(() => {
                                try {
                                  return $queries.playerList.data.response.find(
                                    x => x.id === currentItem.player_id
                                  )?.name;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                              onclickX={async event => {
                                const $steps = {};

                                $steps["httpPatch"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        dataOp: {
                                          sourceId: "vQtRPuFArSfh43vUmgx2PS",
                                          opId: "eed8d1bb-b1ba-4064-a80f-f37a75fcd3c2",
                                          userArgs: {
                                            params: [
                                              currentItem.id,
                                              $queries.query.data.response[0].id
                                            ],
                                            body: [null]
                                          },
                                          cacheKey: null,
                                          invalidatedKeys: [
                                            "plasmic_refresh_all"
                                          ],
                                          roleId: null
                                        }
                                      };
                                      return (async ({
                                        dataOp,
                                        continueOnError
                                      }) => {
                                        try {
                                          const response =
                                            await executePlasmicDataOp(dataOp, {
                                              userAuthToken:
                                                dataSourcesCtx?.userAuthToken,
                                              user: dataSourcesCtx?.user
                                            });
                                          await plasmicInvalidate(
                                            dataOp.invalidatedKeys
                                          );
                                          return response;
                                        } catch (e) {
                                          if (!continueOnError) {
                                            throw e;
                                          }
                                          return e;
                                        }
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["httpPatch"] != null &&
                                  typeof $steps["httpPatch"] === "object" &&
                                  typeof $steps["httpPatch"].then === "function"
                                ) {
                                  $steps["httpPatch"] = await $steps[
                                    "httpPatch"
                                  ];
                                }
                              }}
                              price={(() => {
                                try {
                                  return $queries.playerList.data.response.find(
                                    x => x.id === currentItem.player_id
                                  ).price;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return 0;
                                  }
                                  throw e;
                                }
                              })()}
                            />
                          </div>
                        );
                      })}
                    </Stack__>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"str2"}
                      data-plasmic-override={overrides.str2}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.str2)}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $queries.teamPlayer.data.response.filter(
                              x => x.position === "STR"
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__i6XJc
                            )}
                            key={currentIndex}
                          >
                            <AvatarPlayerNewDesign
                              capitanVisibility={(() => {
                                try {
                                  return currentItem.is_captain === true;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return false;
                                  }
                                  throw e;
                                }
                              })()}
                              className={classNames(
                                "__wab_instance",
                                sty.avatarPlayerNewDesign__pVteb
                              )}
                              image={(() => {
                                try {
                                  return $queries.playerList.data.response.find(
                                    x => x.id === currentItem.player_id
                                  ).image;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                              name={(() => {
                                try {
                                  return $queries.playerList.data.response.find(
                                    x => x.id === currentItem.player_id
                                  )?.name;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                              onclickX={async event => {
                                const $steps = {};

                                $steps["httpPatch"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        dataOp: {
                                          sourceId: "vQtRPuFArSfh43vUmgx2PS",
                                          opId: "eed8d1bb-b1ba-4064-a80f-f37a75fcd3c2",
                                          userArgs: {
                                            params: [
                                              currentItem.id,
                                              $queries.query.data.response[0].id
                                            ],
                                            body: [null]
                                          },
                                          cacheKey: null,
                                          invalidatedKeys: [
                                            "plasmic_refresh_all"
                                          ],
                                          roleId: null
                                        }
                                      };
                                      return (async ({
                                        dataOp,
                                        continueOnError
                                      }) => {
                                        try {
                                          const response =
                                            await executePlasmicDataOp(dataOp, {
                                              userAuthToken:
                                                dataSourcesCtx?.userAuthToken,
                                              user: dataSourcesCtx?.user
                                            });
                                          await plasmicInvalidate(
                                            dataOp.invalidatedKeys
                                          );
                                          return response;
                                        } catch (e) {
                                          if (!continueOnError) {
                                            throw e;
                                          }
                                          return e;
                                        }
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["httpPatch"] != null &&
                                  typeof $steps["httpPatch"] === "object" &&
                                  typeof $steps["httpPatch"].then === "function"
                                ) {
                                  $steps["httpPatch"] = await $steps[
                                    "httpPatch"
                                  ];
                                }
                              }}
                              price={(() => {
                                try {
                                  return $queries.playerList.data.response.find(
                                    x => x.id === currentItem.player_id
                                  ).price;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return 0;
                                  }
                                  throw e;
                                }
                              })()}
                            />
                          </div>
                        );
                      })}
                    </Stack__>
                  </div>
                  <SoccerPlaceMensNewDesign
                    data-plasmic-name={"soccerPlaceMensNewDesign"}
                    data-plasmic-override={overrides.soccerPlaceMensNewDesign}
                    className={classNames(
                      "__wab_instance",
                      sty.soccerPlaceMensNewDesign
                    )}
                  />

                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___3GhQf)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__dgSiy)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__xqYmr
                        )}
                      >
                        {"Jamoa nomi:"}
                      </div>
                      <TextInput
                        data-plasmic-name={"teamName"}
                        data-plasmic-override={overrides.teamName}
                        className={classNames("__wab_instance", sty.teamName)}
                        onChange={(...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "teamName",
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }}
                        placeholder={"Uzbek Komanda"}
                        value={
                          generateStateValueProp($state, [
                            "teamName",
                            "value"
                          ]) ?? ""
                        }
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__mrBLt)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___6Z0H1
                        )}
                      >
                        {"Kapitan"}
                      </div>
                      <Select
                        data-plasmic-name={"capitanSelect"}
                        data-plasmic-override={overrides.capitanSelect}
                        className={classNames(
                          "__wab_instance",
                          sty.capitanSelect
                        )}
                        onChange={(...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "capitanSelect",
                            "value"
                          ])(eventArgs[0]);
                        }}
                        options={(() => {
                          try {
                            return $queries.teamCaptainPlayerList.data.response;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                        value={generateStateValueProp($state, [
                          "capitanSelect",
                          "value"
                        ])}
                      />
                    </div>
                    <button
                      data-plasmic-name={"button"}
                      data-plasmic-override={overrides.button}
                      className={classNames(
                        projectcss.all,
                        projectcss.button,
                        sty.button
                      )}
                      onClick={async event => {
                        const $steps = {};

                        $steps["httpPatchTeamName"] =
                          $state.teamName.value ===
                          $queries.query.data.response.name
                            ? (() => {
                                const actionArgs = {
                                  dataOp: {
                                    sourceId: "vQtRPuFArSfh43vUmgx2PS",
                                    opId: "9081b828-c788-4a59-8167-532cfc663b9c",
                                    userArgs: {
                                      params: [
                                        $queries.query.data.response[0].id
                                      ],
                                      body: [$state.teamName.value]
                                    },
                                    cacheKey: null,
                                    invalidatedKeys: ["plasmic_refresh_all"],
                                    roleId: null
                                  }
                                };
                                return (async ({ dataOp, continueOnError }) => {
                                  try {
                                    const response = await executePlasmicDataOp(
                                      dataOp,
                                      {
                                        userAuthToken:
                                          dataSourcesCtx?.userAuthToken,
                                        user: dataSourcesCtx?.user
                                      }
                                    );
                                    await plasmicInvalidate(
                                      dataOp.invalidatedKeys
                                    );
                                    return response;
                                  } catch (e) {
                                    if (!continueOnError) {
                                      throw e;
                                    }
                                    return e;
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                        if (
                          $steps["httpPatchTeamName"] != null &&
                          typeof $steps["httpPatchTeamName"] === "object" &&
                          typeof $steps["httpPatchTeamName"].then === "function"
                        ) {
                          $steps["httpPatchTeamName"] = await $steps[
                            "httpPatchTeamName"
                          ];
                        }

                        $steps["httpPatchTeamCaptain"] = true
                          ? (() => {
                              const actionArgs = {
                                dataOp: {
                                  sourceId: "vQtRPuFArSfh43vUmgx2PS",
                                  opId: "9d45445c-5972-418d-beb5-a1b914b2970c",
                                  userArgs: {
                                    body: [null],
                                    params: [$queries.query.data.response[0].id]
                                  },
                                  cacheKey: null,
                                  invalidatedKeys: ["plasmic_refresh_all"],
                                  roleId: null
                                },
                                continueOnError: true
                              };
                              return (async ({ dataOp, continueOnError }) => {
                                try {
                                  const response = await executePlasmicDataOp(
                                    dataOp,
                                    {
                                      userAuthToken:
                                        dataSourcesCtx?.userAuthToken,
                                      user: dataSourcesCtx?.user
                                    }
                                  );
                                  await plasmicInvalidate(
                                    dataOp.invalidatedKeys
                                  );
                                  return response;
                                } catch (e) {
                                  if (!continueOnError) {
                                    throw e;
                                  }
                                  return e;
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["httpPatchTeamCaptain"] != null &&
                          typeof $steps["httpPatchTeamCaptain"] === "object" &&
                          typeof $steps["httpPatchTeamCaptain"].then ===
                            "function"
                        ) {
                          $steps["httpPatchTeamCaptain"] = await $steps[
                            "httpPatchTeamCaptain"
                          ];
                        }

                        $steps["httpPatchChangeTeamCaptain"] = !!$state
                          .capitanSelect.value
                          ? (() => {
                              const actionArgs = {
                                dataOp: {
                                  sourceId: "vQtRPuFArSfh43vUmgx2PS",
                                  opId: "b06db966-e10c-459a-97d9-fe5db890e8aa",
                                  userArgs: {
                                    params: [
                                      $queries.query.data.response[0].id,
                                      $state.capitanSelect.value
                                    ],
                                    body: [true]
                                  },
                                  cacheKey: null,
                                  invalidatedKeys: ["plasmic_refresh_all"],
                                  roleId: null
                                }
                              };
                              return (async ({ dataOp, continueOnError }) => {
                                try {
                                  const response = await executePlasmicDataOp(
                                    dataOp,
                                    {
                                      userAuthToken:
                                        dataSourcesCtx?.userAuthToken,
                                      user: dataSourcesCtx?.user
                                    }
                                  );
                                  await plasmicInvalidate(
                                    dataOp.invalidatedKeys
                                  );
                                  return response;
                                } catch (e) {
                                  if (!continueOnError) {
                                    throw e;
                                  }
                                  return e;
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["httpPatchChangeTeamCaptain"] != null &&
                          typeof $steps["httpPatchChangeTeamCaptain"] ===
                            "object" &&
                          typeof $steps["httpPatchChangeTeamCaptain"].then ===
                            "function"
                        ) {
                          $steps["httpPatchChangeTeamCaptain"] = await $steps[
                            "httpPatchChangeTeamCaptain"
                          ];
                        }
                      }}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__zlZf
                        )}
                      >
                        {"SAQLASH"}
                      </div>
                    </button>
                  </Stack__>
                </div>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___0Cg0)}
                >
                  <EditTeamPageTitle
                    className={classNames(
                      "__wab_instance",
                      sty.editTeamPageTitle__c3Rxv
                    )}
                    textDown={"cheklovni 4tagachon ko\u2019paytirish"}
                    textUp={
                      "1ta jamoadan 2tadan ortiq o\u2019yinchi olib bo\u2019lmaydi."
                    }
                  />

                  <EditTeamPageTitle
                    className={classNames(
                      "__wab_instance",
                      sty.editTeamPageTitle__unhEe
                    )}
                    textDown={"cheklovni 100tadan ko\u2019pga oshirish"}
                    textUp={
                      "Sotib olingan o\u2019yinchilar 100ta dan oshib ketmasligi kerak"
                    }
                  />

                  <EditTeamPageTitle
                    className={classNames(
                      "__wab_instance",
                      sty.editTeamPageTitle__sZojW
                    )}
                    textDown={"transfer sonini oshirish"}
                    textUp={
                      "Har turda 2tadan ortiq transfer qilib bo\u2019lmaydi"
                    }
                  />
                </Stack__>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__rVniU)}>
                <div className={classNames(projectcss.all, sty.freeBox__evfsH)}>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"columns"}
                    data-plasmic-override={overrides.columns}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.columns)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column___5KPj)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__bgs9E
                        )}
                      >
                        {"Jamoa"}
                      </div>
                      <Select
                        data-plasmic-name={"selectClub"}
                        data-plasmic-override={overrides.selectClub}
                        className={classNames("__wab_instance", sty.selectClub)}
                        onChange={async (...eventArgs: any) => {
                          ((...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "selectClub",
                              "value"
                            ])(eventArgs[0]);
                          }).apply(null, eventArgs);
                          (async value => {
                            const $steps = {};
                          }).apply(null, eventArgs);
                        }}
                        options={(() => {
                          try {
                            return [
                              { label: "All", value: "all" },
                              ...$queries.clubsnameid.data.response
                            ];
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                        value={generateStateValueProp($state, [
                          "selectClub",
                          "value"
                        ])}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__owWoj)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___9PlT5
                        )}
                      >
                        {"Futbolchi"}
                      </div>
                      <TextInput
                        data-plasmic-name={"teamName5"}
                        data-plasmic-override={overrides.teamName5}
                        className={classNames("__wab_instance", sty.teamName5)}
                        onChange={(...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "teamName5",
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }}
                        placeholder={"Nomi"}
                        type={"text"}
                        value={
                          generateStateValueProp($state, [
                            "teamName5",
                            "value"
                          ]) ?? ""
                        }
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__hGrP)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___0JuaT
                        )}
                      >
                        {"Pozitsiyasi"}
                      </div>
                      <Select
                        data-plasmic-name={"selectClub3"}
                        data-plasmic-override={overrides.selectClub3}
                        className={classNames(
                          "__wab_instance",
                          sty.selectClub3
                        )}
                        onChange={async (...eventArgs: any) => {
                          ((...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "selectClub3",
                              "value"
                            ])(eventArgs[0]);
                          }).apply(null, eventArgs);
                          (async value => {
                            const $steps = {};
                          }).apply(null, eventArgs);
                        }}
                        options={(() => {
                          const __composite = [
                            { value: null, label: null },
                            { value: null, label: null },
                            { value: null, label: null },
                            { value: null, label: null },
                            { value: null, label: null }
                          ];
                          __composite["0"]["value"] = "all";
                          __composite["0"]["label"] = "ALL";
                          __composite["1"]["value"] = "GOA";
                          __composite["1"]["label"] = "GOA";
                          __composite["2"]["value"] = "DEF";
                          __composite["2"]["label"] = "DEF";
                          __composite["3"]["value"] = "MID";
                          __composite["3"]["label"] = "MID";
                          __composite["4"]["value"] = "STR";
                          __composite["4"]["label"] = "STR";
                          return __composite;
                        })()}
                        value={generateStateValueProp($state, [
                          "selectClub3",
                          "value"
                        ])}
                      />
                    </div>
                  </Stack__>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__sxeTp)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__cNasw
                      )}
                    >
                      {"Narx"}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__qtuX)}
                    >
                      <TextInput
                        data-plasmic-name={"teamName3"}
                        data-plasmic-override={overrides.teamName3}
                        className={classNames("__wab_instance", sty.teamName3)}
                        onChange={async (...eventArgs: any) => {
                          ((...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "teamName3",
                              "value"
                            ])((e => e.target?.value).apply(null, eventArgs));
                          }).apply(null, eventArgs);
                          (async event => {
                            const $steps = {};
                          }).apply(null, eventArgs);
                        }}
                        placeholder={"100 000"}
                        type={"number"}
                        value={
                          generateStateValueProp($state, [
                            "teamName3",
                            "value"
                          ]) ?? ""
                        }
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__g55Ps
                        )}
                      >
                        {"dan"}
                      </div>
                      <TextInput
                        data-plasmic-name={"teamName4"}
                        data-plasmic-override={overrides.teamName4}
                        className={classNames("__wab_instance", sty.teamName4)}
                        onChange={(...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "teamName4",
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }}
                        placeholder={"500 000"}
                        type={"number"}
                        value={
                          generateStateValueProp($state, [
                            "teamName4",
                            "value"
                          ]) ?? ""
                        }
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__mbFGs
                        )}
                      >
                        {"gacha"}
                      </div>
                    </div>
                  </div>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"playerList2"}
                    data-plasmic-override={overrides.playerList2}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.playerList2)}
                  >
                    <TabsContainer
                      data-plasmic-name={"tabsContainer"}
                      data-plasmic-override={overrides.tabsContainer}
                      className={classNames(
                        "__wab_instance",
                        sty.tabsContainer
                      )}
                      initialKey={"tab1"}
                      mountMode={"mountLazily"}
                      previewAll={false}
                    >
                      <DataCtxReader__>
                        {$ctx => (
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__qn98A
                            )}
                          >
                            <Stack__
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___61N2U
                              )}
                            >
                              <TabContent
                                data-plasmic-name={"tabAllContent2"}
                                data-plasmic-override={overrides.tabAllContent2}
                                className={classNames(
                                  "__wab_instance",
                                  sty.tabAllContent2
                                )}
                                tabKey={"tab1"}
                              >
                                <Stack__
                                  as={"div"}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__hnu3I
                                  )}
                                >
                                  <OrderBy
                                    data-plasmic-name={"orderByAll2"}
                                    data-plasmic-override={
                                      overrides.orderByAll2
                                    }
                                    className={classNames(
                                      "__wab_instance",
                                      sty.orderByAll2
                                    )}
                                    onclickAllPoint={async event => {
                                      const $steps = {};

                                      $steps["updatePrice"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: ["orderName"]
                                              },
                                              operation: 0,
                                              value: "ochko"
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["updatePrice"] != null &&
                                        typeof $steps["updatePrice"] ===
                                          "object" &&
                                        typeof $steps["updatePrice"].then ===
                                          "function"
                                      ) {
                                        $steps["updatePrice"] = await $steps[
                                          "updatePrice"
                                        ];
                                      }
                                    }}
                                    onclickPrice={async event => {
                                      const $steps = {};

                                      $steps["updatePoint"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: ["orderName"]
                                              },
                                              operation: 0,
                                              value: "price"
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["updatePoint"] != null &&
                                        typeof $steps["updatePoint"] ===
                                          "object" &&
                                        typeof $steps["updatePoint"].then ===
                                          "function"
                                      ) {
                                        $steps["updatePoint"] = await $steps[
                                          "updatePoint"
                                        ];
                                      }
                                    }}
                                    upDown={async val => {
                                      const $steps = {};

                                      $steps["updateOrderType"] =
                                        $state.orderType === "desc"
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: ["orderType"]
                                                },
                                                operation: 0,
                                                value: "asc"
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                      if (
                                        $steps["updateOrderType"] != null &&
                                        typeof $steps["updateOrderType"] ===
                                          "object" &&
                                        typeof $steps["updateOrderType"]
                                          .then === "function"
                                      ) {
                                        $steps["updateOrderType"] =
                                          await $steps["updateOrderType"];
                                      }

                                      $steps["updateOrderType2"] =
                                        $state.orderType === "asc"
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: ["orderType"]
                                                },
                                                operation: 0,
                                                value: "desc"
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                      if (
                                        $steps["updateOrderType2"] != null &&
                                        typeof $steps["updateOrderType2"] ===
                                          "object" &&
                                        typeof $steps["updateOrderType2"]
                                          .then === "function"
                                      ) {
                                        $steps["updateOrderType2"] =
                                          await $steps["updateOrderType2"];
                                      }
                                    }}
                                    upDownLink={async event => {
                                      const $steps = {};

                                      $steps["updateOrderType"] =
                                        $state.orderType === "desc"
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: ["orderType"]
                                                },
                                                operation: 0,
                                                value: "asc"
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                      if (
                                        $steps["updateOrderType"] != null &&
                                        typeof $steps["updateOrderType"] ===
                                          "object" &&
                                        typeof $steps["updateOrderType"]
                                          .then === "function"
                                      ) {
                                        $steps["updateOrderType"] =
                                          await $steps["updateOrderType"];
                                      }

                                      $steps["updateOrderType2"] =
                                        $state.orderType === "asc"
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: ["orderType"]
                                                },
                                                operation: 0,
                                                value: "desc"
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                      if (
                                        $steps["updateOrderType2"] != null &&
                                        typeof $steps["updateOrderType2"] ===
                                          "object" &&
                                        typeof $steps["updateOrderType2"]
                                          .then === "function"
                                      ) {
                                        $steps["updateOrderType2"] =
                                          await $steps["updateOrderType2"];
                                      }
                                    }}
                                  />

                                  <OrderByNewDesign
                                    data-plasmic-name={"orderByNewDesign"}
                                    data-plasmic-override={
                                      overrides.orderByNewDesign
                                    }
                                    className={classNames(
                                      "__wab_instance",
                                      sty.orderByNewDesign
                                    )}
                                  />

                                  {(_par =>
                                    !_par
                                      ? []
                                      : Array.isArray(_par)
                                      ? _par
                                      : [_par])(
                                    (() => {
                                      try {
                                        return $queries.tabAll.data.response;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return [];
                                        }
                                        throw e;
                                      }
                                    })()
                                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                    const currentItem = __plasmic_item_0;
                                    const currentIndex = __plasmic_idx_0;
                                    return (
                                      <PlayerPicker
                                        buttonVisibility={(() => {
                                          try {
                                            return $queries.teamPlayer.data.response.find(
                                              x =>
                                                x.player_id === currentItem.id
                                            );
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()}
                                        checkPlayer={(() => {
                                          try {
                                            return $queries.teamPlayer.data.response
                                              .filter(x => x.sold != true)
                                              .find(
                                                x =>
                                                  x.player_id === currentItem.id
                                              );
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()}
                                        className={classNames(
                                          "__wab_instance",
                                          sty.playerPicker___1OyBi
                                        )}
                                        clubName={(() => {
                                          try {
                                            return $queries.clubsnameid.data.response.find(
                                              x =>
                                                x.value === currentItem.club_id
                                            ).label;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()}
                                        key={currentIndex}
                                        name={(() => {
                                          try {
                                            return currentItem.name;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()}
                                        onclick={async event => {
                                          const $steps = {};

                                          $steps["invokeGlobalAction"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  args: [
                                                    "info",
                                                    (() => {
                                                      try {
                                                        return (
                                                          "Bu futbolchini narxi " +
                                                          currentItem.price +
                                                          "tanga sotib olish uchun sizga yana " +
                                                          (currentItem.price -
                                                            $queries.query.data
                                                              .response[0]
                                                              .balance) +
                                                          "tanga kerak"
                                                        );
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return undefined;
                                                        }
                                                        throw e;
                                                      }
                                                    })(),
                                                    undefined,
                                                    4,
                                                    "top"
                                                  ]
                                                };
                                                return $globalActions[
                                                  "plasmic-antd5-config-provider.showNotification"
                                                ]?.apply(null, [
                                                  ...actionArgs.args
                                                ]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["invokeGlobalAction"] !=
                                              null &&
                                            typeof $steps[
                                              "invokeGlobalAction"
                                            ] === "object" &&
                                            typeof $steps["invokeGlobalAction"]
                                              .then === "function"
                                          ) {
                                            $steps["invokeGlobalAction"] =
                                              await $steps[
                                                "invokeGlobalAction"
                                              ];
                                          }
                                        }}
                                        onclickAvatar={async event => {
                                          const $steps = {};

                                          $steps["invokeGlobalAction"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  args: [
                                                    "info",
                                                    (() => {
                                                      try {
                                                        return (
                                                          "Bitta komandadan maksimum " +
                                                          $queries
                                                            .systemConfigPlayerPickLimit
                                                            .data.response[0]
                                                            .value +
                                                          "ta futbolchi sotib olsa bo'ladi! "
                                                        );
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return undefined;
                                                        }
                                                        throw e;
                                                      }
                                                    })(),
                                                    undefined,
                                                    4,
                                                    "top"
                                                  ]
                                                };
                                                return $globalActions[
                                                  "plasmic-antd5-config-provider.showNotification"
                                                ]?.apply(null, [
                                                  ...actionArgs.args
                                                ]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["invokeGlobalAction"] !=
                                              null &&
                                            typeof $steps[
                                              "invokeGlobalAction"
                                            ] === "object" &&
                                            typeof $steps["invokeGlobalAction"]
                                              .then === "function"
                                          ) {
                                            $steps["invokeGlobalAction"] =
                                              await $steps[
                                                "invokeGlobalAction"
                                              ];
                                          }
                                        }}
                                        onclickMinus={async event => {
                                          const $steps = {};

                                          $steps["sellPlayer"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  dataOp: {
                                                    sourceId:
                                                      "vQtRPuFArSfh43vUmgx2PS",
                                                    opId: "984548b5-169f-4cde-85ff-625d84378924",
                                                    userArgs: {
                                                      params: [
                                                        $queries.query.data
                                                          .response[0].id,
                                                        currentItem.id
                                                      ]
                                                    },
                                                    cacheKey: null,
                                                    invalidatedKeys: [
                                                      "plasmic_refresh_all"
                                                    ],
                                                    roleId:
                                                      "ead2b235-73a3-4579-b15a-7fc91fc1a23a"
                                                  }
                                                };
                                                return (async ({
                                                  dataOp,
                                                  continueOnError
                                                }) => {
                                                  try {
                                                    const response =
                                                      await executePlasmicDataOp(
                                                        dataOp,
                                                        {
                                                          userAuthToken:
                                                            dataSourcesCtx?.userAuthToken,
                                                          user: dataSourcesCtx?.user
                                                        }
                                                      );
                                                    await plasmicInvalidate(
                                                      dataOp.invalidatedKeys
                                                    );
                                                    return response;
                                                  } catch (e) {
                                                    if (!continueOnError) {
                                                      throw e;
                                                    }
                                                    return e;
                                                  }
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["sellPlayer"] != null &&
                                            typeof $steps["sellPlayer"] ===
                                              "object" &&
                                            typeof $steps["sellPlayer"].then ===
                                              "function"
                                          ) {
                                            $steps["sellPlayer"] = await $steps[
                                              "sellPlayer"
                                            ];
                                          }
                                        }}
                                        onclickPlus={async event => {
                                          const $steps = {};

                                          $steps["updatePlayerFast"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  dataOp: {
                                                    sourceId:
                                                      "vQtRPuFArSfh43vUmgx2PS",
                                                    opId: "0d186643-3f54-4052-a59f-bb348ef57ac0",
                                                    userArgs: {
                                                      body: [
                                                        currentItem.id,
                                                        currentItem.position,
                                                        $queries.query.data
                                                          .response[0].id
                                                      ]
                                                    },
                                                    cacheKey: null,
                                                    invalidatedKeys: [
                                                      "plasmic_refresh_all"
                                                    ],
                                                    roleId:
                                                      "ead2b235-73a3-4579-b15a-7fc91fc1a23a"
                                                  }
                                                };
                                                return (async ({
                                                  dataOp,
                                                  continueOnError
                                                }) => {
                                                  try {
                                                    const response =
                                                      await executePlasmicDataOp(
                                                        dataOp,
                                                        {
                                                          userAuthToken:
                                                            dataSourcesCtx?.userAuthToken,
                                                          user: dataSourcesCtx?.user
                                                        }
                                                      );
                                                    await plasmicInvalidate(
                                                      dataOp.invalidatedKeys
                                                    );
                                                    return response;
                                                  } catch (e) {
                                                    if (!continueOnError) {
                                                      throw e;
                                                    }
                                                    return e;
                                                  }
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["updatePlayerFast"] !=
                                              null &&
                                            typeof $steps[
                                              "updatePlayerFast"
                                            ] === "object" &&
                                            typeof $steps["updatePlayerFast"]
                                              .then === "function"
                                          ) {
                                            $steps["updatePlayerFast"] =
                                              await $steps["updatePlayerFast"];
                                          }

                                          $steps["positionLimit"] =
                                            $steps.updatePlayerFast.data
                                              .response ===
                                            "Postion is full!!!!"
                                              ? (() => {
                                                  const actionArgs = {
                                                    args: [
                                                      "info",
                                                      (() => {
                                                        try {
                                                          return "Bu pozitsiyada bo'sh joy yo'q";
                                                        } catch (e) {
                                                          if (
                                                            e instanceof
                                                              TypeError ||
                                                            e?.plasmicType ===
                                                              "PlasmicUndefinedDataError"
                                                          ) {
                                                            return undefined;
                                                          }
                                                          throw e;
                                                        }
                                                      })(),
                                                      undefined,
                                                      undefined,
                                                      "top"
                                                    ]
                                                  };
                                                  return $globalActions[
                                                    "plasmic-antd5-config-provider.showNotification"
                                                  ]?.apply(null, [
                                                    ...actionArgs.args
                                                  ]);
                                                })()
                                              : undefined;
                                          if (
                                            $steps["positionLimit"] != null &&
                                            typeof $steps["positionLimit"] ===
                                              "object" &&
                                            typeof $steps["positionLimit"]
                                              .then === "function"
                                          ) {
                                            $steps["positionLimit"] =
                                              await $steps["positionLimit"];
                                          }
                                        }}
                                        playerClubCount={(() => {
                                          try {
                                            return $queries.teamPlayer.data.response.filter(
                                              x =>
                                                x.club_id ===
                                                currentItem.club_id
                                            ).length;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()}
                                        playerPrice={(() => {
                                          try {
                                            return currentItem.price;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()}
                                        point={(() => {
                                          try {
                                            return currentItem.ochko;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return 88;
                                            }
                                            throw e;
                                          }
                                        })()}
                                        position={(() => {
                                          try {
                                            return currentItem.position;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()}
                                        price={(() => {
                                          try {
                                            return currentItem.price;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return 9;
                                            }
                                            throw e;
                                          }
                                        })()}
                                        teamBalance={(() => {
                                          try {
                                            return $queries.query.data
                                              .response[0].balance;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()}
                                      />
                                    );
                                  })}
                                  {(_par =>
                                    !_par
                                      ? []
                                      : Array.isArray(_par)
                                      ? _par
                                      : [_par])(
                                    (() => {
                                      try {
                                        return $state.data;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return [];
                                        }
                                        throw e;
                                      }
                                    })()
                                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                    const currentItem = __plasmic_item_0;
                                    const currentIndex = __plasmic_idx_0;
                                    return (
                                      <PlayerPickerNewDesign
                                        data-plasmic-name={
                                          "playerPickerNewDesign"
                                        }
                                        data-plasmic-override={
                                          overrides.playerPickerNewDesign
                                        }
                                        buttonVisibility={(() => {
                                          try {
                                            return $queries.teamPlayer.data.response.find(
                                              x =>
                                                x.player_id === currentItem.id
                                            );
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "undefined";
                                            }
                                            throw e;
                                          }
                                        })()}
                                        checkPlayer={(() => {
                                          try {
                                            return $queries.teamPlayer.data.response
                                              .filter(x => x.sold != true)
                                              .find(
                                                x =>
                                                  x.player_id === currentItem.id
                                              );
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()}
                                        className={classNames(
                                          "__wab_instance",
                                          sty.playerPickerNewDesign
                                        )}
                                        clubName={(() => {
                                          try {
                                            return $queries.clubsnameid.data.response.find(
                                              x =>
                                                x.value === currentItem.club_id
                                            ).label;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "undefined";
                                            }
                                            throw e;
                                          }
                                        })()}
                                        key={currentIndex}
                                        name={(() => {
                                          try {
                                            return currentItem.name;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()}
                                        onclick={async event => {
                                          const $steps = {};

                                          $steps["invokeGlobalAction"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  args: [
                                                    "info",
                                                    (() => {
                                                      try {
                                                        return (
                                                          "Bu futbolchini narxi " +
                                                          (currentItem.price ??
                                                            0) +
                                                          " tanga sotib olish uchun sizga yana " +
                                                          ((currentItem.price ??
                                                            0) -
                                                            $queries.query.data
                                                              .response[0]
                                                              .balance) +
                                                          "tanga kerak"
                                                        );
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return undefined;
                                                        }
                                                        throw e;
                                                      }
                                                    })(),
                                                    undefined,
                                                    4,
                                                    "top"
                                                  ]
                                                };
                                                return $globalActions[
                                                  "plasmic-antd5-config-provider.showNotification"
                                                ]?.apply(null, [
                                                  ...actionArgs.args
                                                ]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["invokeGlobalAction"] !=
                                              null &&
                                            typeof $steps[
                                              "invokeGlobalAction"
                                            ] === "object" &&
                                            typeof $steps["invokeGlobalAction"]
                                              .then === "function"
                                          ) {
                                            $steps["invokeGlobalAction"] =
                                              await $steps[
                                                "invokeGlobalAction"
                                              ];
                                          }
                                        }}
                                        onclickAvatar={async event => {
                                          const $steps = {};

                                          $steps["invokeGlobalAction"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  args: [
                                                    "info",
                                                    (() => {
                                                      try {
                                                        return (
                                                          "Bitta komandadan maksimum " +
                                                          $queries
                                                            .systemConfigPlayerPickLimit
                                                            .data.response[0]
                                                            .value +
                                                          "ta futbolchi sotib olsa bo'ladi! "
                                                        );
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return undefined;
                                                        }
                                                        throw e;
                                                      }
                                                    })(),
                                                    undefined,
                                                    4,
                                                    "top"
                                                  ]
                                                };
                                                return $globalActions[
                                                  "plasmic-antd5-config-provider.showNotification"
                                                ]?.apply(null, [
                                                  ...actionArgs.args
                                                ]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["invokeGlobalAction"] !=
                                              null &&
                                            typeof $steps[
                                              "invokeGlobalAction"
                                            ] === "object" &&
                                            typeof $steps["invokeGlobalAction"]
                                              .then === "function"
                                          ) {
                                            $steps["invokeGlobalAction"] =
                                              await $steps[
                                                "invokeGlobalAction"
                                              ];
                                          }
                                        }}
                                        onclickMinus={async event => {
                                          const $steps = {};

                                          $steps["sellPlayer"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  dataOp: {
                                                    sourceId:
                                                      "8cdHi4ivRUEkK6qbegQevF",
                                                    opId: "7772ff6b-820d-452f-8cc5-361bf84269bb",
                                                    userArgs: {
                                                      variables: [null, null],
                                                      conditions: [
                                                        $queries.teamPlayer.data.response.find(
                                                          x =>
                                                            x.player_id ===
                                                            currentItem.id
                                                        )?.id
                                                      ]
                                                    },
                                                    cacheKey: null,
                                                    invalidatedKeys: [
                                                      "plasmic_refresh_all"
                                                    ],
                                                    roleId: null
                                                  }
                                                };
                                                return (async ({
                                                  dataOp,
                                                  continueOnError
                                                }) => {
                                                  try {
                                                    const response =
                                                      await executePlasmicDataOp(
                                                        dataOp,
                                                        {
                                                          userAuthToken:
                                                            dataSourcesCtx?.userAuthToken,
                                                          user: dataSourcesCtx?.user
                                                        }
                                                      );
                                                    await plasmicInvalidate(
                                                      dataOp.invalidatedKeys
                                                    );
                                                    return response;
                                                  } catch (e) {
                                                    if (!continueOnError) {
                                                      throw e;
                                                    }
                                                    return e;
                                                  }
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["sellPlayer"] != null &&
                                            typeof $steps["sellPlayer"] ===
                                              "object" &&
                                            typeof $steps["sellPlayer"].then ===
                                              "function"
                                          ) {
                                            $steps["sellPlayer"] = await $steps[
                                              "sellPlayer"
                                            ];
                                          }
                                        }}
                                        onclickPlus={async event => {
                                          const $steps = {};

                                          $steps["updatePlayerFast"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  dataOp: {
                                                    sourceId:
                                                      "vQtRPuFArSfh43vUmgx2PS",
                                                    opId: "ecb73c25-5e21-48e6-8b7d-cc47635d3ab8",
                                                    userArgs: {
                                                      body: [
                                                        currentItem.id,
                                                        currentItem.position,
                                                        $queries.query.data
                                                          .response[0].id
                                                      ]
                                                    },
                                                    cacheKey: null,
                                                    invalidatedKeys: [
                                                      "plasmic_refresh_all"
                                                    ],
                                                    roleId: null
                                                  }
                                                };
                                                return (async ({
                                                  dataOp,
                                                  continueOnError
                                                }) => {
                                                  try {
                                                    const response =
                                                      await executePlasmicDataOp(
                                                        dataOp,
                                                        {
                                                          userAuthToken:
                                                            dataSourcesCtx?.userAuthToken,
                                                          user: dataSourcesCtx?.user
                                                        }
                                                      );
                                                    await plasmicInvalidate(
                                                      dataOp.invalidatedKeys
                                                    );
                                                    return response;
                                                  } catch (e) {
                                                    if (!continueOnError) {
                                                      throw e;
                                                    }
                                                    return e;
                                                  }
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["updatePlayerFast"] !=
                                              null &&
                                            typeof $steps[
                                              "updatePlayerFast"
                                            ] === "object" &&
                                            typeof $steps["updatePlayerFast"]
                                              .then === "function"
                                          ) {
                                            $steps["updatePlayerFast"] =
                                              await $steps["updatePlayerFast"];
                                          }

                                          $steps["positionLimit"] =
                                            $steps.updatePlayerFast.data
                                              .response ===
                                            "Postion is full!!!!"
                                              ? (() => {
                                                  const actionArgs = {
                                                    args: [
                                                      "info",
                                                      (() => {
                                                        try {
                                                          return "Bu pozitsiyada bo'sh joy yo'q";
                                                        } catch (e) {
                                                          if (
                                                            e instanceof
                                                              TypeError ||
                                                            e?.plasmicType ===
                                                              "PlasmicUndefinedDataError"
                                                          ) {
                                                            return undefined;
                                                          }
                                                          throw e;
                                                        }
                                                      })(),
                                                      undefined,
                                                      undefined,
                                                      "top"
                                                    ]
                                                  };
                                                  return $globalActions[
                                                    "plasmic-antd5-config-provider.showNotification"
                                                  ]?.apply(null, [
                                                    ...actionArgs.args
                                                  ]);
                                                })()
                                              : undefined;
                                          if (
                                            $steps["positionLimit"] != null &&
                                            typeof $steps["positionLimit"] ===
                                              "object" &&
                                            typeof $steps["positionLimit"]
                                              .then === "function"
                                          ) {
                                            $steps["positionLimit"] =
                                              await $steps["positionLimit"];
                                          }
                                        }}
                                        playerClubCount={(() => {
                                          try {
                                            return $queries.teamPlayer.data.response.filter(
                                              x =>
                                                x.club_id ===
                                                currentItem.club_id
                                            ).length;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return 4;
                                            }
                                            throw e;
                                          }
                                        })()}
                                        playerPrice={(() => {
                                          try {
                                            return currentItem.price ?? 0;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()}
                                        point={(() => {
                                          try {
                                            return currentItem.ochko ?? 0;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return 88;
                                            }
                                            throw e;
                                          }
                                        })()}
                                        position={(() => {
                                          try {
                                            return currentItem.position;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()}
                                        price={(() => {
                                          try {
                                            return currentItem.price ?? 0;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return 9;
                                            }
                                            throw e;
                                          }
                                        })()}
                                        teamBalance={(() => {
                                          try {
                                            return $queries.query.data
                                              .response[0].balance;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return 100;
                                            }
                                            throw e;
                                          }
                                        })()}
                                      />
                                    );
                                  })}
                                  {(() => {
                                    const child$Props = {
                                      className: classNames(
                                        "__wab_instance",
                                        sty.pagination2
                                      ),
                                      current: generateStateValueProp($state, [
                                        "pagination2",
                                        "currentPage"
                                      ]),
                                      defaultCurrent: 1,
                                      defaultPageSize: 6,
                                      disabled: false,
                                      hideOnSinglePage: false,
                                      onChange: async (...eventArgs: any) => {
                                        generateStateOnChangePropForCodeComponents(
                                          $state,
                                          "currentPage",
                                          ["pagination2", "currentPage"],
                                          AntdPagination_Helpers
                                        ).apply(null, eventArgs);
                                        generateStateOnChangePropForCodeComponents(
                                          $state,
                                          "startIndex",
                                          ["pagination2", "startIndex"],
                                          AntdPagination_Helpers
                                        ).apply(null, eventArgs);
                                        generateStateOnChangePropForCodeComponents(
                                          $state,
                                          "endIndex",
                                          ["pagination2", "endIndex"],
                                          AntdPagination_Helpers
                                        ).apply(null, eventArgs);
                                      },
                                      onShowSizeChange:
                                        generateStateOnChangePropForCodeComponents(
                                          $state,
                                          "pageSize",
                                          ["pagination2", "pageSize"],
                                          AntdPagination_Helpers
                                        ),
                                      pageSize: generateStateValueProp($state, [
                                        "pagination2",
                                        "pageSize"
                                      ]),
                                      pageSizeOptions: [
                                        { pageSize: 10 },
                                        { pageSize: 20 },
                                        { pageSize: 50 },
                                        { pageSize: 100 }
                                      ],
                                      showLessItems: false,
                                      showQuickJumper: false,
                                      showSizeChanger: true,
                                      simple: false,
                                      size: "default",
                                      total: (() => {
                                        try {
                                          return $queries.playercount.data
                                            .response.length;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return 24;
                                          }
                                          throw e;
                                        }
                                      })()
                                    };
                                    initializeCodeComponentStates(
                                      $state,
                                      [
                                        {
                                          name: "currentPage",
                                          plasmicStateName:
                                            "pagination2.currentPage"
                                        },
                                        {
                                          name: "pageSize",
                                          plasmicStateName:
                                            "pagination2.pageSize"
                                        },
                                        {
                                          name: "startIndex",
                                          plasmicStateName:
                                            "pagination2.startIndex"
                                        },
                                        {
                                          name: "endIndex",
                                          plasmicStateName:
                                            "pagination2.endIndex"
                                        }
                                      ],
                                      [],
                                      AntdPagination_Helpers ?? {},
                                      child$Props
                                    );

                                    return (
                                      <AntdPagination
                                        data-plasmic-name={"pagination2"}
                                        data-plasmic-override={
                                          overrides.pagination2
                                        }
                                        {...child$Props}
                                      />
                                    );
                                  })()}
                                </Stack__>
                              </TabContent>
                              <TabContent
                                data-plasmic-name={"tabClubContent2"}
                                data-plasmic-override={
                                  overrides.tabClubContent2
                                }
                                className={classNames(
                                  "__wab_instance",
                                  sty.tabClubContent2
                                )}
                                tabKey={"tab2"}
                              >
                                <Stack__
                                  as={"div"}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__bEchJ
                                  )}
                                >
                                  <Stack__
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__hQ11B
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__tahr9
                                      )}
                                    >
                                      {
                                        "\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043a\u043b\u0443\u0431\u0430"
                                      }
                                    </div>
                                    <AntdSelect
                                      data-plasmic-name={"selectClub2"}
                                      data-plasmic-override={
                                        overrides.selectClub2
                                      }
                                      bordered={true}
                                      className={classNames(
                                        "__wab_instance",
                                        sty.selectClub2
                                      )}
                                      defaultStylesClassName={classNames(
                                        projectcss.root_reset,
                                        projectcss.plasmic_default_styles,
                                        projectcss.plasmic_mixins,
                                        projectcss.plasmic_tokens,
                                        plasmic_antd_5_hostless_css.plasmic_tokens,
                                        plasmic_plasmic_rich_components_css.plasmic_tokens
                                      )}
                                      defaultValue={1}
                                      onChange={generateStateOnChangeProp(
                                        $state,
                                        ["selectClub2", "value"]
                                      )}
                                      options={(() => {
                                        try {
                                          return $queries.clubsnameid.data
                                            .response;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return [];
                                          }
                                          throw e;
                                        }
                                      })()}
                                      placeholder={"Select..."}
                                      popupScopeClassName={
                                        sty["selectClub2__popup"]
                                      }
                                      showSearch={false}
                                      size={"middle"}
                                      value={generateStateValueProp($state, [
                                        "selectClub2",
                                        "value"
                                      ])}
                                    />
                                  </Stack__>
                                  <OrderBy
                                    className={classNames(
                                      "__wab_instance",
                                      sty.orderBy__yrUzJ
                                    )}
                                    onclickAllPoint={async event => {
                                      const $steps = {};

                                      $steps["updateOrderName"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: ["orderName"]
                                              },
                                              operation: 0,
                                              value: "ochko"
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["updateOrderName"] != null &&
                                        typeof $steps["updateOrderName"] ===
                                          "object" &&
                                        typeof $steps["updateOrderName"]
                                          .then === "function"
                                      ) {
                                        $steps["updateOrderName"] =
                                          await $steps["updateOrderName"];
                                      }
                                    }}
                                    onclickPrice={async event => {
                                      const $steps = {};

                                      $steps["updateOrderName"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: ["orderName"]
                                              },
                                              operation: 0,
                                              value: "price"
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["updateOrderName"] != null &&
                                        typeof $steps["updateOrderName"] ===
                                          "object" &&
                                        typeof $steps["updateOrderName"]
                                          .then === "function"
                                      ) {
                                        $steps["updateOrderName"] =
                                          await $steps["updateOrderName"];
                                      }
                                    }}
                                  />

                                  {(_par =>
                                    !_par
                                      ? []
                                      : Array.isArray(_par)
                                      ? _par
                                      : [_par])(
                                    (() => {
                                      try {
                                        return $queries.tabsClub.data.response;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return [];
                                        }
                                        throw e;
                                      }
                                    })()
                                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                    const currentItem = __plasmic_item_0;
                                    const currentIndex = __plasmic_idx_0;
                                    return (
                                      <PlayerPicker
                                        buttonVisibility={(() => {
                                          try {
                                            return $queries.teamPlayer.data.response.find(
                                              x =>
                                                x.player_id === currentItem.id
                                            );
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()}
                                        checkPlayer={(() => {
                                          try {
                                            return $queries.teamPlayer.data.response
                                              .filter(x => x.sold != true)
                                              .find(
                                                x =>
                                                  x.player_id === currentItem.id
                                              );
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()}
                                        className={classNames(
                                          "__wab_instance",
                                          sty.playerPicker__btwJl
                                        )}
                                        clubName={(() => {
                                          try {
                                            return $queries.clubsnameid.data.response.find(
                                              x =>
                                                x.value === currentItem.club_id
                                            ).label;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()}
                                        key={currentIndex}
                                        name={(() => {
                                          try {
                                            return currentItem.name;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()}
                                        onclick={async event => {
                                          const $steps = {};

                                          $steps["_"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  args: [
                                                    "info",
                                                    (() => {
                                                      try {
                                                        return (
                                                          "Bu futbolchini narxi " +
                                                          currentItem.price +
                                                          "tanga sotib olish uchun sizga yana " +
                                                          (currentItem.price -
                                                            $queries.query.data
                                                              .response[0]
                                                              .balance) +
                                                          "tanga kerak"
                                                        );
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return undefined;
                                                        }
                                                        throw e;
                                                      }
                                                    })(),
                                                    undefined,
                                                    undefined,
                                                    "top"
                                                  ]
                                                };
                                                return $globalActions[
                                                  "plasmic-antd5-config-provider.showNotification"
                                                ]?.apply(null, [
                                                  ...actionArgs.args
                                                ]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["_"] != null &&
                                            typeof $steps["_"] === "object" &&
                                            typeof $steps["_"].then ===
                                              "function"
                                          ) {
                                            $steps["_"] = await $steps["_"];
                                          }
                                        }}
                                        onclickAvatar={async event => {
                                          const $steps = {};

                                          $steps["clubPlayerLimit"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  args: [
                                                    "info",
                                                    (() => {
                                                      try {
                                                        return (
                                                          "Bitta komandadan maksimum " +
                                                          $queries
                                                            .systemConfigPlayerPickLimit
                                                            .data.response[0]
                                                            .value +
                                                          "ta futbolchi sotib olsa bo'ladi! "
                                                        );
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return undefined;
                                                        }
                                                        throw e;
                                                      }
                                                    })(),
                                                    undefined,
                                                    undefined,
                                                    "top"
                                                  ]
                                                };
                                                return $globalActions[
                                                  "plasmic-antd5-config-provider.showNotification"
                                                ]?.apply(null, [
                                                  ...actionArgs.args
                                                ]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["clubPlayerLimit"] != null &&
                                            typeof $steps["clubPlayerLimit"] ===
                                              "object" &&
                                            typeof $steps["clubPlayerLimit"]
                                              .then === "function"
                                          ) {
                                            $steps["clubPlayerLimit"] =
                                              await $steps["clubPlayerLimit"];
                                          }
                                        }}
                                        onclickMinus={async event => {
                                          const $steps = {};

                                          $steps["sellPlayer"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  dataOp: {
                                                    sourceId:
                                                      "vQtRPuFArSfh43vUmgx2PS",
                                                    opId: "f3302a2d-1214-43e9-a184-6051438fdcfd",
                                                    userArgs: {
                                                      params: [
                                                        $queries.query.data
                                                          .response[0].id,
                                                        currentItem.id
                                                      ]
                                                    },
                                                    cacheKey: null,
                                                    invalidatedKeys: [
                                                      "plasmic_refresh_all"
                                                    ],
                                                    roleId:
                                                      "ead2b235-73a3-4579-b15a-7fc91fc1a23a"
                                                  }
                                                };
                                                return (async ({
                                                  dataOp,
                                                  continueOnError
                                                }) => {
                                                  try {
                                                    const response =
                                                      await executePlasmicDataOp(
                                                        dataOp,
                                                        {
                                                          userAuthToken:
                                                            dataSourcesCtx?.userAuthToken,
                                                          user: dataSourcesCtx?.user
                                                        }
                                                      );
                                                    await plasmicInvalidate(
                                                      dataOp.invalidatedKeys
                                                    );
                                                    return response;
                                                  } catch (e) {
                                                    if (!continueOnError) {
                                                      throw e;
                                                    }
                                                    return e;
                                                  }
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["sellPlayer"] != null &&
                                            typeof $steps["sellPlayer"] ===
                                              "object" &&
                                            typeof $steps["sellPlayer"].then ===
                                              "function"
                                          ) {
                                            $steps["sellPlayer"] = await $steps[
                                              "sellPlayer"
                                            ];
                                          }
                                        }}
                                        onclickPlus={async event => {
                                          const $steps = {};

                                          $steps["updatePlayerFast"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  dataOp: {
                                                    sourceId:
                                                      "vQtRPuFArSfh43vUmgx2PS",
                                                    opId: "f28c7771-fe5c-4510-8ce8-3e39318ccc36",
                                                    userArgs: {
                                                      body: [
                                                        currentItem.id,
                                                        currentItem.position,
                                                        $queries.query.data
                                                          .response[0].id
                                                      ]
                                                    },
                                                    cacheKey: null,
                                                    invalidatedKeys: [
                                                      "plasmic_refresh_all"
                                                    ],
                                                    roleId:
                                                      "ead2b235-73a3-4579-b15a-7fc91fc1a23a"
                                                  }
                                                };
                                                return (async ({
                                                  dataOp,
                                                  continueOnError
                                                }) => {
                                                  try {
                                                    const response =
                                                      await executePlasmicDataOp(
                                                        dataOp,
                                                        {
                                                          userAuthToken:
                                                            dataSourcesCtx?.userAuthToken,
                                                          user: dataSourcesCtx?.user
                                                        }
                                                      );
                                                    await plasmicInvalidate(
                                                      dataOp.invalidatedKeys
                                                    );
                                                    return response;
                                                  } catch (e) {
                                                    if (!continueOnError) {
                                                      throw e;
                                                    }
                                                    return e;
                                                  }
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["updatePlayerFast"] !=
                                              null &&
                                            typeof $steps[
                                              "updatePlayerFast"
                                            ] === "object" &&
                                            typeof $steps["updatePlayerFast"]
                                              .then === "function"
                                          ) {
                                            $steps["updatePlayerFast"] =
                                              await $steps["updatePlayerFast"];
                                          }

                                          $steps["invokeGlobalAction"] =
                                            $steps.updatePlayerFast.data
                                              .response ===
                                            "Postion is full!!!!"
                                              ? (() => {
                                                  const actionArgs = {
                                                    args: [
                                                      "info",
                                                      (() => {
                                                        try {
                                                          return "Bu pozitsiyada bo'sh joy yo'q";
                                                        } catch (e) {
                                                          if (
                                                            e instanceof
                                                              TypeError ||
                                                            e?.plasmicType ===
                                                              "PlasmicUndefinedDataError"
                                                          ) {
                                                            return undefined;
                                                          }
                                                          throw e;
                                                        }
                                                      })(),
                                                      undefined,
                                                      undefined,
                                                      "top"
                                                    ]
                                                  };
                                                  return $globalActions[
                                                    "plasmic-antd5-config-provider.showNotification"
                                                  ]?.apply(null, [
                                                    ...actionArgs.args
                                                  ]);
                                                })()
                                              : undefined;
                                          if (
                                            $steps["invokeGlobalAction"] !=
                                              null &&
                                            typeof $steps[
                                              "invokeGlobalAction"
                                            ] === "object" &&
                                            typeof $steps["invokeGlobalAction"]
                                              .then === "function"
                                          ) {
                                            $steps["invokeGlobalAction"] =
                                              await $steps[
                                                "invokeGlobalAction"
                                              ];
                                          }
                                        }}
                                        playerClubCount={(() => {
                                          try {
                                            return $queries.teamPlayer.data.response.filter(
                                              x =>
                                                x.club_id ===
                                                currentItem.club_id
                                            ).length;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return 4;
                                            }
                                            throw e;
                                          }
                                        })()}
                                        playerPrice={(() => {
                                          try {
                                            return currentItem.price;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()}
                                        point={(() => {
                                          try {
                                            return currentItem.ochko;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return 88;
                                            }
                                            throw e;
                                          }
                                        })()}
                                        position={(() => {
                                          try {
                                            return currentItem.position;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()}
                                        price={(() => {
                                          try {
                                            return currentItem.price;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return 9;
                                            }
                                            throw e;
                                          }
                                        })()}
                                        teamBalance={(() => {
                                          try {
                                            return $queries.query.data
                                              .response[0].balance;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return 100;
                                            }
                                            throw e;
                                          }
                                        })()}
                                      />
                                    );
                                  })}
                                  {(() => {
                                    const child$Props = {
                                      className: classNames(
                                        "__wab_instance",
                                        sty.pagclubtab2
                                      ),
                                      current: generateStateValueProp($state, [
                                        "pagclubtab2",
                                        "currentPage"
                                      ]),
                                      defaultCurrent: 1,
                                      defaultPageSize: 6,
                                      disabled: false,
                                      hideOnSinglePage: false,
                                      onChange: async (...eventArgs: any) => {
                                        generateStateOnChangePropForCodeComponents(
                                          $state,
                                          "currentPage",
                                          ["pagclubtab2", "currentPage"],
                                          AntdPagination_Helpers
                                        ).apply(null, eventArgs);
                                        generateStateOnChangePropForCodeComponents(
                                          $state,
                                          "startIndex",
                                          ["pagclubtab2", "startIndex"],
                                          AntdPagination_Helpers
                                        ).apply(null, eventArgs);
                                        generateStateOnChangePropForCodeComponents(
                                          $state,
                                          "endIndex",
                                          ["pagclubtab2", "endIndex"],
                                          AntdPagination_Helpers
                                        ).apply(null, eventArgs);
                                      },
                                      onShowSizeChange:
                                        generateStateOnChangePropForCodeComponents(
                                          $state,
                                          "pageSize",
                                          ["pagclubtab2", "pageSize"],
                                          AntdPagination_Helpers
                                        ),
                                      pageSize: generateStateValueProp($state, [
                                        "pagclubtab2",
                                        "pageSize"
                                      ]),
                                      pageSizeOptions: [
                                        { pageSize: 10 },
                                        { pageSize: 20 },
                                        { pageSize: 50 },
                                        { pageSize: 100 }
                                      ],
                                      showLessItems: false,
                                      showQuickJumper: false,
                                      showSizeChanger: false,
                                      simple: false,
                                      size: "default",
                                      total: (() => {
                                        try {
                                          return $queries.tabsClubAll.data
                                            .response.length;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return 24;
                                          }
                                          throw e;
                                        }
                                      })()
                                    };
                                    initializeCodeComponentStates(
                                      $state,
                                      [
                                        {
                                          name: "currentPage",
                                          plasmicStateName:
                                            "pagclubtab2.currentPage"
                                        },
                                        {
                                          name: "pageSize",
                                          plasmicStateName:
                                            "pagclubtab2.pageSize"
                                        },
                                        {
                                          name: "startIndex",
                                          plasmicStateName:
                                            "pagclubtab2.startIndex"
                                        },
                                        {
                                          name: "endIndex",
                                          plasmicStateName:
                                            "pagclubtab2.endIndex"
                                        }
                                      ],
                                      [],
                                      AntdPagination_Helpers ?? {},
                                      child$Props
                                    );

                                    return (
                                      <AntdPagination
                                        data-plasmic-name={"pagclubtab2"}
                                        data-plasmic-override={
                                          overrides.pagclubtab2
                                        }
                                        {...child$Props}
                                      />
                                    );
                                  })()}
                                </Stack__>
                              </TabContent>
                              <TabContent
                                data-plasmic-name={"tabPositionContent2"}
                                data-plasmic-override={
                                  overrides.tabPositionContent2
                                }
                                className={classNames(
                                  "__wab_instance",
                                  sty.tabPositionContent2
                                )}
                                tabKey={"tab3"}
                              >
                                <Stack__
                                  as={"div"}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__asPzR
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__xGdg
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__fBdg7
                                      )}
                                    >
                                      {
                                        "\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u043f\u043e\u0437\u0438\u0446\u0438\u044e"
                                      }
                                    </div>
                                    <Select
                                      data-plasmic-name={"select3"}
                                      data-plasmic-override={overrides.select3}
                                      className={classNames(
                                        "__wab_instance",
                                        sty.select3
                                      )}
                                      onChange={(...eventArgs) => {
                                        generateStateOnChangeProp($state, [
                                          "select3",
                                          "value"
                                        ])(eventArgs[0]);
                                      }}
                                      options={(() => {
                                        const __composite = [
                                          { value: null, label: null },
                                          { value: null, label: null },
                                          { value: null, label: null },
                                          { value: null, label: null }
                                        ];
                                        __composite["0"]["value"] = "DEF";
                                        __composite["0"]["label"] =
                                          "\u0417\u0410\u0429\u0418\u0422\u041d\u0418\u041a\u0418";
                                        __composite["1"]["value"] = "GOA";
                                        __composite["1"]["label"] =
                                          "\u0412\u0420\u0410\u0422\u0410\u0420\u0418";
                                        __composite["2"]["value"] = "STR";
                                        __composite["2"]["label"] =
                                          "\u041d\u0410\u041f\u0410\u0414\u0410\u042e\u0429\u0418\u0415";
                                        __composite["3"]["value"] = "MID";
                                        __composite["3"]["label"] =
                                          "\u041f\u041e\u041b\u0423\u0417\u0410\u0429\u0418\u0422\u041d\u0418\u041a\u0418";
                                        return __composite;
                                      })()}
                                      value={generateStateValueProp($state, [
                                        "select3",
                                        "value"
                                      ])}
                                    />
                                  </div>
                                  <OrderBy
                                    className={classNames(
                                      "__wab_instance",
                                      sty.orderBy__ofwvm
                                    )}
                                    onclickAllPoint={async event => {
                                      const $steps = {};

                                      $steps["updateOrderName"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: ["orderName"]
                                              },
                                              operation: 0,
                                              value: "ochko"
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["updateOrderName"] != null &&
                                        typeof $steps["updateOrderName"] ===
                                          "object" &&
                                        typeof $steps["updateOrderName"]
                                          .then === "function"
                                      ) {
                                        $steps["updateOrderName"] =
                                          await $steps["updateOrderName"];
                                      }
                                    }}
                                    onclickPrice={async event => {
                                      const $steps = {};

                                      $steps["updateOrderName"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: ["orderName"]
                                              },
                                              operation: 0,
                                              value: "price"
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["updateOrderName"] != null &&
                                        typeof $steps["updateOrderName"] ===
                                          "object" &&
                                        typeof $steps["updateOrderName"]
                                          .then === "function"
                                      ) {
                                        $steps["updateOrderName"] =
                                          await $steps["updateOrderName"];
                                      }
                                    }}
                                  />

                                  {(_par =>
                                    !_par
                                      ? []
                                      : Array.isArray(_par)
                                      ? _par
                                      : [_par])(
                                    (() => {
                                      try {
                                        return $queries.tabsPos.data.response;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return [];
                                        }
                                        throw e;
                                      }
                                    })()
                                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                    const currentItem = __plasmic_item_0;
                                    const currentIndex = __plasmic_idx_0;
                                    return (
                                      <PlayerPicker
                                        buttonVisibility={(() => {
                                          try {
                                            return $queries.teamPlayer.data.response.find(
                                              x =>
                                                x.player_id === currentItem.id
                                            );
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()}
                                        checkPlayer={(() => {
                                          try {
                                            return $queries.teamPlayer.data.response
                                              .filter(x => x.sold != true)
                                              .find(
                                                x =>
                                                  x.player_id === currentItem.id
                                              );
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()}
                                        className={classNames(
                                          "__wab_instance",
                                          sty.playerPicker__cHca
                                        )}
                                        clubName={(() => {
                                          try {
                                            return $queries.clubsnameid.data.response.find(
                                              x =>
                                                x.value === currentItem.club_id
                                            ).label;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()}
                                        key={currentIndex}
                                        name={(() => {
                                          try {
                                            return currentItem.name;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()}
                                        onclick={async event => {
                                          const $steps = {};

                                          $steps["_"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  args: [
                                                    "info",
                                                    (() => {
                                                      try {
                                                        return (
                                                          "Bu futbolchini narxi " +
                                                          currentItem.price +
                                                          "tanga sotib olish uchun sizga yana " +
                                                          (currentItem.price -
                                                            $queries.query.data
                                                              .response[0]
                                                              .balance) +
                                                          "tanga kerak"
                                                        );
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return undefined;
                                                        }
                                                        throw e;
                                                      }
                                                    })(),
                                                    undefined,
                                                    undefined,
                                                    "top"
                                                  ]
                                                };
                                                return $globalActions[
                                                  "plasmic-antd5-config-provider.showNotification"
                                                ]?.apply(null, [
                                                  ...actionArgs.args
                                                ]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["_"] != null &&
                                            typeof $steps["_"] === "object" &&
                                            typeof $steps["_"].then ===
                                              "function"
                                          ) {
                                            $steps["_"] = await $steps["_"];
                                          }
                                        }}
                                        onclickAvatar={async event => {
                                          const $steps = {};

                                          $steps["clubPlayerLimit"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  args: [
                                                    "info",
                                                    (() => {
                                                      try {
                                                        return (
                                                          "Bitta komandadan maksimum " +
                                                          $queries
                                                            .systemConfigPlayerPickLimit
                                                            .data.response[0]
                                                            .value +
                                                          "ta futbolchi sotib olsa bo'ladi! "
                                                        );
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return undefined;
                                                        }
                                                        throw e;
                                                      }
                                                    })(),
                                                    undefined,
                                                    undefined,
                                                    "top"
                                                  ]
                                                };
                                                return $globalActions[
                                                  "plasmic-antd5-config-provider.showNotification"
                                                ]?.apply(null, [
                                                  ...actionArgs.args
                                                ]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["clubPlayerLimit"] != null &&
                                            typeof $steps["clubPlayerLimit"] ===
                                              "object" &&
                                            typeof $steps["clubPlayerLimit"]
                                              .then === "function"
                                          ) {
                                            $steps["clubPlayerLimit"] =
                                              await $steps["clubPlayerLimit"];
                                          }
                                        }}
                                        onclickMinus={async event => {
                                          const $steps = {};

                                          $steps["sellPlayer"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  dataOp: {
                                                    sourceId:
                                                      "vQtRPuFArSfh43vUmgx2PS",
                                                    opId: "1429a58f-9a8b-4de5-90c6-2b0089da7242",
                                                    userArgs: {
                                                      params: [
                                                        $queries.query.data
                                                          .response[0].id,
                                                        currentItem.id
                                                      ]
                                                    },
                                                    cacheKey: null,
                                                    invalidatedKeys: [
                                                      "plasmic_refresh_all"
                                                    ],
                                                    roleId:
                                                      "ead2b235-73a3-4579-b15a-7fc91fc1a23a"
                                                  }
                                                };
                                                return (async ({
                                                  dataOp,
                                                  continueOnError
                                                }) => {
                                                  try {
                                                    const response =
                                                      await executePlasmicDataOp(
                                                        dataOp,
                                                        {
                                                          userAuthToken:
                                                            dataSourcesCtx?.userAuthToken,
                                                          user: dataSourcesCtx?.user
                                                        }
                                                      );
                                                    await plasmicInvalidate(
                                                      dataOp.invalidatedKeys
                                                    );
                                                    return response;
                                                  } catch (e) {
                                                    if (!continueOnError) {
                                                      throw e;
                                                    }
                                                    return e;
                                                  }
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["sellPlayer"] != null &&
                                            typeof $steps["sellPlayer"] ===
                                              "object" &&
                                            typeof $steps["sellPlayer"].then ===
                                              "function"
                                          ) {
                                            $steps["sellPlayer"] = await $steps[
                                              "sellPlayer"
                                            ];
                                          }
                                        }}
                                        onclickPlus={async event => {
                                          const $steps = {};

                                          $steps["updatePlayerFast"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  dataOp: {
                                                    sourceId:
                                                      "vQtRPuFArSfh43vUmgx2PS",
                                                    opId: "c5be09f6-d591-4936-a30c-55081b14819c",
                                                    userArgs: {
                                                      body: [
                                                        currentItem.id,
                                                        currentItem.position,
                                                        $queries.query.data
                                                          .response[0].id
                                                      ]
                                                    },
                                                    cacheKey: null,
                                                    invalidatedKeys: [
                                                      "plasmic_refresh_all"
                                                    ],
                                                    roleId:
                                                      "ead2b235-73a3-4579-b15a-7fc91fc1a23a"
                                                  },
                                                  continueOnError: false
                                                };
                                                return (async ({
                                                  dataOp,
                                                  continueOnError
                                                }) => {
                                                  try {
                                                    const response =
                                                      await executePlasmicDataOp(
                                                        dataOp,
                                                        {
                                                          userAuthToken:
                                                            dataSourcesCtx?.userAuthToken,
                                                          user: dataSourcesCtx?.user
                                                        }
                                                      );
                                                    await plasmicInvalidate(
                                                      dataOp.invalidatedKeys
                                                    );
                                                    return response;
                                                  } catch (e) {
                                                    if (!continueOnError) {
                                                      throw e;
                                                    }
                                                    return e;
                                                  }
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["updatePlayerFast"] !=
                                              null &&
                                            typeof $steps[
                                              "updatePlayerFast"
                                            ] === "object" &&
                                            typeof $steps["updatePlayerFast"]
                                              .then === "function"
                                          ) {
                                            $steps["updatePlayerFast"] =
                                              await $steps["updatePlayerFast"];
                                          }

                                          $steps["showNotification"] =
                                            $steps.updatePlayerFast.data
                                              .response ===
                                            "Postion is full!!!!"
                                              ? (() => {
                                                  const actionArgs = {
                                                    args: [
                                                      "info",
                                                      (() => {
                                                        try {
                                                          return "Bu pozitsiyada bo'sh joy yo'q";
                                                        } catch (e) {
                                                          if (
                                                            e instanceof
                                                              TypeError ||
                                                            e?.plasmicType ===
                                                              "PlasmicUndefinedDataError"
                                                          ) {
                                                            return undefined;
                                                          }
                                                          throw e;
                                                        }
                                                      })(),
                                                      undefined,
                                                      undefined,
                                                      "top"
                                                    ]
                                                  };
                                                  return $globalActions[
                                                    "plasmic-antd5-config-provider.showNotification"
                                                  ]?.apply(null, [
                                                    ...actionArgs.args
                                                  ]);
                                                })()
                                              : undefined;
                                          if (
                                            $steps["showNotification"] !=
                                              null &&
                                            typeof $steps[
                                              "showNotification"
                                            ] === "object" &&
                                            typeof $steps["showNotification"]
                                              .then === "function"
                                          ) {
                                            $steps["showNotification"] =
                                              await $steps["showNotification"];
                                          }
                                        }}
                                        playerClubCount={(() => {
                                          try {
                                            return $queries.teamPlayer.data.response.filter(
                                              x =>
                                                x.club_id ===
                                                currentItem.club_id
                                            ).length;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return 4;
                                            }
                                            throw e;
                                          }
                                        })()}
                                        playerPrice={(() => {
                                          try {
                                            return currentItem.price;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()}
                                        point={(() => {
                                          try {
                                            return currentItem.ochko;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return 88;
                                            }
                                            throw e;
                                          }
                                        })()}
                                        position={(() => {
                                          try {
                                            return currentItem.position;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()}
                                        price={(() => {
                                          try {
                                            return currentItem.price;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return 9;
                                            }
                                            throw e;
                                          }
                                        })()}
                                        teamBalance={(() => {
                                          try {
                                            return $queries.query.data
                                              .response[0].balance;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return 100;
                                            }
                                            throw e;
                                          }
                                        })()}
                                      />
                                    );
                                  })}
                                  {(() => {
                                    const child$Props = {
                                      className: classNames(
                                        "__wab_instance",
                                        sty.pagpostab2
                                      ),
                                      current: generateStateValueProp($state, [
                                        "pagpostab2",
                                        "currentPage"
                                      ]),
                                      defaultCurrent: 1,
                                      defaultPageSize: 6,
                                      disabled: false,
                                      hideOnSinglePage: false,
                                      onChange: async (...eventArgs: any) => {
                                        generateStateOnChangePropForCodeComponents(
                                          $state,
                                          "currentPage",
                                          ["pagpostab2", "currentPage"],
                                          AntdPagination_Helpers
                                        ).apply(null, eventArgs);
                                        generateStateOnChangePropForCodeComponents(
                                          $state,
                                          "startIndex",
                                          ["pagpostab2", "startIndex"],
                                          AntdPagination_Helpers
                                        ).apply(null, eventArgs);
                                        generateStateOnChangePropForCodeComponents(
                                          $state,
                                          "endIndex",
                                          ["pagpostab2", "endIndex"],
                                          AntdPagination_Helpers
                                        ).apply(null, eventArgs);
                                      },
                                      onShowSizeChange:
                                        generateStateOnChangePropForCodeComponents(
                                          $state,
                                          "pageSize",
                                          ["pagpostab2", "pageSize"],
                                          AntdPagination_Helpers
                                        ),
                                      pageSize: generateStateValueProp($state, [
                                        "pagpostab2",
                                        "pageSize"
                                      ]),
                                      pageSizeOptions: [
                                        { pageSize: 10 },
                                        { pageSize: 20 },
                                        { pageSize: 50 },
                                        { pageSize: 100 }
                                      ],
                                      showLessItems: false,
                                      showQuickJumper: false,
                                      showSizeChanger: false,
                                      simple: false,
                                      size: "default",
                                      total: (() => {
                                        try {
                                          return $queries.tabsPosAll.data
                                            .response.length;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return 24;
                                          }
                                          throw e;
                                        }
                                      })()
                                    };
                                    initializeCodeComponentStates(
                                      $state,
                                      [
                                        {
                                          name: "currentPage",
                                          plasmicStateName:
                                            "pagpostab2.currentPage"
                                        },
                                        {
                                          name: "pageSize",
                                          plasmicStateName:
                                            "pagpostab2.pageSize"
                                        },
                                        {
                                          name: "startIndex",
                                          plasmicStateName:
                                            "pagpostab2.startIndex"
                                        },
                                        {
                                          name: "endIndex",
                                          plasmicStateName:
                                            "pagpostab2.endIndex"
                                        }
                                      ],
                                      [],
                                      AntdPagination_Helpers ?? {},
                                      child$Props
                                    );

                                    return (
                                      <AntdPagination
                                        data-plasmic-name={"pagpostab2"}
                                        data-plasmic-override={
                                          overrides.pagpostab2
                                        }
                                        {...child$Props}
                                      />
                                    );
                                  })()}
                                </Stack__>
                              </TabContent>
                              <TabContent
                                data-plasmic-name={"tabPriceContent2"}
                                data-plasmic-override={
                                  overrides.tabPriceContent2
                                }
                                className={classNames(
                                  "__wab_instance",
                                  sty.tabPriceContent2
                                )}
                                tabKey={"tab4"}
                              >
                                <Stack__
                                  as={"div"}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__a6MdX
                                  )}
                                >
                                  <Stack__
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox___8HDEh
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__lLgn
                                      )}
                                    >
                                      {
                                        "\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u0446\u0435\u043d\u0443"
                                      }
                                    </div>
                                    <AntdInputNumber
                                      data-plasmic-name={"startPrice2"}
                                      data-plasmic-override={
                                        overrides.startPrice2
                                      }
                                      className={classNames(
                                        "__wab_instance",
                                        sty.startPrice2
                                      )}
                                      max={1000}
                                      min={0}
                                      onChange={generateStateOnChangeProp(
                                        $state,
                                        ["startPrice2", "value"]
                                      )}
                                      placeholder={"\u041e\u0442"}
                                      type={"number"}
                                      value={generateStateValueProp($state, [
                                        "startPrice2",
                                        "value"
                                      ])}
                                    />

                                    <AntdInputNumber
                                      data-plasmic-name={"endPrice2"}
                                      data-plasmic-override={
                                        overrides.endPrice2
                                      }
                                      className={classNames(
                                        "__wab_instance",
                                        sty.endPrice2
                                      )}
                                      max={1000}
                                      min={0}
                                      onChange={generateStateOnChangeProp(
                                        $state,
                                        ["endPrice2", "value"]
                                      )}
                                      placeholder={"\u0414\u043e"}
                                      type={"number"}
                                      value={generateStateValueProp($state, [
                                        "endPrice2",
                                        "value"
                                      ])}
                                    />
                                  </Stack__>
                                  {(() => {
                                    try {
                                      return (
                                        $queries.tabPrice.data.response
                                          ?.length > 0
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })() ? (
                                    <Stack__
                                      as={"div"}
                                      data-plasmic-name={"price2"}
                                      data-plasmic-override={overrides.price2}
                                      hasGap={true}
                                      className={classNames(
                                        projectcss.all,
                                        sty.price2
                                      )}
                                    >
                                      <OrderBy
                                        className={classNames(
                                          "__wab_instance",
                                          sty.orderBy__gzx58
                                        )}
                                        onclickAllPoint={async event => {
                                          const $steps = {};

                                          $steps["updateOrderName"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: ["orderName"]
                                                  },
                                                  operation: 0,
                                                  value: "ochko"
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;

                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    value
                                                  );
                                                  return value;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["updateOrderName"] != null &&
                                            typeof $steps["updateOrderName"] ===
                                              "object" &&
                                            typeof $steps["updateOrderName"]
                                              .then === "function"
                                          ) {
                                            $steps["updateOrderName"] =
                                              await $steps["updateOrderName"];
                                          }
                                        }}
                                        onclickPrice={async event => {
                                          const $steps = {};

                                          $steps["updateOrderName"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: ["orderName"]
                                                  },
                                                  operation: 0,
                                                  value: "price"
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;

                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    value
                                                  );
                                                  return value;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["updateOrderName"] != null &&
                                            typeof $steps["updateOrderName"] ===
                                              "object" &&
                                            typeof $steps["updateOrderName"]
                                              .then === "function"
                                          ) {
                                            $steps["updateOrderName"] =
                                              await $steps["updateOrderName"];
                                          }
                                        }}
                                      />

                                      {(_par =>
                                        !_par
                                          ? []
                                          : Array.isArray(_par)
                                          ? _par
                                          : [_par])(
                                        (() => {
                                          try {
                                            return $queries.tabPrice.data
                                              .response;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return [];
                                            }
                                            throw e;
                                          }
                                        })()
                                      ).map(
                                        (__plasmic_item_0, __plasmic_idx_0) => {
                                          const currentItem = __plasmic_item_0;
                                          const currentIndex = __plasmic_idx_0;
                                          return (
                                            <PlayerPicker
                                              buttonVisibility={(() => {
                                                try {
                                                  return $queries.teamPlayer.data.response.find(
                                                    x =>
                                                      x.player_id ===
                                                      currentItem.id
                                                  );
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                              checkPlayer={(() => {
                                                try {
                                                  return $queries.teamPlayer.data.response
                                                    .filter(x => x.sold != true)
                                                    .find(
                                                      x =>
                                                        x.player_id ===
                                                        currentItem.id
                                                    );
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                              className={classNames(
                                                "__wab_instance",
                                                sty.playerPicker__xjf4
                                              )}
                                              clubName={(() => {
                                                try {
                                                  return $queries.clubsnameid.data.response.find(
                                                    x =>
                                                      x.value ===
                                                      currentItem.club_id
                                                  ).label;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                              key={currentIndex}
                                              name={(() => {
                                                try {
                                                  return currentItem.name;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                              onclick={async event => {
                                                const $steps = {};

                                                $steps["_"] = true
                                                  ? (() => {
                                                      const actionArgs = {
                                                        args: [
                                                          "info",
                                                          (() => {
                                                            try {
                                                              return (
                                                                "Bu futbolchini narxi " +
                                                                currentItem.price +
                                                                "tanga sotib olish uchun sizga yana " +
                                                                (currentItem.price -
                                                                  $queries.query
                                                                    .data
                                                                    .response[0]
                                                                    .balance) +
                                                                "tanga kerak"
                                                              );
                                                            } catch (e) {
                                                              if (
                                                                e instanceof
                                                                  TypeError ||
                                                                e?.plasmicType ===
                                                                  "PlasmicUndefinedDataError"
                                                              ) {
                                                                return undefined;
                                                              }
                                                              throw e;
                                                            }
                                                          })(),
                                                          undefined,
                                                          undefined,
                                                          "top"
                                                        ]
                                                      };
                                                      return $globalActions[
                                                        "plasmic-antd5-config-provider.showNotification"
                                                      ]?.apply(null, [
                                                        ...actionArgs.args
                                                      ]);
                                                    })()
                                                  : undefined;
                                                if (
                                                  $steps["_"] != null &&
                                                  typeof $steps["_"] ===
                                                    "object" &&
                                                  typeof $steps["_"].then ===
                                                    "function"
                                                ) {
                                                  $steps["_"] = await $steps[
                                                    "_"
                                                  ];
                                                }
                                              }}
                                              onclickAvatar={async event => {
                                                const $steps = {};

                                                $steps["clubPlayerLimit"] = true
                                                  ? (() => {
                                                      const actionArgs = {
                                                        args: [
                                                          "info",
                                                          (() => {
                                                            try {
                                                              return (
                                                                "Bitta komandadan maksimum " +
                                                                $queries
                                                                  .systemConfigPlayerPickLimit
                                                                  .data
                                                                  .response[0]
                                                                  .value +
                                                                "ta futbolchi sotib olsa bo'ladi! "
                                                              );
                                                            } catch (e) {
                                                              if (
                                                                e instanceof
                                                                  TypeError ||
                                                                e?.plasmicType ===
                                                                  "PlasmicUndefinedDataError"
                                                              ) {
                                                                return undefined;
                                                              }
                                                              throw e;
                                                            }
                                                          })(),
                                                          undefined,
                                                          undefined,
                                                          "top"
                                                        ]
                                                      };
                                                      return $globalActions[
                                                        "plasmic-antd5-config-provider.showNotification"
                                                      ]?.apply(null, [
                                                        ...actionArgs.args
                                                      ]);
                                                    })()
                                                  : undefined;
                                                if (
                                                  $steps["clubPlayerLimit"] !=
                                                    null &&
                                                  typeof $steps[
                                                    "clubPlayerLimit"
                                                  ] === "object" &&
                                                  typeof $steps[
                                                    "clubPlayerLimit"
                                                  ].then === "function"
                                                ) {
                                                  $steps["clubPlayerLimit"] =
                                                    await $steps[
                                                      "clubPlayerLimit"
                                                    ];
                                                }
                                              }}
                                              onclickMinus={async event => {
                                                const $steps = {};

                                                $steps["sellPlayer"] = true
                                                  ? (() => {
                                                      const actionArgs = {
                                                        dataOp: {
                                                          sourceId:
                                                            "vQtRPuFArSfh43vUmgx2PS",
                                                          opId: "2aee3307-d120-4161-960a-7bd554fdffea",
                                                          userArgs: {
                                                            params: [
                                                              $queries.query
                                                                .data
                                                                .response[0].id,
                                                              currentItem.id
                                                            ]
                                                          },
                                                          cacheKey: null,
                                                          invalidatedKeys: [
                                                            "plasmic_refresh_all"
                                                          ],
                                                          roleId:
                                                            "ead2b235-73a3-4579-b15a-7fc91fc1a23a"
                                                        }
                                                      };
                                                      return (async ({
                                                        dataOp,
                                                        continueOnError
                                                      }) => {
                                                        try {
                                                          const response =
                                                            await executePlasmicDataOp(
                                                              dataOp,
                                                              {
                                                                userAuthToken:
                                                                  dataSourcesCtx?.userAuthToken,
                                                                user: dataSourcesCtx?.user
                                                              }
                                                            );
                                                          await plasmicInvalidate(
                                                            dataOp.invalidatedKeys
                                                          );
                                                          return response;
                                                        } catch (e) {
                                                          if (
                                                            !continueOnError
                                                          ) {
                                                            throw e;
                                                          }
                                                          return e;
                                                        }
                                                      })?.apply(null, [
                                                        actionArgs
                                                      ]);
                                                    })()
                                                  : undefined;
                                                if (
                                                  $steps["sellPlayer"] !=
                                                    null &&
                                                  typeof $steps[
                                                    "sellPlayer"
                                                  ] === "object" &&
                                                  typeof $steps["sellPlayer"]
                                                    .then === "function"
                                                ) {
                                                  $steps["sellPlayer"] =
                                                    await $steps["sellPlayer"];
                                                }
                                              }}
                                              onclickPlus={async event => {
                                                const $steps = {};

                                                $steps["updatePlayerFast"] =
                                                  true
                                                    ? (() => {
                                                        const actionArgs = {
                                                          dataOp: {
                                                            sourceId:
                                                              "vQtRPuFArSfh43vUmgx2PS",
                                                            opId: "07e5139c-6705-4377-a48b-699f82581bea",
                                                            userArgs: {
                                                              body: [
                                                                currentItem.id,
                                                                currentItem.position,
                                                                $queries.query
                                                                  .data
                                                                  .response[0]
                                                                  .id
                                                              ]
                                                            },
                                                            cacheKey: null,
                                                            invalidatedKeys: [
                                                              "plasmic_refresh_all"
                                                            ],
                                                            roleId:
                                                              "ead2b235-73a3-4579-b15a-7fc91fc1a23a"
                                                          }
                                                        };
                                                        return (async ({
                                                          dataOp,
                                                          continueOnError
                                                        }) => {
                                                          try {
                                                            const response =
                                                              await executePlasmicDataOp(
                                                                dataOp,
                                                                {
                                                                  userAuthToken:
                                                                    dataSourcesCtx?.userAuthToken,
                                                                  user: dataSourcesCtx?.user
                                                                }
                                                              );
                                                            await plasmicInvalidate(
                                                              dataOp.invalidatedKeys
                                                            );
                                                            return response;
                                                          } catch (e) {
                                                            if (
                                                              !continueOnError
                                                            ) {
                                                              throw e;
                                                            }
                                                            return e;
                                                          }
                                                        })?.apply(null, [
                                                          actionArgs
                                                        ]);
                                                      })()
                                                    : undefined;
                                                if (
                                                  $steps["updatePlayerFast"] !=
                                                    null &&
                                                  typeof $steps[
                                                    "updatePlayerFast"
                                                  ] === "object" &&
                                                  typeof $steps[
                                                    "updatePlayerFast"
                                                  ].then === "function"
                                                ) {
                                                  $steps["updatePlayerFast"] =
                                                    await $steps[
                                                      "updatePlayerFast"
                                                    ];
                                                }

                                                $steps["positionLimit"] =
                                                  $steps.updatePlayerFast.data
                                                    .response ===
                                                  "Postion is full!!!!"
                                                    ? (() => {
                                                        const actionArgs = {
                                                          args: [
                                                            "info",
                                                            (() => {
                                                              try {
                                                                return "Bu pozitsiyada bo'sh joy yo'q";
                                                              } catch (e) {
                                                                if (
                                                                  e instanceof
                                                                    TypeError ||
                                                                  e?.plasmicType ===
                                                                    "PlasmicUndefinedDataError"
                                                                ) {
                                                                  return undefined;
                                                                }
                                                                throw e;
                                                              }
                                                            })(),
                                                            undefined,
                                                            undefined,
                                                            "top"
                                                          ]
                                                        };
                                                        return $globalActions[
                                                          "plasmic-antd5-config-provider.showNotification"
                                                        ]?.apply(null, [
                                                          ...actionArgs.args
                                                        ]);
                                                      })()
                                                    : undefined;
                                                if (
                                                  $steps["positionLimit"] !=
                                                    null &&
                                                  typeof $steps[
                                                    "positionLimit"
                                                  ] === "object" &&
                                                  typeof $steps["positionLimit"]
                                                    .then === "function"
                                                ) {
                                                  $steps["positionLimit"] =
                                                    await $steps[
                                                      "positionLimit"
                                                    ];
                                                }
                                              }}
                                              playerClubCount={(() => {
                                                try {
                                                  return $queries.teamPlayer.data.response.filter(
                                                    x =>
                                                      x.club_id ===
                                                      currentItem.club_id
                                                  ).length;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return 4;
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                              playerPrice={(() => {
                                                try {
                                                  return currentItem.price;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                              point={(() => {
                                                try {
                                                  return currentItem.ochko;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return 88;
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                              position={(() => {
                                                try {
                                                  return currentItem.position;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                              price={(() => {
                                                try {
                                                  return currentItem.price;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return 9;
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                              teamBalance={(() => {
                                                try {
                                                  return $queries.query.data
                                                    .response[0].balance;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return 100;
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            />
                                          );
                                        }
                                      )}
                                      {(() => {
                                        const child$Props = {
                                          className: classNames(
                                            "__wab_instance",
                                            sty.pagpricetab2
                                          ),
                                          current: generateStateValueProp(
                                            $state,
                                            ["pagpricetab2", "currentPage"]
                                          ),
                                          defaultCurrent: 1,
                                          defaultPageSize: 6,
                                          disabled: false,
                                          hideOnSinglePage: false,
                                          onChange: async (
                                            ...eventArgs: any
                                          ) => {
                                            generateStateOnChangePropForCodeComponents(
                                              $state,
                                              "currentPage",
                                              ["pagpricetab2", "currentPage"],
                                              AntdPagination_Helpers
                                            ).apply(null, eventArgs);
                                            generateStateOnChangePropForCodeComponents(
                                              $state,
                                              "startIndex",
                                              ["pagpricetab2", "startIndex"],
                                              AntdPagination_Helpers
                                            ).apply(null, eventArgs);
                                            generateStateOnChangePropForCodeComponents(
                                              $state,
                                              "endIndex",
                                              ["pagpricetab2", "endIndex"],
                                              AntdPagination_Helpers
                                            ).apply(null, eventArgs);
                                          },
                                          onShowSizeChange:
                                            generateStateOnChangePropForCodeComponents(
                                              $state,
                                              "pageSize",
                                              ["pagpricetab2", "pageSize"],
                                              AntdPagination_Helpers
                                            ),
                                          pageSize: generateStateValueProp(
                                            $state,
                                            ["pagpricetab2", "pageSize"]
                                          ),
                                          pageSizeOptions: [
                                            { pageSize: 10 },
                                            { pageSize: 20 },
                                            { pageSize: 50 },
                                            { pageSize: 100 }
                                          ],
                                          showLessItems: false,
                                          showQuickJumper: false,
                                          showSizeChanger: false,
                                          simple: false,
                                          size: "default",
                                          total: (() => {
                                            try {
                                              return $queries.tabsPriceAll.data
                                                .response.length;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return 24;
                                              }
                                              throw e;
                                            }
                                          })()
                                        };
                                        initializeCodeComponentStates(
                                          $state,
                                          [
                                            {
                                              name: "currentPage",
                                              plasmicStateName:
                                                "pagpricetab2.currentPage"
                                            },
                                            {
                                              name: "pageSize",
                                              plasmicStateName:
                                                "pagpricetab2.pageSize"
                                            },
                                            {
                                              name: "startIndex",
                                              plasmicStateName:
                                                "pagpricetab2.startIndex"
                                            },
                                            {
                                              name: "endIndex",
                                              plasmicStateName:
                                                "pagpricetab2.endIndex"
                                            }
                                          ],
                                          [],
                                          AntdPagination_Helpers ?? {},
                                          child$Props
                                        );

                                        return (
                                          <AntdPagination
                                            data-plasmic-name={"pagpricetab2"}
                                            data-plasmic-override={
                                              overrides.pagpricetab2
                                            }
                                            {...child$Props}
                                          />
                                        );
                                      })()}
                                    </Stack__>
                                  ) : null}
                                </Stack__>
                              </TabContent>
                            </Stack__>
                          </Stack__>
                        )}
                      </DataCtxReader__>
                    </TabsContainer>
                  </Stack__>
                </div>
              </div>
            </div>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__vqWfG)}
            >
              <div className={classNames(projectcss.all, sty.freeBox___5Zvwp)}>
                <div className={classNames(projectcss.all, sty.freeBox__l0WR)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ltwC
                    )}
                  >
                    {"The World Cup"}
                  </div>
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return $queries.match.data.response;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__nnqRj
                        )}
                        key={currentIndex}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__i2TK
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__p0Faa
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.home_id.name;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Athletic Club";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img___3YRsX)}
                            displayHeight={"auto"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"36px"}
                            loading={"lazy"}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__rhyVh
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (
                                    currentItem.starts_at ?? "15/08\n22:00"
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "15/08\n22:00";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img__qKlz)}
                            displayHeight={"auto"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"36px"}
                            loading={"lazy"}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__qlbMo
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.away_id.name;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Getafe CF";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                        {(() => {
                          try {
                            return (
                              currentIndex !==
                              $queries.match.data.response.length - 1
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__rwrEt
                            )}
                          />
                        ) : null}
                      </div>
                    );
                  })}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__kiz5X)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__t3AEa
                  )}
                >
                  {"REKLAMA"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__xBdXh)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___4R6)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox___7Ivfi)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xuX40
                      )}
                    >
                      {"News"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__unDcm)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__tWke
                      )}
                    >
                      {
                        "- Qiyinchiliklarni ortda qoldirib, oxiri \"Oltin to'p\" sohibiga aylandingiz. Bu yil ushbu sovrin uchun kurashda kimni favorit deb ayta olasiz?\n- Vinisius, chunki joriy mavsum yakuniga ko'ra u sovringa munosib. U o'tgan yil ham yuqori darajada o'yin ko'rsatdi. Vini yosh, ammo futbolchi sifatida juda aqlli.\n- Vinisiusning ustunligi nimada?\n- U o'yinlarni bir o'zi yutib bera oladi - to'g'ri jamoadoshlarining yordami bilan, ammo u \"Real\"ga kerak paytda o'zini ko'rsata oladi.\nSHu sababli Vinisius \"Oltin to'p\"ga munosib deb hisoblayman\" - dedi Benzema."
                      }
                    </div>
                  </div>
                </Stack__>
              </div>
            </Stack__>
            <div className={classNames(projectcss.all, sty.freeBox__sywzM)}>
              <div className={classNames(projectcss.all, sty.freeBox__uz7Bw)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__oe4Pf
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#000000" }}
                    >
                      {"UMUMIY QOIDALAR"}
                    </span>
                  </React.Fragment>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__cy7V
                  )}
                >
                  {"JAMOA YEG\u2019ING"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__fc9Wb
                  )}
                >
                  {
                    "100 millionlik byudjetdan foydalaning va chempionatning eng yaxshifutbolchilaridan iborat jamoani to'plang"
                  }
                </div>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__tyTsH)}
                  displayHeight={"417px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"516px"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/copy_of_proliga_new_design/images/image20240725134602Png.png",
                    fullWidth: 903,
                    fullHeight: 789,
                    aspectRatio: undefined
                  }}
                />
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__eFRhD)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__tcFdn)}
                  displayHeight={"654px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/copy_of_proliga_new_design/images/image20240725134522Png.png",
                    fullWidth: 1730,
                    fullHeight: 1208,
                    aspectRatio: undefined
                  }}
                />
              </div>
            </div>
          </Stack__>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbar",
    "teamInfo2",
    "selectFormation2",
    "goa2",
    "def2",
    "mid2",
    "str2",
    "soccerPlaceMensNewDesign",
    "teamName",
    "capitanSelect",
    "button",
    "columns",
    "selectClub",
    "teamName5",
    "selectClub3",
    "teamName3",
    "teamName4",
    "playerList2",
    "tabsContainer",
    "tabAllContent2",
    "orderByAll2",
    "orderByNewDesign",
    "playerPickerNewDesign",
    "pagination2",
    "tabClubContent2",
    "selectClub2",
    "pagclubtab2",
    "tabPositionContent2",
    "select3",
    "pagpostab2",
    "tabPriceContent2",
    "startPrice2",
    "endPrice2",
    "price2",
    "pagpricetab2"
  ],
  navbar: ["navbar"],
  teamInfo2: ["teamInfo2", "selectFormation2"],
  selectFormation2: ["selectFormation2"],
  goa2: ["goa2"],
  def2: ["def2"],
  mid2: ["mid2"],
  str2: ["str2"],
  soccerPlaceMensNewDesign: ["soccerPlaceMensNewDesign"],
  teamName: ["teamName"],
  capitanSelect: ["capitanSelect"],
  button: ["button"],
  columns: ["columns", "selectClub", "teamName5", "selectClub3"],
  selectClub: ["selectClub"],
  teamName5: ["teamName5"],
  selectClub3: ["selectClub3"],
  teamName3: ["teamName3"],
  teamName4: ["teamName4"],
  playerList2: [
    "playerList2",
    "tabsContainer",
    "tabAllContent2",
    "orderByAll2",
    "orderByNewDesign",
    "playerPickerNewDesign",
    "pagination2",
    "tabClubContent2",
    "selectClub2",
    "pagclubtab2",
    "tabPositionContent2",
    "select3",
    "pagpostab2",
    "tabPriceContent2",
    "startPrice2",
    "endPrice2",
    "price2",
    "pagpricetab2"
  ],
  tabsContainer: [
    "tabsContainer",
    "tabAllContent2",
    "orderByAll2",
    "orderByNewDesign",
    "playerPickerNewDesign",
    "pagination2",
    "tabClubContent2",
    "selectClub2",
    "pagclubtab2",
    "tabPositionContent2",
    "select3",
    "pagpostab2",
    "tabPriceContent2",
    "startPrice2",
    "endPrice2",
    "price2",
    "pagpricetab2"
  ],
  tabAllContent2: [
    "tabAllContent2",
    "orderByAll2",
    "orderByNewDesign",
    "playerPickerNewDesign",
    "pagination2"
  ],
  orderByAll2: ["orderByAll2"],
  orderByNewDesign: ["orderByNewDesign"],
  playerPickerNewDesign: ["playerPickerNewDesign"],
  pagination2: ["pagination2"],
  tabClubContent2: ["tabClubContent2", "selectClub2", "pagclubtab2"],
  selectClub2: ["selectClub2"],
  pagclubtab2: ["pagclubtab2"],
  tabPositionContent2: ["tabPositionContent2", "select3", "pagpostab2"],
  select3: ["select3"],
  pagpostab2: ["pagpostab2"],
  tabPriceContent2: [
    "tabPriceContent2",
    "startPrice2",
    "endPrice2",
    "price2",
    "pagpricetab2"
  ],
  startPrice2: ["startPrice2"],
  endPrice2: ["endPrice2"],
  price2: ["price2", "pagpricetab2"],
  pagpricetab2: ["pagpricetab2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbar: typeof Navbar;
  teamInfo2: "div";
  selectFormation2: typeof AntdSelect;
  goa2: "div";
  def2: "div";
  mid2: "div";
  str2: "div";
  soccerPlaceMensNewDesign: typeof SoccerPlaceMensNewDesign;
  teamName: typeof TextInput;
  capitanSelect: typeof Select;
  button: "button";
  columns: "div";
  selectClub: typeof Select;
  teamName5: typeof TextInput;
  selectClub3: typeof Select;
  teamName3: typeof TextInput;
  teamName4: typeof TextInput;
  playerList2: "div";
  tabsContainer: typeof TabsContainer;
  tabAllContent2: typeof TabContent;
  orderByAll2: typeof OrderBy;
  orderByNewDesign: typeof OrderByNewDesign;
  playerPickerNewDesign: typeof PlayerPickerNewDesign;
  pagination2: typeof AntdPagination;
  tabClubContent2: typeof TabContent;
  selectClub2: typeof AntdSelect;
  pagclubtab2: typeof AntdPagination;
  tabPositionContent2: typeof TabContent;
  select3: typeof Select;
  pagpostab2: typeof AntdPagination;
  tabPriceContent2: typeof TabContent;
  startPrice2: typeof AntdInputNumber;
  endPrice2: typeof AntdInputNumber;
  price2: "div";
  pagpricetab2: typeof AntdPagination;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicEditTeam2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicEditTeam2__VariantsArgs;
    args?: PlasmicEditTeam2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicEditTeam2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicEditTeam2__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicEditTeam2__ArgProps,
          internalVariantPropNames: PlasmicEditTeam2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicEditTeam2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicEditTeam2";
  } else {
    func.displayName = `PlasmicEditTeam2.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const PageGuard: React.FC<P> = props => (
    <PlasmicPageGuard__
      minRole={"ead2b235-73a3-4579-b15a-7fc91fc1a23a"}
      appId={"qrPZwqtrqWM4S9b4djCj1H"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={false}
    >
      <WrappedComponent {...props} />
    </PlasmicPageGuard__>
  );

  return PageGuard;
}

export const PlasmicEditTeam2 = Object.assign(
  // Top-level PlasmicEditTeam2 renders the root element
  withPlasmicPageGuard(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    teamInfo2: makeNodeComponent("teamInfo2"),
    selectFormation2: makeNodeComponent("selectFormation2"),
    goa2: makeNodeComponent("goa2"),
    def2: makeNodeComponent("def2"),
    mid2: makeNodeComponent("mid2"),
    str2: makeNodeComponent("str2"),
    soccerPlaceMensNewDesign: makeNodeComponent("soccerPlaceMensNewDesign"),
    teamName: makeNodeComponent("teamName"),
    capitanSelect: makeNodeComponent("capitanSelect"),
    button: makeNodeComponent("button"),
    columns: makeNodeComponent("columns"),
    selectClub: makeNodeComponent("selectClub"),
    teamName5: makeNodeComponent("teamName5"),
    selectClub3: makeNodeComponent("selectClub3"),
    teamName3: makeNodeComponent("teamName3"),
    teamName4: makeNodeComponent("teamName4"),
    playerList2: makeNodeComponent("playerList2"),
    tabsContainer: makeNodeComponent("tabsContainer"),
    tabAllContent2: makeNodeComponent("tabAllContent2"),
    orderByAll2: makeNodeComponent("orderByAll2"),
    orderByNewDesign: makeNodeComponent("orderByNewDesign"),
    playerPickerNewDesign: makeNodeComponent("playerPickerNewDesign"),
    pagination2: makeNodeComponent("pagination2"),
    tabClubContent2: makeNodeComponent("tabClubContent2"),
    selectClub2: makeNodeComponent("selectClub2"),
    pagclubtab2: makeNodeComponent("pagclubtab2"),
    tabPositionContent2: makeNodeComponent("tabPositionContent2"),
    select3: makeNodeComponent("select3"),
    pagpostab2: makeNodeComponent("pagpostab2"),
    tabPriceContent2: makeNodeComponent("tabPriceContent2"),
    startPrice2: makeNodeComponent("startPrice2"),
    endPrice2: makeNodeComponent("endPrice2"),
    price2: makeNodeComponent("price2"),
    pagpricetab2: makeNodeComponent("pagpricetab2"),

    // Metadata about props expected for PlasmicEditTeam2
    internalVariantProps: PlasmicEditTeam2__VariantProps,
    internalArgProps: PlasmicEditTeam2__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicEditTeam2;
/* prettier-ignore-end */
