// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qrPZwqtrqWM4S9b4djCj1H
// Component: uWjk6FMKZDUs

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import Navbar from "../../Navbar"; // plasmic-import: j_koFSvK1RER/component
import UserteamNavbar from "../../UserteamNavbar"; // plasmic-import: yP6GdWiKL8XJ/component
import { AntdDropdown } from "@plasmicpkgs/antd5/skinny/registerDropdown";
import { AntdMenuItem } from "@plasmicpkgs/antd5/skinny/registerMenu";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import AvatarPlayer from "../../AvatarPlayer"; // plasmic-import: nLFZBWuqWsMB/component
import SoccerPlaceMens2 from "../../SoccerPlaceMens2"; // plasmic-import: w81G4mUA-VvW/component
import PlayerPickerRow from "../../PlayerPickerRow"; // plasmic-import: as4LbzE516j9/component
import SideBarMyTeam from "../../SideBarMyTeam"; // plasmic-import: kCfKs1vqA6_E/component
import Footer from "../../Footer"; // plasmic-import: sRXlHXHXDYps/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantskuWqqBs0ERIp } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: KuWQQBs0eRIp/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: qrPZwqtrqWM4S9b4djCj1H/projectcss
import sty from "./PlasmicTeams.module.css"; // plasmic-import: uWjk6FMKZDUs/css

createPlasmicElementProxy;

export type PlasmicTeams__VariantMembers = {};
export type PlasmicTeams__VariantsArgs = {};
type VariantPropType = keyof PlasmicTeams__VariantsArgs;
export const PlasmicTeams__VariantProps = new Array<VariantPropType>();

export type PlasmicTeams__ArgsType = {};
type ArgPropType = keyof PlasmicTeams__ArgsType;
export const PlasmicTeams__ArgProps = new Array<ArgPropType>();

export type PlasmicTeams__OverridesType = {
  root?: Flex__<"div">;
  navbar?: Flex__<typeof Navbar>;
  userteamNavbar?: Flex__<typeof UserteamNavbar>;
  columns?: Flex__<"div">;
  _532?: Flex__<typeof AntdDropdown>;
  button?: Flex__<typeof AntdButton>;
  goa?: Flex__<"div">;
  avatarPlayer?: Flex__<typeof AvatarPlayer>;
  def?: Flex__<"div">;
  avatarPlayer2?: Flex__<typeof AvatarPlayer>;
  mid?: Flex__<"div">;
  avatarPlayer3?: Flex__<typeof AvatarPlayer>;
  str?: Flex__<"div">;
  avatarPlayer4?: Flex__<typeof AvatarPlayer>;
  soccerPlaceMens2?: Flex__<typeof SoccerPlaceMens2>;
  playerPickerRow?: Flex__<typeof PlayerPickerRow>;
  sideBarMyTeam?: Flex__<typeof SideBarMyTeam>;
  footer?: Flex__<typeof Footer>;
};

export interface DefaultTeamsProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicTeams__RenderFunc(props: {
  variants: PlasmicTeams__VariantsArgs;
  args: PlasmicTeams__ArgsType;
  overrides: PlasmicTeams__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "inputState",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "DEF"
      },
      {
        path: "teamplayerstate",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "sellBtnBool",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return undefined;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "playerId",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "capitanBtnVisibility",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "playerState2",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.player2.data;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    teamP: usePlasmicDataOp(() => {
      return {
        sourceId: "8cdHi4ivRUEkK6qbegQevF",
        opId: "a11a49b9-c5e0-44aa-8799-8f6252dcd380",
        userArgs: {
          filters: [$queries.query.data[0].id]
        },
        cacheKey: `plasmic.$.a11a49b9-c5e0-44aa-8799-8f6252dcd380.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    goa: usePlasmicDataOp(() => {
      return {
        sourceId: "8cdHi4ivRUEkK6qbegQevF",
        opId: "3746c312-0f4d-4f78-8c7d-c88deba4ee8b",
        userArgs: {
          filters: [$queries.teamP.data[0].id]
        },
        cacheKey: `plasmic.$.3746c312-0f4d-4f78-8c7d-c88deba4ee8b.$.`,
        invalidatedKeys: null,
        roleId: "ead2b235-73a3-4579-b15a-7fc91fc1a23a"
      };
    }),
    player: usePlasmicDataOp(() => {
      return {
        sourceId: "8cdHi4ivRUEkK6qbegQevF",
        opId: "1fa56dbc-64d6-4744-a14b-e0f25bdd5f3e",
        userArgs: {},
        cacheKey: `plasmic.$.1fa56dbc-64d6-4744-a14b-e0f25bdd5f3e.$.`,
        invalidatedKeys: null,
        roleId: "ead2b235-73a3-4579-b15a-7fc91fc1a23a"
      };
    }),
    def: usePlasmicDataOp(() => {
      return {
        sourceId: "8cdHi4ivRUEkK6qbegQevF",
        opId: "c7d4d263-b030-4b91-9747-74e8333a1692",
        userArgs: {
          filters: [$queries.teamP.data[0].id]
        },
        cacheKey: `plasmic.$.c7d4d263-b030-4b91-9747-74e8333a1692.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    mid: usePlasmicDataOp(() => {
      return {
        sourceId: "8cdHi4ivRUEkK6qbegQevF",
        opId: "befe2828-fdae-4d2a-bf35-449f78663437",
        userArgs: {
          filters: [$queries.teamP.data[0].id]
        },
        cacheKey: `plasmic.$.befe2828-fdae-4d2a-bf35-449f78663437.$.`,
        invalidatedKeys: null,
        roleId: "ead2b235-73a3-4579-b15a-7fc91fc1a23a"
      };
    }),
    str: usePlasmicDataOp(() => {
      return {
        sourceId: "8cdHi4ivRUEkK6qbegQevF",
        opId: "15c142a2-2c5e-4d9a-b49f-34b2e006eccc",
        userArgs: {
          filters: [$queries.teamP.data[0].id]
        },
        cacheKey: `plasmic.$.15c142a2-2c5e-4d9a-b49f-34b2e006eccc.$.`,
        invalidatedKeys: null,
        roleId: "ead2b235-73a3-4579-b15a-7fc91fc1a23a"
      };
    }),
    teamPlayer: usePlasmicDataOp(() => {
      return {
        sourceId: "8cdHi4ivRUEkK6qbegQevF",
        opId: "f311aa71-91f3-46d9-ac3a-bfaea852f44f",
        userArgs: {
          filters: [$queries.teamP.data[0].id]
        },
        cacheKey: `plasmic.$.f311aa71-91f3-46d9-ac3a-bfaea852f44f.$.`,
        invalidatedKeys: null,
        roleId: "ead2b235-73a3-4579-b15a-7fc91fc1a23a"
      };
    }),
    clubs: usePlasmicDataOp(() => {
      return {
        sourceId: "8cdHi4ivRUEkK6qbegQevF",
        opId: "c1202788-1dd2-4209-9e27-da1a76e88b05",
        userArgs: {},
        cacheKey: `plasmic.$.c1202788-1dd2-4209-9e27-da1a76e88b05.$.`,
        invalidatedKeys: null,
        roleId: "ead2b235-73a3-4579-b15a-7fc91fc1a23a"
      };
    }),
    pickplayer: usePlasmicDataOp(() => {
      return {
        sourceId: "8cdHi4ivRUEkK6qbegQevF",
        opId: "0a20285f-a605-44d0-9f43-5d7d0204e776",
        userArgs: {
          filters: [$state.inputState]
        },
        cacheKey: `plasmic.$.0a20285f-a605-44d0-9f43-5d7d0204e776.$.`,
        invalidatedKeys: null,
        roleId: "ead2b235-73a3-4579-b15a-7fc91fc1a23a"
      };
    }),
    pickedPlayersCount: usePlasmicDataOp(() => {
      return {
        sourceId: "8cdHi4ivRUEkK6qbegQevF",
        opId: "514b9a3e-cfed-48d2-90df-c13a3a0a19d4",
        userArgs: {
          filters: [$queries.teamP.data[0].id]
        },
        cacheKey: `plasmic.$.514b9a3e-cfed-48d2-90df-c13a3a0a19d4.$.`,
        invalidatedKeys: null,
        roleId: "ead2b235-73a3-4579-b15a-7fc91fc1a23a"
      };
    }),
    teamCapitan: usePlasmicDataOp(() => {
      return {
        sourceId: "8cdHi4ivRUEkK6qbegQevF",
        opId: "1c1b4b12-06d9-4774-90d7-13f88aae33f2",
        userArgs: {
          filters: [$queries.teamP.data[0].id]
        },
        cacheKey: `plasmic.$.1c1b4b12-06d9-4774-90d7-13f88aae33f2.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    query: usePlasmicDataOp(() => {
      return {
        sourceId: "8cdHi4ivRUEkK6qbegQevF",
        opId: "da3e0932-a942-42a7-8fc3-50412146ff6b",
        userArgs: {
          keys: [$ctx.params.id]
        },
        cacheKey: `plasmic.$.da3e0932-a942-42a7-8fc3-50412146ff6b.$.`,
        invalidatedKeys: null,
        roleId: "ead2b235-73a3-4579-b15a-7fc91fc1a23a"
      };
    }),
    player2: usePlasmicDataOp(() => {
      return {
        sourceId: "8cdHi4ivRUEkK6qbegQevF",
        opId: "2999bc6b-17ea-4986-a1b4-d598d74d8c10",
        userArgs: {},
        cacheKey: `plasmic.$.2999bc6b-17ea-4986-a1b4-d598d74d8c10.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    pickedPlayer: usePlasmicDataOp(() => {
      return {
        sourceId: "8cdHi4ivRUEkK6qbegQevF",
        opId: "8a1a23a6-d68e-42e2-8064-924abea69bb5",
        userArgs: {
          query: [$state.teamplayerstate]
        },
        cacheKey: `plasmic.$.8a1a23a6-d68e-42e2-8064-924abea69bb5.$.`,
        invalidatedKeys: null,
        roleId: "ead2b235-73a3-4579-b15a-7fc91fc1a23a"
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantskuWqqBs0ERIp()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <Navbar
            data-plasmic-name={"navbar"}
            data-plasmic-override={overrides.navbar}
            className={classNames("__wab_instance", sty.navbar)}
          />

          <UserteamNavbar
            data-plasmic-name={"userteamNavbar"}
            data-plasmic-override={overrides.userteamNavbar}
            capitanBtnVisibility={$state.capitanBtnVisibility}
            className={classNames("__wab_instance", sty.userteamNavbar)}
            onlickEditTeam={async event => {
              const $steps = {};

              $steps["goToEditTeam"] = true
                ? (() => {
                    const actionArgs = {
                      destination: `/old/${"1"}/${(() => {
                        try {
                          return $ctx.params.id;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}`
                    };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToEditTeam"] != null &&
                typeof $steps["goToEditTeam"] === "object" &&
                typeof $steps["goToEditTeam"].then === "function"
              ) {
                $steps["goToEditTeam"] = await $steps["goToEditTeam"];
              }
            }}
            sellBtnBool={$state.sellBtnBool}
          />

          <div
            data-plasmic-name={"columns"}
            data-plasmic-override={overrides.columns}
            className={classNames(projectcss.all, sty.columns)}
          >
            <div className={classNames(projectcss.all, sty.column__uBjUl)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___3UxgB
                )}
              >
                {"Line-Up"}
              </div>
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))([
                2, 3, 4
              ]).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <AntdDropdown
                    data-plasmic-name={"_532"}
                    data-plasmic-override={overrides._532}
                    className={classNames("__wab_instance", sty._532)}
                    dropdownMenuScopeClassName={sty["_532__dropdownMenu"]}
                    fakeOpen={false}
                    key={currentIndex}
                    menuItems={() => (
                      <React.Fragment>
                        <AntdMenuItem
                          className={classNames(
                            "__wab_instance",
                            sty.menuItem___9FhjA
                          )}
                          key={"menu-item-1"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__eP52O
                            )}
                          >
                            {"Menu item"}
                          </div>
                        </AntdMenuItem>
                        <AntdMenuItem
                          className={classNames(
                            "__wab_instance",
                            sty.menuItem__zTfNy
                          )}
                          key={"menu-item-2"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__pBiYt
                            )}
                          >
                            {"Menu item"}
                          </div>
                        </AntdMenuItem>
                      </React.Fragment>
                    )}
                    menuItemsJson={(() => {
                      const __composite = [
                        { type: "item", value: "action1", label: null },
                        { type: "item", value: "action2", label: null }
                      ];
                      __composite["0"]["label"] = "4-2-2-3";
                      __composite["1"]["label"] = "1-5-2-3";
                      return __composite;
                    })()}
                  >
                    <AntdButton
                      data-plasmic-name={"button"}
                      data-plasmic-override={overrides.button}
                      className={classNames("__wab_instance", sty.button)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__vuZz
                        )}
                      >
                        {"Dropdown"}
                      </div>
                    </AntdButton>
                  </AntdDropdown>
                );
              })}
              <div className={classNames(projectcss.all, sty.freeBox__tB4QR)}>
                <div className={classNames(projectcss.all, sty.freeBox__tNctp)}>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__u8Oba)}
                  >
                    <div
                      data-plasmic-name={"goa"}
                      data-plasmic-override={overrides.goa}
                      className={classNames(projectcss.all, sty.goa)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ct4KL
                        )}
                      >
                        {(_par =>
                          !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                          (() => {
                            try {
                              return $queries.goa.data;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        ).map((__plasmic_item_0, __plasmic_idx_0) => {
                          const currentItem = __plasmic_item_0;
                          const currentIndex = __plasmic_idx_0;
                          return (
                            <AvatarPlayer
                              data-plasmic-name={"avatarPlayer"}
                              data-plasmic-override={overrides.avatarPlayer}
                              capitanVisibility={(() => {
                                try {
                                  return currentItem.is_captain;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return false;
                                  }
                                  throw e;
                                }
                              })()}
                              className={classNames(
                                "__wab_instance",
                                sty.avatarPlayer
                              )}
                              key={currentIndex}
                              name={(() => {
                                try {
                                  return $queries.player.data.find(
                                    x => x.id === currentItem.player_id
                                  ).name;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Player";
                                  }
                                  throw e;
                                }
                              })()}
                            />
                          );
                        })}
                      </div>
                    </div>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"def"}
                      data-plasmic-override={overrides.def}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.def)}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $queries.def.data;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__fkC7S
                            )}
                            key={currentIndex}
                          >
                            <AvatarPlayer
                              data-plasmic-name={"avatarPlayer2"}
                              data-plasmic-override={overrides.avatarPlayer2}
                              capitanVisibility={(() => {
                                try {
                                  return currentItem.is_captain;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return false;
                                  }
                                  throw e;
                                }
                              })()}
                              className={classNames(
                                "__wab_instance",
                                sty.avatarPlayer2
                              )}
                              name={(() => {
                                try {
                                  return $queries.player.data.find(
                                    x => x.id === currentItem.player_id
                                  ).name;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Player";
                                  }
                                  throw e;
                                }
                              })()}
                            />
                          </div>
                        );
                      })}
                    </Stack__>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"mid"}
                      data-plasmic-override={overrides.mid}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.mid)}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $queries.mid.data;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__sVsro
                            )}
                            key={currentIndex}
                          >
                            <AvatarPlayer
                              data-plasmic-name={"avatarPlayer3"}
                              data-plasmic-override={overrides.avatarPlayer3}
                              capitanVisibility={(() => {
                                try {
                                  return currentItem.is_captain;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return false;
                                  }
                                  throw e;
                                }
                              })()}
                              className={classNames(
                                "__wab_instance",
                                sty.avatarPlayer3
                              )}
                              name={(() => {
                                try {
                                  return $queries.player.data.find(
                                    x => x.id === currentItem.player_id
                                  ).name;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return ``;
                                  }
                                  throw e;
                                }
                              })()}
                            />
                          </div>
                        );
                      })}
                    </Stack__>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"str"}
                      data-plasmic-override={overrides.str}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.str)}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $queries.str.data;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__jhAkB
                            )}
                            key={currentIndex}
                          >
                            <AvatarPlayer
                              data-plasmic-name={"avatarPlayer4"}
                              data-plasmic-override={overrides.avatarPlayer4}
                              capitanVisibility={(() => {
                                try {
                                  return currentItem.is_captain;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return false;
                                  }
                                  throw e;
                                }
                              })()}
                              className={classNames(
                                "__wab_instance",
                                sty.avatarPlayer4
                              )}
                              name={(() => {
                                try {
                                  return $queries.player.data.find(
                                    x => x.id === currentItem.player_id
                                  ).name;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Player";
                                  }
                                  throw e;
                                }
                              })()}
                            />
                          </div>
                        );
                      })}
                    </Stack__>
                  </Stack__>
                  <SoccerPlaceMens2
                    data-plasmic-name={"soccerPlaceMens2"}
                    data-plasmic-override={overrides.soccerPlaceMens2}
                    className={classNames(
                      "__wab_instance",
                      sty.soccerPlaceMens2
                    )}
                  />
                </div>
              </div>
            </div>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.column___4Akln)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__ioc1P)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jo1S
                  )}
                >
                  {"Squad"}
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__tIk8V)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__dRqVx
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return (
                            "Player(" +
                            $queries.pickedPlayersCount.data.length +
                            "/11)"
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Players";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </div>
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__gbFrU)}
              >
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__jLU
                  )}
                  component={Link}
                  href={"https://www.plasmic.app/"}
                  platform={"nextjs"}
                >
                  {"ALL"}
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link___5Wi5I
                  )}
                  component={Link}
                  href={"https://www.plasmic.app/"}
                  platform={"nextjs"}
                >
                  {"GOA"}
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__zoyAy
                  )}
                  component={Link}
                  href={"https://www.plasmic.app/"}
                  platform={"nextjs"}
                >
                  {"DEF"}
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__r2Ar9
                  )}
                  component={Link}
                  href={"https://www.plasmic.app/"}
                  platform={"nextjs"}
                >
                  {"MID"}
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link___7MJ5
                  )}
                  component={Link}
                  href={"https://www.plasmic.app/"}
                  platform={"nextjs"}
                >
                  {"STR"}
                </PlasmicLink__>
              </Stack__>
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $queries.pickplayer.data;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <PlayerPickerRow
                    data-plasmic-name={"playerPickerRow"}
                    data-plasmic-override={overrides.playerPickerRow}
                    className={classNames(
                      "__wab_instance",
                      sty.playerPickerRow
                    )}
                    fsyp={(() => {
                      try {
                        return currentItem.FSYP;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    key={currentIndex}
                    name={(() => {
                      try {
                        return currentItem.name;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    position={(() => {
                      try {
                        return currentItem.position;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    price={(() => {
                      try {
                        return currentItem.market_value;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  />
                );
              })}
            </Stack__>
          </div>
          <SideBarMyTeam
            data-plasmic-name={"sideBarMyTeam"}
            data-plasmic-override={overrides.sideBarMyTeam}
            className={classNames("__wab_instance", sty.sideBarMyTeam)}
          />

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbar",
    "userteamNavbar",
    "columns",
    "_532",
    "button",
    "goa",
    "avatarPlayer",
    "def",
    "avatarPlayer2",
    "mid",
    "avatarPlayer3",
    "str",
    "avatarPlayer4",
    "soccerPlaceMens2",
    "playerPickerRow",
    "sideBarMyTeam",
    "footer"
  ],
  navbar: ["navbar"],
  userteamNavbar: ["userteamNavbar"],
  columns: [
    "columns",
    "_532",
    "button",
    "goa",
    "avatarPlayer",
    "def",
    "avatarPlayer2",
    "mid",
    "avatarPlayer3",
    "str",
    "avatarPlayer4",
    "soccerPlaceMens2",
    "playerPickerRow"
  ],
  _532: ["_532", "button"],
  button: ["button"],
  goa: ["goa", "avatarPlayer"],
  avatarPlayer: ["avatarPlayer"],
  def: ["def", "avatarPlayer2"],
  avatarPlayer2: ["avatarPlayer2"],
  mid: ["mid", "avatarPlayer3"],
  avatarPlayer3: ["avatarPlayer3"],
  str: ["str", "avatarPlayer4"],
  avatarPlayer4: ["avatarPlayer4"],
  soccerPlaceMens2: ["soccerPlaceMens2"],
  playerPickerRow: ["playerPickerRow"],
  sideBarMyTeam: ["sideBarMyTeam"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbar: typeof Navbar;
  userteamNavbar: typeof UserteamNavbar;
  columns: "div";
  _532: typeof AntdDropdown;
  button: typeof AntdButton;
  goa: "div";
  avatarPlayer: typeof AvatarPlayer;
  def: "div";
  avatarPlayer2: typeof AvatarPlayer;
  mid: "div";
  avatarPlayer3: typeof AvatarPlayer;
  str: "div";
  avatarPlayer4: typeof AvatarPlayer;
  soccerPlaceMens2: typeof SoccerPlaceMens2;
  playerPickerRow: typeof PlayerPickerRow;
  sideBarMyTeam: typeof SideBarMyTeam;
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTeams__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTeams__VariantsArgs;
    args?: PlasmicTeams__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTeams__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicTeams__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicTeams__ArgProps,
          internalVariantPropNames: PlasmicTeams__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTeams__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTeams";
  } else {
    func.displayName = `PlasmicTeams.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const PageGuard: React.FC<P> = props => (
    <PlasmicPageGuard__
      minRole={"ead2b235-73a3-4579-b15a-7fc91fc1a23a"}
      appId={"qrPZwqtrqWM4S9b4djCj1H"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={false}
    >
      <WrappedComponent {...props} />
    </PlasmicPageGuard__>
  );

  return PageGuard;
}

export const PlasmicTeams = Object.assign(
  // Top-level PlasmicTeams renders the root element
  withPlasmicPageGuard(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    userteamNavbar: makeNodeComponent("userteamNavbar"),
    columns: makeNodeComponent("columns"),
    _532: makeNodeComponent("_532"),
    button: makeNodeComponent("button"),
    goa: makeNodeComponent("goa"),
    avatarPlayer: makeNodeComponent("avatarPlayer"),
    def: makeNodeComponent("def"),
    avatarPlayer2: makeNodeComponent("avatarPlayer2"),
    mid: makeNodeComponent("mid"),
    avatarPlayer3: makeNodeComponent("avatarPlayer3"),
    str: makeNodeComponent("str"),
    avatarPlayer4: makeNodeComponent("avatarPlayer4"),
    soccerPlaceMens2: makeNodeComponent("soccerPlaceMens2"),
    playerPickerRow: makeNodeComponent("playerPickerRow"),
    sideBarMyTeam: makeNodeComponent("sideBarMyTeam"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicTeams
    internalVariantProps: PlasmicTeams__VariantProps,
    internalArgProps: PlasmicTeams__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicTeams;
/* prettier-ignore-end */
