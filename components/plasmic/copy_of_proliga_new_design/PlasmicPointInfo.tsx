// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qrPZwqtrqWM4S9b4djCj1H
// Component: Up53sXl3JeW5

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: qrPZwqtrqWM4S9b4djCj1H/projectcss
import sty from "./PlasmicPointInfo.module.css"; // plasmic-import: Up53sXl3JeW5/css

createPlasmicElementProxy;

export type PlasmicPointInfo__VariantMembers = {};
export type PlasmicPointInfo__VariantsArgs = {};
type VariantPropType = keyof PlasmicPointInfo__VariantsArgs;
export const PlasmicPointInfo__VariantProps = new Array<VariantPropType>();

export type PlasmicPointInfo__ArgsType = {
  ochko?: string;
};
type ArgPropType = keyof PlasmicPointInfo__ArgsType;
export const PlasmicPointInfo__ArgProps = new Array<ArgPropType>("ochko");

export type PlasmicPointInfo__OverridesType = {
  root?: Flex__<"div">;
  text?: Flex__<"div">;
  freeBox?: Flex__<"div">;
  goalAsist?: Flex__<"div">;
  missedPenalty?: Flex__<"div">;
  shutout?: Flex__<"div">;
  every2MissedGoals?: Flex__<"div">;
  goal?: Flex__<"div">;
  isLineup?: Flex__<"div">;
  isLineupMore60?: Flex__<"div">;
  redCard?: Flex__<"div">;
  yellowCard?: Flex__<"div">;
};

export interface DefaultPointInfoProps {
  ochko?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPointInfo__RenderFunc(props: {
  variants: PlasmicPointInfo__VariantsArgs;
  args: PlasmicPointInfo__ArgsType;
  overrides: PlasmicPointInfo__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          ochko: "6"
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const [isRootHover, triggerRootHoverProps] = useTrigger("useHover", {});
  const triggers = {
    hover_root: isRootHover
  };

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
      data-plasmic-trigger-props={[triggerRootHoverProps]}
    >
      <div
        data-plasmic-name={"text"}
        data-plasmic-override={overrides.text}
        className={classNames(projectcss.all, projectcss.__wab_text, sty.text)}
      >
        <React.Fragment>
          {(() => {
            try {
              return $props.ochko;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "";
              }
              throw e;
            }
          })()}
        </React.Fragment>
      </div>
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        {(
          triggers.hover_root
            ? (() => {
                try {
                  return true;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })()
            : true
        ) ? (
          <div
            data-plasmic-name={"goalAsist"}
            data-plasmic-override={overrides.goalAsist}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.goalAsist
            )}
          >
            {"Enter some text"}
          </div>
        ) : null}
        {(
          triggers.hover_root
            ? (() => {
                try {
                  return true;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })()
            : true
        ) ? (
          <div
            data-plasmic-name={"missedPenalty"}
            data-plasmic-override={overrides.missedPenalty}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.missedPenalty
            )}
          >
            {"Enter some text"}
          </div>
        ) : null}
        {(
          triggers.hover_root
            ? (() => {
                try {
                  return true;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })()
            : true
        ) ? (
          <div
            data-plasmic-name={"shutout"}
            data-plasmic-override={overrides.shutout}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.shutout
            )}
          >
            {"Enter some text"}
          </div>
        ) : null}
        {(
          triggers.hover_root
            ? (() => {
                try {
                  return true;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })()
            : true
        ) ? (
          <div
            data-plasmic-name={"every2MissedGoals"}
            data-plasmic-override={overrides.every2MissedGoals}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.every2MissedGoals
            )}
          >
            {"Enter some text"}
          </div>
        ) : null}
        {(
          triggers.hover_root
            ? (() => {
                try {
                  return true;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })()
            : true
        ) ? (
          <div
            data-plasmic-name={"goal"}
            data-plasmic-override={overrides.goal}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.goal
            )}
          >
            {"Enter some text"}
          </div>
        ) : null}
        {(
          triggers.hover_root
            ? (() => {
                try {
                  return true;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })()
            : true
        ) ? (
          <div
            data-plasmic-name={"isLineup"}
            data-plasmic-override={overrides.isLineup}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.isLineup
            )}
          >
            {"Enter some text"}
          </div>
        ) : null}
        {(
          triggers.hover_root
            ? (() => {
                try {
                  return true;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })()
            : true
        ) ? (
          <div
            data-plasmic-name={"isLineupMore60"}
            data-plasmic-override={overrides.isLineupMore60}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.isLineupMore60
            )}
          >
            {"Enter some text"}
          </div>
        ) : null}
        {(
          triggers.hover_root
            ? (() => {
                try {
                  return true;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })()
            : true
        ) ? (
          <div
            data-plasmic-name={"redCard"}
            data-plasmic-override={overrides.redCard}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.redCard
            )}
          >
            {"Enter some text"}
          </div>
        ) : null}
        {(
          triggers.hover_root
            ? (() => {
                try {
                  return true;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })()
            : true
        ) ? (
          <div
            data-plasmic-name={"yellowCard"}
            data-plasmic-override={overrides.yellowCard}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.yellowCard
            )}
          >
            {"Enter some text"}
          </div>
        ) : null}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "text",
    "freeBox",
    "goalAsist",
    "missedPenalty",
    "shutout",
    "every2MissedGoals",
    "goal",
    "isLineup",
    "isLineupMore60",
    "redCard",
    "yellowCard"
  ],
  text: ["text"],
  freeBox: [
    "freeBox",
    "goalAsist",
    "missedPenalty",
    "shutout",
    "every2MissedGoals",
    "goal",
    "isLineup",
    "isLineupMore60",
    "redCard",
    "yellowCard"
  ],
  goalAsist: ["goalAsist"],
  missedPenalty: ["missedPenalty"],
  shutout: ["shutout"],
  every2MissedGoals: ["every2MissedGoals"],
  goal: ["goal"],
  isLineup: ["isLineup"],
  isLineupMore60: ["isLineupMore60"],
  redCard: ["redCard"],
  yellowCard: ["yellowCard"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  text: "div";
  freeBox: "div";
  goalAsist: "div";
  missedPenalty: "div";
  shutout: "div";
  every2MissedGoals: "div";
  goal: "div";
  isLineup: "div";
  isLineupMore60: "div";
  redCard: "div";
  yellowCard: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPointInfo__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPointInfo__VariantsArgs;
    args?: PlasmicPointInfo__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPointInfo__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicPointInfo__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPointInfo__ArgProps,
          internalVariantPropNames: PlasmicPointInfo__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPointInfo__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPointInfo";
  } else {
    func.displayName = `PlasmicPointInfo.${nodeName}`;
  }
  return func;
}

export const PlasmicPointInfo = Object.assign(
  // Top-level PlasmicPointInfo renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),
    freeBox: makeNodeComponent("freeBox"),
    goalAsist: makeNodeComponent("goalAsist"),
    missedPenalty: makeNodeComponent("missedPenalty"),
    shutout: makeNodeComponent("shutout"),
    every2MissedGoals: makeNodeComponent("every2MissedGoals"),
    goal: makeNodeComponent("goal"),
    isLineup: makeNodeComponent("isLineup"),
    isLineupMore60: makeNodeComponent("isLineupMore60"),
    redCard: makeNodeComponent("redCard"),
    yellowCard: makeNodeComponent("yellowCard"),

    // Metadata about props expected for PlasmicPointInfo
    internalVariantProps: PlasmicPointInfo__VariantProps,
    internalArgProps: PlasmicPointInfo__ArgProps
  }
);

export default PlasmicPointInfo;
/* prettier-ignore-end */
