// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qrPZwqtrqWM4S9b4djCj1H
// Component: yGPG6cDZoz2b

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import Navbar from "../../Navbar"; // plasmic-import: j_koFSvK1RER/component
import ShowteamNavbar from "../../ShowteamNavbar"; // plasmic-import: xHwS06ZerIoO/component
import UserteamNavbar from "../../UserteamNavbar"; // plasmic-import: yP6GdWiKL8XJ/component
import { TabsContainer } from "@plasmicpkgs/plasmic-tabs";
import { TabButton } from "@plasmicpkgs/plasmic-tabs";
import Button from "../../Button"; // plasmic-import: lBHNzts6tFyj/component
import { TabContent } from "@plasmicpkgs/plasmic-tabs";
import AvatarPlayerShowScore from "../../AvatarPlayerShowScore"; // plasmic-import: IigZUWrCtPw2/component
import SoccerPlaceMens2 from "../../SoccerPlaceMens2"; // plasmic-import: w81G4mUA-VvW/component
import AvatarPlayer from "../../AvatarPlayer"; // plasmic-import: nLFZBWuqWsMB/component
import TextInput from "../../TextInput"; // plasmic-import: 1UJD2btGUkCV/component
import { TabUnderline } from "@plasmicpkgs/plasmic-tabs";
import PlayerPicker from "../../PlayerPicker"; // plasmic-import: -eDXHzfdIeHq/component
import { AntdPagination } from "@plasmicpkgs/antd5/skinny/registerPagination";
import { paginationHelpers as AntdPagination_Helpers } from "@plasmicpkgs/antd5/skinny/registerPagination";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: qrPZwqtrqWM4S9b4djCj1H/projectcss
import sty from "./PlasmicShowTeam.module.css"; // plasmic-import: yGPG6cDZoz2b/css

import ChecksvgIcon from "../plasmic_tabs/icons/PlasmicIcon__Checksvg"; // plasmic-import: zq2s7N0xWucT/icon
import IconIcon from "../plasmic_tabs/icons/PlasmicIcon__Icon"; // plasmic-import: 8K40faRNhuCj/icon
import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: DJCZ30FSSW4V/icon
import ChecksvgIcon2 from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: wUfM8ozzkHkf/icon

createPlasmicElementProxy;

export type PlasmicShowTeam__VariantMembers = {};
export type PlasmicShowTeam__VariantsArgs = {};
type VariantPropType = keyof PlasmicShowTeam__VariantsArgs;
export const PlasmicShowTeam__VariantProps = new Array<VariantPropType>();

export type PlasmicShowTeam__ArgsType = {};
type ArgPropType = keyof PlasmicShowTeam__ArgsType;
export const PlasmicShowTeam__ArgProps = new Array<ArgPropType>();

export type PlasmicShowTeam__OverridesType = {
  root?: Flex__<"div">;
  navbar?: Flex__<typeof Navbar>;
  showteamNavbar?: Flex__<typeof ShowteamNavbar>;
  userteamNavbar?: Flex__<typeof UserteamNavbar>;
  transferVisibility?: Flex__<"div">;
  showScore?: Flex__<"div">;
  goa?: Flex__<"div">;
  def?: Flex__<"div">;
  mid?: Flex__<"div">;
  str?: Flex__<"div">;
  h3?: Flex__<"h3">;
  transferTourVisibility?: Flex__<"div">;
  transferTour?: Flex__<"div">;
  goa2?: Flex__<"div">;
  def2?: Flex__<"div">;
  mid2?: Flex__<"div">;
  str2?: Flex__<"div">;
  textInput?: Flex__<typeof TextInput>;
  tabUnderline?: Flex__<typeof TabUnderline>;
  playerPicker?: Flex__<typeof PlayerPicker>;
  paginationAll?: Flex__<typeof AntdPagination>;
};

export interface DefaultShowTeamProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicShowTeam__RenderFunc(props: {
  variants: PlasmicShowTeam__VariantsArgs;
  args: PlasmicShowTeam__ArgsType;
  overrides: PlasmicShowTeam__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "userId",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return currentUser.customProperties.response[0].id;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "tourId",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.toursList.data.response[0].tour_id;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "textInput[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "paginationAll[].currentPage",
        type: "private",
        variableType: "number",

        onMutate: generateOnMutateForSpec("currentPage", AntdPagination_Helpers)
      },
      {
        path: "paginationAll[].pageSize",
        type: "private",
        variableType: "number",

        onMutate: generateOnMutateForSpec("pageSize", AntdPagination_Helpers)
      },
      {
        path: "paginationAll[].startIndex",
        type: "private",
        variableType: "number",

        onMutate: generateOnMutateForSpec("startIndex", AntdPagination_Helpers)
      },
      {
        path: "paginationAll[].endIndex",
        type: "private",
        variableType: "number",

        onMutate: generateOnMutateForSpec("endIndex", AntdPagination_Helpers)
      },
      {
        path: "transfer",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "tourIndex",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    query: usePlasmicDataOp(() => {
      return {
        sourceId: "vQtRPuFArSfh43vUmgx2PS",
        opId: "2781730c-de7d-461a-a68d-81feaa19d26d",
        userArgs: {
          params: [$ctx.params.id, $state.userId, $ctx.params.comp_id]
        },
        cacheKey: `plasmic.$.${(() => {
          try {
            return "getOne";
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return "";
            }
            throw e;
          }
        })()}.$.2781730c-de7d-461a-a68d-81feaa19d26d.$.`,
        invalidatedKeys: null,
        roleId: "ead2b235-73a3-4579-b15a-7fc91fc1a23a"
      };
    }),
    toursList: usePlasmicDataOp(() => {
      return {
        sourceId: "vQtRPuFArSfh43vUmgx2PS",
        opId: "9e0458f7-b1d9-4c6e-940f-b451a5fe985f",
        userArgs: {
          params: [
            $queries.query.data.response[0].competition_id,
            $queries.query.data.response[0].id
          ]
        },
        cacheKey: `plasmic.$.9e0458f7-b1d9-4c6e-940f-b451a5fe985f.$.`,
        invalidatedKeys: null,
        roleId: "ead2b235-73a3-4579-b15a-7fc91fc1a23a"
      };
    }),
    teamPlayer: usePlasmicDataOp(() => {
      return {
        sourceId: "vQtRPuFArSfh43vUmgx2PS",
        opId: "cae4df92-ebfb-42a5-b579-1e78c3073afc",
        userArgs: {
          params: [$queries.query.data.response[0].id]
        },
        cacheKey: `plasmic.$.cae4df92-ebfb-42a5-b579-1e78c3073afc.$.`,
        invalidatedKeys: null,
        roleId: "ead2b235-73a3-4579-b15a-7fc91fc1a23a"
      };
    }),
    playerList: usePlasmicDataOp(() => {
      return {
        sourceId: "vQtRPuFArSfh43vUmgx2PS",
        opId: "964e5d91-2ac7-4881-8f97-120c019a3f7c",
        userArgs: {
          params: [$queries.query.data.response[0].competition_id]
        },
        cacheKey: `plasmic.$.964e5d91-2ac7-4881-8f97-120c019a3f7c.$.`,
        invalidatedKeys: null,
        roleId: "ead2b235-73a3-4579-b15a-7fc91fc1a23a"
      };
    }),
    playerPoint: usePlasmicDataOp(() => {
      return {
        sourceId: "vQtRPuFArSfh43vUmgx2PS",
        opId: "b2053019-9d88-4660-8813-ce7b57524fc8",
        userArgs: {
          params: [$state.tourId]
        },
        cacheKey: `plasmic.$.b2053019-9d88-4660-8813-ce7b57524fc8.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    teamPoint: usePlasmicDataOp(() => {
      return {
        sourceId: "vQtRPuFArSfh43vUmgx2PS",
        opId: "5a3eb4da-d85b-4560-b23e-f862ee58af48",
        userArgs: {
          params: [$queries.query.data.response[0].id, $state.tourId]
        },
        cacheKey: `plasmic.$.5a3eb4da-d85b-4560-b23e-f862ee58af48.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    everyplayerPoint: usePlasmicDataOp(() => {
      return {
        sourceId: "vQtRPuFArSfh43vUmgx2PS",
        opId: "d9cbe18a-dded-4c65-954f-affd7818da36",
        userArgs: {},
        cacheKey: `plasmic.$.d9cbe18a-dded-4c65-954f-affd7818da36.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    playerListTab: usePlasmicDataOp(() => {
      return {
        sourceId: "vQtRPuFArSfh43vUmgx2PS",
        opId: "8fd59fe6-48e2-47a2-8f56-5e96d8affc45",
        userArgs: {
          path: [
            $state.paginationAll[$state.tourIndex].pageSize,
            $state.paginationAll[$state.tourIndex].startIndex
          ],
          params: [$queries.query.data.response[0].competition_id]
        },
        cacheKey: `plasmic.$.8fd59fe6-48e2-47a2-8f56-5e96d8affc45.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    playerAllCount: usePlasmicDataOp(() => {
      return {
        sourceId: "vQtRPuFArSfh43vUmgx2PS",
        opId: "ee9c91bb-efc0-4837-bf0a-dd14852b5dcc",
        userArgs: {
          params: [$queries.query.data.response[0].competition_id]
        },
        cacheKey: `plasmic.$.ee9c91bb-efc0-4837-bf0a-dd14852b5dcc.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <Navbar
            data-plasmic-name={"navbar"}
            data-plasmic-override={overrides.navbar}
            className={classNames("__wab_instance", sty.navbar)}
          />

          <ShowteamNavbar
            data-plasmic-name={"showteamNavbar"}
            data-plasmic-override={overrides.showteamNavbar}
            className={classNames("__wab_instance", sty.showteamNavbar)}
          />

          <UserteamNavbar
            data-plasmic-name={"userteamNavbar"}
            data-plasmic-override={overrides.userteamNavbar}
            className={classNames("__wab_instance", sty.userteamNavbar)}
            onlickEditTeam={async event => {
              const $steps = {};

              $steps["goToEditTeam"] = true
                ? (() => {
                    const actionArgs = {
                      destination: `/old/${(() => {
                        try {
                          return $queries.query.data.response[0].competition_id;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}/${(() => {
                        try {
                          return $queries.query.data.response[0].id;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}`
                    };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToEditTeam"] != null &&
                typeof $steps["goToEditTeam"] === "object" &&
                typeof $steps["goToEditTeam"].then === "function"
              ) {
                $steps["goToEditTeam"] = await $steps["goToEditTeam"];
              }
            }}
            teamBalance={(() => {
              try {
                return $queries.query.data.response[0].balance;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return 0;
                }
                throw e;
              }
            })()}
          />

          <div className={classNames(projectcss.all, sty.freeBox__rjU8R)}>
            <TabsContainer
              className={classNames("__wab_instance", sty.tabsContainer___7CtU)}
              initialKey={"tab0"}
              mountMode={"mountAllEagerly"}
              previewAll={false}
            >
              <DataCtxReader__>
                {$ctx => (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__wthSm)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__rLv3)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__pTu2J
                        )}
                      >
                        {(_par =>
                          !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                          (() => {
                            try {
                              return $queries.toursList.data.response;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        ).map((__plasmic_item_0, __plasmic_idx_0) => {
                          const currentItem = __plasmic_item_0;
                          const currentIndex = __plasmic_idx_0;
                          return (
                            <TabButton
                              className={classNames(
                                "__wab_instance",
                                sty.tabButton__dgsEn
                              )}
                              key={currentIndex}
                              tabKey={(() => {
                                try {
                                  return "tab" + currentIndex;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                            >
                              <PlasmicLink__
                                className={classNames(
                                  projectcss.all,
                                  projectcss.a,
                                  sty.link__b7D32
                                )}
                                component={Link}
                                platform={"nextjs"}
                              >
                                <Button
                                  className={classNames(
                                    "__wab_instance",
                                    sty.button__iS8NV
                                  )}
                                  onClick={async event => {
                                    const $steps = {};

                                    $steps["updateTourId"] =
                                      $queries.query.data.response[0]
                                        .created_at < currentItem.tour_deadline
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: ["tourId"]
                                              },
                                              operation: 0,
                                              value: currentItem.tour_id
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                    if (
                                      $steps["updateTourId"] != null &&
                                      typeof $steps["updateTourId"] ===
                                        "object" &&
                                      typeof $steps["updateTourId"].then ===
                                        "function"
                                    ) {
                                      $steps["updateTourId"] = await $steps[
                                        "updateTourId"
                                      ];
                                    }

                                    $steps["updateTourIndex"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["tourIndex"]
                                            },
                                            operation: 0,
                                            value: currentIndex
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateTourIndex"] != null &&
                                      typeof $steps["updateTourIndex"] ===
                                        "object" &&
                                      typeof $steps["updateTourIndex"].then ===
                                        "function"
                                    ) {
                                      $steps["updateTourIndex"] = await $steps[
                                        "updateTourIndex"
                                      ];
                                    }

                                    $steps["updateTransfer"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["transfer"]
                                            },
                                            operation: 0,
                                            value: true
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateTransfer"] != null &&
                                      typeof $steps["updateTransfer"] ===
                                        "object" &&
                                      typeof $steps["updateTransfer"].then ===
                                        "function"
                                    ) {
                                      $steps["updateTransfer"] = await $steps[
                                        "updateTransfer"
                                      ];
                                    }
                                  }}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__pCmDq
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__jsV5S
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return (
                                              currentItem.tour_name + "-tur"
                                            );
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "Tab 1";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__ai51H
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return currentItem.tour_status;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                  </div>
                                </Button>
                              </PlasmicLink__>
                            </TabButton>
                          );
                        })}
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__w99Kz)}
                    >
                      {(() => {
                        try {
                          return true;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                        ? (_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            (() => {
                              try {
                                return $queries.toursList.data.response;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentItem = __plasmic_item_0;
                            const currentIndex = __plasmic_idx_0;
                            return (
                              <TabContent
                                className={classNames(
                                  "__wab_instance",
                                  sty.tabContent__o0CC5
                                )}
                                key={currentIndex}
                                tabKey={(() => {
                                  try {
                                    return "tab" + currentIndex;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                              >
                                {(() => {
                                  try {
                                    return (
                                      currentItem.tour_status === "not_started"
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return true;
                                    }
                                    throw e;
                                  }
                                })() ? (
                                  <Stack__
                                    as={"div"}
                                    data-plasmic-name={"transferVisibility"}
                                    data-plasmic-override={
                                      overrides.transferVisibility
                                    }
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.transferVisibility
                                    )}
                                  >
                                    <PlasmicLink__
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.a,
                                        projectcss.__wab_text,
                                        sty.link___3Zm0L
                                      )}
                                      component={Link}
                                      onClick={async event => {
                                        const $steps = {};

                                        $steps["updateTransfer"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: ["transfer"]
                                                },
                                                operation: 0,
                                                value: false
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["updateTransfer"] != null &&
                                          typeof $steps["updateTransfer"] ===
                                            "object" &&
                                          typeof $steps["updateTransfer"]
                                            .then === "function"
                                        ) {
                                          $steps["updateTransfer"] =
                                            await $steps["updateTransfer"];
                                        }
                                      }}
                                      platform={"nextjs"}
                                    >
                                      {"Transfer"}
                                    </PlasmicLink__>
                                    <PlasmicLink__
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.a,
                                        projectcss.__wab_text,
                                        sty.link__m17Yy
                                      )}
                                      component={Link}
                                      onClick={async event => {
                                        const $steps = {};

                                        $steps["updateTransfer"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: ["transfer"]
                                                },
                                                operation: 0,
                                                value: true
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["updateTransfer"] != null &&
                                          typeof $steps["updateTransfer"] ===
                                            "object" &&
                                          typeof $steps["updateTransfer"]
                                            .then === "function"
                                        ) {
                                          $steps["updateTransfer"] =
                                            await $steps["updateTransfer"];
                                        }
                                      }}
                                      platform={"nextjs"}
                                    >
                                      {"Ochko"}
                                    </PlasmicLink__>
                                  </Stack__>
                                ) : null}
                                {(() => {
                                  try {
                                    return $state.transfer === true;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return true;
                                    }
                                    throw e;
                                  }
                                })() ? (
                                  <div
                                    data-plasmic-name={"showScore"}
                                    data-plasmic-override={overrides.showScore}
                                    className={classNames(
                                      projectcss.all,
                                      sty.showScore
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.column__ftfDz
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__oFk0R
                                        )}
                                      >
                                        <div
                                          data-plasmic-name={"goa"}
                                          data-plasmic-override={overrides.goa}
                                          className={classNames(
                                            projectcss.all,
                                            sty.goa
                                          )}
                                        >
                                          {(_par =>
                                            !_par
                                              ? []
                                              : Array.isArray(_par)
                                              ? _par
                                              : [_par])(
                                            (() => {
                                              try {
                                                return $queries.teamPlayer.data.response.filter(
                                                  x => x.position === "GOA"
                                                );
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return [];
                                                }
                                                throw e;
                                              }
                                            })()
                                          ).map(
                                            (
                                              __plasmic_item_1,
                                              __plasmic_idx_1
                                            ) => {
                                              const currentItem =
                                                __plasmic_item_1;
                                              const currentIndex =
                                                __plasmic_idx_1;
                                              return (
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    sty.freeBox__zqKiv
                                                  )}
                                                  key={currentIndex}
                                                >
                                                  <AvatarPlayerShowScore
                                                    capitanVisibility={(() => {
                                                      try {
                                                        return (
                                                          currentItem.is_captain ===
                                                          true
                                                        );
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return false;
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                    className={classNames(
                                                      "__wab_instance",
                                                      sty.avatarPlayerShowScore__b7KeO
                                                    )}
                                                    image={(() => {
                                                      try {
                                                        return $queries.playerList.data.response.find(
                                                          x =>
                                                            x.id ===
                                                            currentItem.player_id
                                                        ).image;
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return undefined;
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                    name={(() => {
                                                      try {
                                                        return $queries.playerList.data.response.find(
                                                          x =>
                                                            x.id ===
                                                            currentItem.player_id
                                                        ).name;
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return undefined;
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                    ochko={(() => {
                                                      try {
                                                        return $queries.playerPoint.data.response.find(
                                                          x =>
                                                            x.player_id ===
                                                            currentItem.player_id
                                                        ).point;
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return undefined;
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                  />
                                                </div>
                                              );
                                            }
                                          )}
                                        </div>
                                        <Stack__
                                          as={"div"}
                                          data-plasmic-name={"def"}
                                          data-plasmic-override={overrides.def}
                                          hasGap={true}
                                          className={classNames(
                                            projectcss.all,
                                            sty.def
                                          )}
                                        >
                                          {(_par =>
                                            !_par
                                              ? []
                                              : Array.isArray(_par)
                                              ? _par
                                              : [_par])(
                                            (() => {
                                              try {
                                                return $queries.teamPlayer.data.response.filter(
                                                  x => x.position === "DEF"
                                                );
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return [];
                                                }
                                                throw e;
                                              }
                                            })()
                                          ).map(
                                            (
                                              __plasmic_item_1,
                                              __plasmic_idx_1
                                            ) => {
                                              const currentItem =
                                                __plasmic_item_1;
                                              const currentIndex =
                                                __plasmic_idx_1;
                                              return (
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    sty.freeBox__klVxC
                                                  )}
                                                  key={currentIndex}
                                                >
                                                  <AvatarPlayerShowScore
                                                    capitanVisibility={(() => {
                                                      try {
                                                        return (
                                                          currentItem.is_captain ===
                                                          true
                                                        );
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return false;
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                    className={classNames(
                                                      "__wab_instance",
                                                      sty.avatarPlayerShowScore___60K6M
                                                    )}
                                                    image={(() => {
                                                      try {
                                                        return $queries.playerList.data.response.find(
                                                          x =>
                                                            x.id ===
                                                            currentItem.player_id
                                                        ).image;
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return undefined;
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                    name={(() => {
                                                      try {
                                                        return $queries.playerList.data.response.find(
                                                          x =>
                                                            x.id ===
                                                            currentItem.player_id
                                                        ).name;
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return undefined;
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                    ochko={(() => {
                                                      try {
                                                        return $queries.playerPoint.data.response.find(
                                                          x =>
                                                            x.player_id ===
                                                            currentItem.player_id
                                                        ).point;
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return undefined;
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                  />
                                                </div>
                                              );
                                            }
                                          )}
                                        </Stack__>
                                        <Stack__
                                          as={"div"}
                                          data-plasmic-name={"mid"}
                                          data-plasmic-override={overrides.mid}
                                          hasGap={true}
                                          className={classNames(
                                            projectcss.all,
                                            sty.mid
                                          )}
                                        >
                                          {(_par =>
                                            !_par
                                              ? []
                                              : Array.isArray(_par)
                                              ? _par
                                              : [_par])(
                                            (() => {
                                              try {
                                                return $queries.teamPlayer.data.response.filter(
                                                  x => x.position === "MID"
                                                );
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return [];
                                                }
                                                throw e;
                                              }
                                            })()
                                          ).map(
                                            (
                                              __plasmic_item_1,
                                              __plasmic_idx_1
                                            ) => {
                                              const currentItem =
                                                __plasmic_item_1;
                                              const currentIndex =
                                                __plasmic_idx_1;
                                              return (
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    sty.freeBox__uQJoy
                                                  )}
                                                  key={currentIndex}
                                                >
                                                  <AvatarPlayerShowScore
                                                    capitanVisibility={(() => {
                                                      try {
                                                        return (
                                                          currentItem.is_captain ===
                                                          true
                                                        );
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return false;
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                    className={classNames(
                                                      "__wab_instance",
                                                      sty.avatarPlayerShowScore__aAfAf
                                                    )}
                                                    image={(() => {
                                                      try {
                                                        return $queries.playerList.data.response.find(
                                                          x =>
                                                            x.id ===
                                                            currentItem.player_id
                                                        ).image;
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return undefined;
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                    name={(() => {
                                                      try {
                                                        return $queries.playerList.data.response.find(
                                                          x =>
                                                            x.id ===
                                                            currentItem.player_id
                                                        ).name;
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return undefined;
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                    ochko={(() => {
                                                      try {
                                                        return $queries.playerPoint.data.response.find(
                                                          x =>
                                                            x.player_id ===
                                                            currentItem.player_id
                                                        ).point;
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return undefined;
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                  />
                                                </div>
                                              );
                                            }
                                          )}
                                        </Stack__>
                                        <Stack__
                                          as={"div"}
                                          data-plasmic-name={"str"}
                                          data-plasmic-override={overrides.str}
                                          hasGap={true}
                                          className={classNames(
                                            projectcss.all,
                                            sty.str
                                          )}
                                        >
                                          {(_par =>
                                            !_par
                                              ? []
                                              : Array.isArray(_par)
                                              ? _par
                                              : [_par])(
                                            (() => {
                                              try {
                                                return $queries.teamPlayer.data.response.filter(
                                                  x => x.position === "STR"
                                                );
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return [];
                                                }
                                                throw e;
                                              }
                                            })()
                                          ).map(
                                            (
                                              __plasmic_item_1,
                                              __plasmic_idx_1
                                            ) => {
                                              const currentItem =
                                                __plasmic_item_1;
                                              const currentIndex =
                                                __plasmic_idx_1;
                                              return (
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    sty.freeBox__gcxaU
                                                  )}
                                                  key={currentIndex}
                                                >
                                                  <AvatarPlayerShowScore
                                                    capitanVisibility={(() => {
                                                      try {
                                                        return (
                                                          currentItem.is_captain ===
                                                          true
                                                        );
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return false;
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                    className={classNames(
                                                      "__wab_instance",
                                                      sty.avatarPlayerShowScore___4BPEn
                                                    )}
                                                    image={(() => {
                                                      try {
                                                        return $queries.playerList.data.response.find(
                                                          x =>
                                                            x.id ===
                                                            currentItem.player_id
                                                        ).image;
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return undefined;
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                    name={(() => {
                                                      try {
                                                        return $queries.playerList.data.response.find(
                                                          x =>
                                                            x.id ===
                                                            currentItem.player_id
                                                        ).name;
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return undefined;
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                    ochko={(() => {
                                                      try {
                                                        return $queries.playerPoint.data.response.find(
                                                          x =>
                                                            x.player_id ===
                                                            currentItem.player_id
                                                        ).point;
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return undefined;
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                  />
                                                </div>
                                              );
                                            }
                                          )}
                                        </Stack__>
                                        <SoccerPlaceMens2
                                          className={classNames(
                                            "__wab_instance",
                                            sty.soccerPlaceMens2__mKkDo
                                          )}
                                        />
                                      </div>
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.column__qMuMm
                                      )}
                                    >
                                      <h1
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.h1,
                                          projectcss.__wab_text,
                                          sty.h1__wzV0E
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return (
                                                currentItem.tour_name + "-Tur"
                                              );
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </h1>
                                      <h3
                                        data-plasmic-name={"h3"}
                                        data-plasmic-override={overrides.h3}
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.h3,
                                          projectcss.__wab_text,
                                          sty.h3
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return undefined;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </h3>
                                      <Stack__
                                        as={"div"}
                                        hasGap={true}
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox___4Rf2P
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__cd1HE
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return "Turdagi ochko";
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                        <h1
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.h1,
                                            projectcss.__wab_text,
                                            sty.h1__wvvoS
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return $queries.teamPoint.data
                                                  .response[0].point;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </h1>
                                      </Stack__>
                                    </div>
                                  </div>
                                ) : null}
                                {(() => {
                                  try {
                                    return (
                                      currentItem.tour_status === "not_started"
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return true;
                                    }
                                    throw e;
                                  }
                                })() ? (
                                  <div
                                    data-plasmic-name={"transferTourVisibility"}
                                    data-plasmic-override={
                                      overrides.transferTourVisibility
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.transferTourVisibility
                                    )}
                                  >
                                    {(() => {
                                      try {
                                        return $state.transfer === false;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return true;
                                        }
                                        throw e;
                                      }
                                    })() ? (
                                      <div
                                        data-plasmic-name={"transferTour"}
                                        data-plasmic-override={
                                          overrides.transferTour
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.transferTour
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.column__kdiig
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              sty.freeBox__fCOwU
                                            )}
                                          >
                                            <div
                                              data-plasmic-name={"goa2"}
                                              data-plasmic-override={
                                                overrides.goa2
                                              }
                                              className={classNames(
                                                projectcss.all,
                                                sty.goa2
                                              )}
                                            >
                                              {(_par =>
                                                !_par
                                                  ? []
                                                  : Array.isArray(_par)
                                                  ? _par
                                                  : [_par])(
                                                (() => {
                                                  try {
                                                    return $queries.teamPlayer.data.response.filter(
                                                      x => x.position === "GOA"
                                                    );
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return [];
                                                    }
                                                    throw e;
                                                  }
                                                })()
                                              ).map(
                                                (
                                                  __plasmic_item_1,
                                                  __plasmic_idx_1
                                                ) => {
                                                  const currentItem =
                                                    __plasmic_item_1;
                                                  const currentIndex =
                                                    __plasmic_idx_1;
                                                  return (
                                                    <div
                                                      className={classNames(
                                                        projectcss.all,
                                                        sty.freeBox__e5CKk
                                                      )}
                                                      key={currentIndex}
                                                    >
                                                      <AvatarPlayer
                                                        className={classNames(
                                                          "__wab_instance",
                                                          sty.avatarPlayer___2P8Pt
                                                        )}
                                                      />
                                                    </div>
                                                  );
                                                }
                                              )}
                                            </div>
                                            <Stack__
                                              as={"div"}
                                              data-plasmic-name={"def2"}
                                              data-plasmic-override={
                                                overrides.def2
                                              }
                                              hasGap={true}
                                              className={classNames(
                                                projectcss.all,
                                                sty.def2
                                              )}
                                            >
                                              {(_par =>
                                                !_par
                                                  ? []
                                                  : Array.isArray(_par)
                                                  ? _par
                                                  : [_par])(
                                                (() => {
                                                  try {
                                                    return $queries.teamPlayer.data.response.filter(
                                                      x => x.position === "DEF"
                                                    );
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return [];
                                                    }
                                                    throw e;
                                                  }
                                                })()
                                              ).map(
                                                (
                                                  __plasmic_item_1,
                                                  __plasmic_idx_1
                                                ) => {
                                                  const currentItem =
                                                    __plasmic_item_1;
                                                  const currentIndex =
                                                    __plasmic_idx_1;
                                                  return (
                                                    <div
                                                      className={classNames(
                                                        projectcss.all,
                                                        sty.freeBox__jlpp8
                                                      )}
                                                      key={currentIndex}
                                                    >
                                                      <AvatarPlayer
                                                        className={classNames(
                                                          "__wab_instance",
                                                          sty.avatarPlayer__ilRrq
                                                        )}
                                                      />
                                                    </div>
                                                  );
                                                }
                                              )}
                                            </Stack__>
                                            <Stack__
                                              as={"div"}
                                              data-plasmic-name={"mid2"}
                                              data-plasmic-override={
                                                overrides.mid2
                                              }
                                              hasGap={true}
                                              className={classNames(
                                                projectcss.all,
                                                sty.mid2
                                              )}
                                            >
                                              {(_par =>
                                                !_par
                                                  ? []
                                                  : Array.isArray(_par)
                                                  ? _par
                                                  : [_par])(
                                                (() => {
                                                  try {
                                                    return $queries.teamPlayer.data.response.filter(
                                                      x => x.position === "MID"
                                                    );
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return [];
                                                    }
                                                    throw e;
                                                  }
                                                })()
                                              ).map(
                                                (
                                                  __plasmic_item_1,
                                                  __plasmic_idx_1
                                                ) => {
                                                  const currentItem =
                                                    __plasmic_item_1;
                                                  const currentIndex =
                                                    __plasmic_idx_1;
                                                  return (
                                                    <div
                                                      className={classNames(
                                                        projectcss.all,
                                                        sty.freeBox__hfzHe
                                                      )}
                                                      key={currentIndex}
                                                    >
                                                      <AvatarPlayer
                                                        className={classNames(
                                                          "__wab_instance",
                                                          sty.avatarPlayer__oFtfY
                                                        )}
                                                      />
                                                    </div>
                                                  );
                                                }
                                              )}
                                            </Stack__>
                                            <Stack__
                                              as={"div"}
                                              data-plasmic-name={"str2"}
                                              data-plasmic-override={
                                                overrides.str2
                                              }
                                              hasGap={true}
                                              className={classNames(
                                                projectcss.all,
                                                sty.str2
                                              )}
                                            >
                                              {(_par =>
                                                !_par
                                                  ? []
                                                  : Array.isArray(_par)
                                                  ? _par
                                                  : [_par])(
                                                (() => {
                                                  try {
                                                    return $queries.teamPlayer.data.response.filter(
                                                      x => x.position === "STR"
                                                    );
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return [];
                                                    }
                                                    throw e;
                                                  }
                                                })()
                                              ).map(
                                                (
                                                  __plasmic_item_1,
                                                  __plasmic_idx_1
                                                ) => {
                                                  const currentItem =
                                                    __plasmic_item_1;
                                                  const currentIndex =
                                                    __plasmic_idx_1;
                                                  return (
                                                    <div
                                                      className={classNames(
                                                        projectcss.all,
                                                        sty.freeBox__ygPi
                                                      )}
                                                      key={currentIndex}
                                                    >
                                                      <AvatarPlayer
                                                        className={classNames(
                                                          "__wab_instance",
                                                          sty.avatarPlayer__j3Uqm
                                                        )}
                                                      />
                                                    </div>
                                                  );
                                                }
                                              )}
                                            </Stack__>
                                            <SoccerPlaceMens2
                                              className={classNames(
                                                "__wab_instance",
                                                sty.soccerPlaceMens2__tw2C7
                                              )}
                                            />
                                          </div>
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.column__boMEo
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              sty.freeBox__nfRyv
                                            )}
                                          >
                                            {(() => {
                                              const child$Props = {
                                                className: classNames(
                                                  "__wab_instance",
                                                  sty.textInput
                                                ),
                                                color: "dark",
                                                onChange: (...eventArgs) => {
                                                  generateStateOnChangeProp(
                                                    $state,
                                                    [
                                                      "textInput",
                                                      __plasmic_idx_0,
                                                      "value"
                                                    ]
                                                  )(
                                                    (e =>
                                                      e.target?.value).apply(
                                                      null,
                                                      eventArgs
                                                    )
                                                  );
                                                },
                                                placeholder:
                                                  "Ism bo'yicha izlash",
                                                showStartIcon: true,
                                                value:
                                                  generateStateValueProp(
                                                    $state,
                                                    [
                                                      "textInput",
                                                      __plasmic_idx_0,
                                                      "value"
                                                    ]
                                                  ) ?? ""
                                              };

                                              initializePlasmicStates(
                                                $state,
                                                [
                                                  {
                                                    name: "textInput[].value",
                                                    initFunc: ({
                                                      $props,
                                                      $state,
                                                      $queries
                                                    }) => ""
                                                  }
                                                ],
                                                [__plasmic_idx_0]
                                              );
                                              return (
                                                <TextInput
                                                  data-plasmic-name={
                                                    "textInput"
                                                  }
                                                  data-plasmic-override={
                                                    overrides.textInput
                                                  }
                                                  {...child$Props}
                                                />
                                              );
                                            })()}
                                            <TabsContainer
                                              className={classNames(
                                                "__wab_instance",
                                                sty.tabsContainer__rmJxz
                                              )}
                                              initialKey={"tab1"}
                                            >
                                              <DataCtxReader__>
                                                {$ctx => (
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      sty.freeBox___0Fmor
                                                    )}
                                                  >
                                                    <div
                                                      className={classNames(
                                                        projectcss.all,
                                                        sty.freeBox__mms9Z
                                                      )}
                                                    >
                                                      <TabButton
                                                        className={classNames(
                                                          "__wab_instance",
                                                          sty.tabButton__fkJ3V
                                                        )}
                                                        tabKey={"tab1"}
                                                      >
                                                        <Button>
                                                          <div
                                                            className={classNames(
                                                              projectcss.all,
                                                              projectcss.__wab_text,
                                                              sty.text___91PgP
                                                            )}
                                                          >
                                                            {"Hammasi"}
                                                          </div>
                                                        </Button>
                                                      </TabButton>
                                                      <TabButton
                                                        className={classNames(
                                                          "__wab_instance",
                                                          sty.tabButton__xhCS
                                                        )}
                                                        tabKey={"tab2"}
                                                      >
                                                        <Button>
                                                          <div
                                                            className={classNames(
                                                              projectcss.all,
                                                              projectcss.__wab_text,
                                                              sty.text__mxJeh
                                                            )}
                                                          >
                                                            {"Klublar"}
                                                          </div>
                                                        </Button>
                                                      </TabButton>
                                                      <TabUnderline
                                                        data-plasmic-name={
                                                          "tabUnderline"
                                                        }
                                                        data-plasmic-override={
                                                          overrides.tabUnderline
                                                        }
                                                        className={classNames(
                                                          "__wab_instance",
                                                          sty.tabUnderline
                                                        )}
                                                      />
                                                    </div>
                                                    <div
                                                      className={classNames(
                                                        projectcss.all,
                                                        sty.freeBox__waVbV
                                                      )}
                                                    >
                                                      <TabContent
                                                        className={classNames(
                                                          "__wab_instance",
                                                          sty.tabContent__ow61
                                                        )}
                                                        tabKey={"tab1"}
                                                      >
                                                        <Stack__
                                                          as={"div"}
                                                          hasGap={true}
                                                          className={classNames(
                                                            projectcss.all,
                                                            sty.freeBox__lokdJ
                                                          )}
                                                        >
                                                          {(_par =>
                                                            !_par
                                                              ? []
                                                              : Array.isArray(
                                                                  _par
                                                                )
                                                              ? _par
                                                              : [_par])(
                                                            (() => {
                                                              try {
                                                                return $queries
                                                                  .playerListTab
                                                                  .data
                                                                  .response;
                                                              } catch (e) {
                                                                if (
                                                                  e instanceof
                                                                    TypeError ||
                                                                  e?.plasmicType ===
                                                                    "PlasmicUndefinedDataError"
                                                                ) {
                                                                  return [];
                                                                }
                                                                throw e;
                                                              }
                                                            })()
                                                          ).map(
                                                            (
                                                              __plasmic_item_1,
                                                              __plasmic_idx_1
                                                            ) => {
                                                              const currentItem =
                                                                __plasmic_item_1;
                                                              const currentIndex =
                                                                __plasmic_idx_1;
                                                              return (
                                                                <PlayerPicker
                                                                  data-plasmic-name={
                                                                    "playerPicker"
                                                                  }
                                                                  data-plasmic-override={
                                                                    overrides.playerPicker
                                                                  }
                                                                  buttonVisibility={(() => {
                                                                    try {
                                                                      return $queries.teamPlayer.data.response.find(
                                                                        x =>
                                                                          x.player_id ===
                                                                          currentItem.id
                                                                      );
                                                                    } catch (e) {
                                                                      if (
                                                                        e instanceof
                                                                          TypeError ||
                                                                        e?.plasmicType ===
                                                                          "PlasmicUndefinedDataError"
                                                                      ) {
                                                                        return undefined;
                                                                      }
                                                                      throw e;
                                                                    }
                                                                  })()}
                                                                  checkPlayer={(() => {
                                                                    try {
                                                                      return $queries.teamPlayer.data.response
                                                                        .filter(
                                                                          x =>
                                                                            x.sold !=
                                                                            true
                                                                        )
                                                                        .find(
                                                                          x =>
                                                                            x.player_id ===
                                                                            currentItem.id
                                                                        );
                                                                    } catch (e) {
                                                                      if (
                                                                        e instanceof
                                                                          TypeError ||
                                                                        e?.plasmicType ===
                                                                          "PlasmicUndefinedDataError"
                                                                      ) {
                                                                        return undefined;
                                                                      }
                                                                      throw e;
                                                                    }
                                                                  })()}
                                                                  className={classNames(
                                                                    "__wab_instance",
                                                                    sty.playerPicker
                                                                  )}
                                                                  key={
                                                                    currentIndex
                                                                  }
                                                                  name={(() => {
                                                                    try {
                                                                      return currentItem.name;
                                                                    } catch (e) {
                                                                      if (
                                                                        e instanceof
                                                                          TypeError ||
                                                                        e?.plasmicType ===
                                                                          "PlasmicUndefinedDataError"
                                                                      ) {
                                                                        return undefined;
                                                                      }
                                                                      throw e;
                                                                    }
                                                                  })()}
                                                                  playerClubCount={(() => {
                                                                    try {
                                                                      return $queries.teamPlayer.data.response.filter(
                                                                        x =>
                                                                          x.club_id ===
                                                                          currentItem.club_id
                                                                      ).length;
                                                                    } catch (e) {
                                                                      if (
                                                                        e instanceof
                                                                          TypeError ||
                                                                        e?.plasmicType ===
                                                                          "PlasmicUndefinedDataError"
                                                                      ) {
                                                                        return 4;
                                                                      }
                                                                      throw e;
                                                                    }
                                                                  })()}
                                                                  playerPrice={(() => {
                                                                    try {
                                                                      return currentItem.price;
                                                                    } catch (e) {
                                                                      if (
                                                                        e instanceof
                                                                          TypeError ||
                                                                        e?.plasmicType ===
                                                                          "PlasmicUndefinedDataError"
                                                                      ) {
                                                                        return undefined;
                                                                      }
                                                                      throw e;
                                                                    }
                                                                  })()}
                                                                  point={(() => {
                                                                    try {
                                                                      return currentItem.ochko;
                                                                    } catch (e) {
                                                                      if (
                                                                        e instanceof
                                                                          TypeError ||
                                                                        e?.plasmicType ===
                                                                          "PlasmicUndefinedDataError"
                                                                      ) {
                                                                        return 88;
                                                                      }
                                                                      throw e;
                                                                    }
                                                                  })()}
                                                                  position={(() => {
                                                                    try {
                                                                      return currentItem.position;
                                                                    } catch (e) {
                                                                      if (
                                                                        e instanceof
                                                                          TypeError ||
                                                                        e?.plasmicType ===
                                                                          "PlasmicUndefinedDataError"
                                                                      ) {
                                                                        return undefined;
                                                                      }
                                                                      throw e;
                                                                    }
                                                                  })()}
                                                                  price={(() => {
                                                                    try {
                                                                      return currentItem.price;
                                                                    } catch (e) {
                                                                      if (
                                                                        e instanceof
                                                                          TypeError ||
                                                                        e?.plasmicType ===
                                                                          "PlasmicUndefinedDataError"
                                                                      ) {
                                                                        return 9;
                                                                      }
                                                                      throw e;
                                                                    }
                                                                  })()}
                                                                  teamBalance={(() => {
                                                                    try {
                                                                      return $queries
                                                                        .query
                                                                        .data
                                                                        .response[0]
                                                                        .balance;
                                                                    } catch (e) {
                                                                      if (
                                                                        e instanceof
                                                                          TypeError ||
                                                                        e?.plasmicType ===
                                                                          "PlasmicUndefinedDataError"
                                                                      ) {
                                                                        return 100;
                                                                      }
                                                                      throw e;
                                                                    }
                                                                  })()}
                                                                />
                                                              );
                                                            }
                                                          )}
                                                          {(() => {
                                                            const child$Props =
                                                              {
                                                                className:
                                                                  classNames(
                                                                    "__wab_instance",
                                                                    sty.paginationAll
                                                                  ),
                                                                current:
                                                                  generateStateValueProp(
                                                                    $state,
                                                                    [
                                                                      "paginationAll",
                                                                      __plasmic_idx_0,
                                                                      "currentPage"
                                                                    ]
                                                                  ),
                                                                defaultCurrent: 1,
                                                                defaultPageSize: 6,
                                                                onChange:
                                                                  async (
                                                                    ...eventArgs: any
                                                                  ) => {
                                                                    generateStateOnChangePropForCodeComponents(
                                                                      $state,
                                                                      "currentPage",
                                                                      [
                                                                        "paginationAll",
                                                                        __plasmic_idx_0,
                                                                        "currentPage"
                                                                      ],
                                                                      AntdPagination_Helpers
                                                                    ).apply(
                                                                      null,
                                                                      eventArgs
                                                                    );
                                                                    generateStateOnChangePropForCodeComponents(
                                                                      $state,
                                                                      "startIndex",
                                                                      [
                                                                        "paginationAll",
                                                                        __plasmic_idx_0,
                                                                        "startIndex"
                                                                      ],
                                                                      AntdPagination_Helpers
                                                                    ).apply(
                                                                      null,
                                                                      eventArgs
                                                                    );
                                                                    generateStateOnChangePropForCodeComponents(
                                                                      $state,
                                                                      "endIndex",
                                                                      [
                                                                        "paginationAll",
                                                                        __plasmic_idx_0,
                                                                        "endIndex"
                                                                      ],
                                                                      AntdPagination_Helpers
                                                                    ).apply(
                                                                      null,
                                                                      eventArgs
                                                                    );
                                                                  },
                                                                onShowSizeChange:
                                                                  generateStateOnChangePropForCodeComponents(
                                                                    $state,
                                                                    "pageSize",
                                                                    [
                                                                      "paginationAll",
                                                                      __plasmic_idx_0,
                                                                      "pageSize"
                                                                    ],
                                                                    AntdPagination_Helpers
                                                                  ),
                                                                pageSize:
                                                                  generateStateValueProp(
                                                                    $state,
                                                                    [
                                                                      "paginationAll",
                                                                      __plasmic_idx_0,
                                                                      "pageSize"
                                                                    ]
                                                                  ),
                                                                pageSizeOptions:
                                                                  [
                                                                    {
                                                                      pageSize: 10
                                                                    },
                                                                    {
                                                                      pageSize: 20
                                                                    },
                                                                    {
                                                                      pageSize: 50
                                                                    },
                                                                    {
                                                                      pageSize: 100
                                                                    }
                                                                  ],
                                                                total: (() => {
                                                                  try {
                                                                    return $queries
                                                                      .playerAllCount
                                                                      .data
                                                                      .response
                                                                      .length;
                                                                  } catch (e) {
                                                                    if (
                                                                      e instanceof
                                                                        TypeError ||
                                                                      e?.plasmicType ===
                                                                        "PlasmicUndefinedDataError"
                                                                    ) {
                                                                      return undefined;
                                                                    }
                                                                    throw e;
                                                                  }
                                                                })()
                                                              };
                                                            initializeCodeComponentStates(
                                                              $state,
                                                              [
                                                                {
                                                                  name: "currentPage",
                                                                  plasmicStateName:
                                                                    "paginationAll[].currentPage"
                                                                },
                                                                {
                                                                  name: "pageSize",
                                                                  plasmicStateName:
                                                                    "paginationAll[].pageSize"
                                                                },
                                                                {
                                                                  name: "startIndex",
                                                                  plasmicStateName:
                                                                    "paginationAll[].startIndex"
                                                                },
                                                                {
                                                                  name: "endIndex",
                                                                  plasmicStateName:
                                                                    "paginationAll[].endIndex"
                                                                }
                                                              ],
                                                              [__plasmic_idx_0],
                                                              AntdPagination_Helpers ??
                                                                {},
                                                              child$Props
                                                            );
                                                            initializePlasmicStates(
                                                              $state,
                                                              [
                                                                {
                                                                  name: "paginationAll[].currentPage",
                                                                  initFunc: ({
                                                                    $props,
                                                                    $state,
                                                                    $queries
                                                                  }) => 1
                                                                },
                                                                {
                                                                  name: "paginationAll[].pageSize",
                                                                  initFunc: ({
                                                                    $props,
                                                                    $state,
                                                                    $queries
                                                                  }) => 6
                                                                }
                                                              ],
                                                              [__plasmic_idx_0]
                                                            );
                                                            return (
                                                              <AntdPagination
                                                                data-plasmic-name={
                                                                  "paginationAll"
                                                                }
                                                                data-plasmic-override={
                                                                  overrides.paginationAll
                                                                }
                                                                {...child$Props}
                                                              />
                                                            );
                                                          })()}
                                                        </Stack__>
                                                      </TabContent>
                                                      <TabContent
                                                        className={classNames(
                                                          "__wab_instance",
                                                          sty.tabContent__fC1Xu
                                                        )}
                                                        tabKey={"tab2"}
                                                      >
                                                        <div
                                                          className={classNames(
                                                            projectcss.all,
                                                            sty.freeBox__muZJe
                                                          )}
                                                        >
                                                          <div
                                                            className={classNames(
                                                              projectcss.all,
                                                              projectcss.__wab_text,
                                                              sty.text__smh5W
                                                            )}
                                                          >
                                                            {
                                                              "Some content for tab 2"
                                                            }
                                                          </div>
                                                        </div>
                                                      </TabContent>
                                                    </div>
                                                  </div>
                                                )}
                                              </DataCtxReader__>
                                            </TabsContainer>
                                          </div>
                                        </div>
                                      </div>
                                    ) : null}
                                  </div>
                                ) : null}
                              </TabContent>
                            );
                          })
                        : null}
                    </div>
                  </div>
                )}
              </DataCtxReader__>
            </TabsContainer>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbar",
    "showteamNavbar",
    "userteamNavbar",
    "transferVisibility",
    "showScore",
    "goa",
    "def",
    "mid",
    "str",
    "h3",
    "transferTourVisibility",
    "transferTour",
    "goa2",
    "def2",
    "mid2",
    "str2",
    "textInput",
    "tabUnderline",
    "playerPicker",
    "paginationAll"
  ],
  navbar: ["navbar"],
  showteamNavbar: ["showteamNavbar"],
  userteamNavbar: ["userteamNavbar"],
  transferVisibility: ["transferVisibility"],
  showScore: ["showScore", "goa", "def", "mid", "str", "h3"],
  goa: ["goa"],
  def: ["def"],
  mid: ["mid"],
  str: ["str"],
  h3: ["h3"],
  transferTourVisibility: [
    "transferTourVisibility",
    "transferTour",
    "goa2",
    "def2",
    "mid2",
    "str2",
    "textInput",
    "tabUnderline",
    "playerPicker",
    "paginationAll"
  ],
  transferTour: [
    "transferTour",
    "goa2",
    "def2",
    "mid2",
    "str2",
    "textInput",
    "tabUnderline",
    "playerPicker",
    "paginationAll"
  ],
  goa2: ["goa2"],
  def2: ["def2"],
  mid2: ["mid2"],
  str2: ["str2"],
  textInput: ["textInput"],
  tabUnderline: ["tabUnderline"],
  playerPicker: ["playerPicker"],
  paginationAll: ["paginationAll"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbar: typeof Navbar;
  showteamNavbar: typeof ShowteamNavbar;
  userteamNavbar: typeof UserteamNavbar;
  transferVisibility: "div";
  showScore: "div";
  goa: "div";
  def: "div";
  mid: "div";
  str: "div";
  h3: "h3";
  transferTourVisibility: "div";
  transferTour: "div";
  goa2: "div";
  def2: "div";
  mid2: "div";
  str2: "div";
  textInput: typeof TextInput;
  tabUnderline: typeof TabUnderline;
  playerPicker: typeof PlayerPicker;
  paginationAll: typeof AntdPagination;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicShowTeam__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicShowTeam__VariantsArgs;
    args?: PlasmicShowTeam__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicShowTeam__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicShowTeam__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicShowTeam__ArgProps,
          internalVariantPropNames: PlasmicShowTeam__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicShowTeam__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicShowTeam";
  } else {
    func.displayName = `PlasmicShowTeam.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const PageGuard: React.FC<P> = props => (
    <PlasmicPageGuard__
      minRole={"ead2b235-73a3-4579-b15a-7fc91fc1a23a"}
      appId={"qrPZwqtrqWM4S9b4djCj1H"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={false}
    >
      <WrappedComponent {...props} />
    </PlasmicPageGuard__>
  );

  return PageGuard;
}

export const PlasmicShowTeam = Object.assign(
  // Top-level PlasmicShowTeam renders the root element
  withPlasmicPageGuard(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    showteamNavbar: makeNodeComponent("showteamNavbar"),
    userteamNavbar: makeNodeComponent("userteamNavbar"),
    transferVisibility: makeNodeComponent("transferVisibility"),
    showScore: makeNodeComponent("showScore"),
    goa: makeNodeComponent("goa"),
    def: makeNodeComponent("def"),
    mid: makeNodeComponent("mid"),
    str: makeNodeComponent("str"),
    h3: makeNodeComponent("h3"),
    transferTourVisibility: makeNodeComponent("transferTourVisibility"),
    transferTour: makeNodeComponent("transferTour"),
    goa2: makeNodeComponent("goa2"),
    def2: makeNodeComponent("def2"),
    mid2: makeNodeComponent("mid2"),
    str2: makeNodeComponent("str2"),
    textInput: makeNodeComponent("textInput"),
    tabUnderline: makeNodeComponent("tabUnderline"),
    playerPicker: makeNodeComponent("playerPicker"),
    paginationAll: makeNodeComponent("paginationAll"),

    // Metadata about props expected for PlasmicShowTeam
    internalVariantProps: PlasmicShowTeam__VariantProps,
    internalArgProps: PlasmicShowTeam__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicShowTeam;
/* prettier-ignore-end */
