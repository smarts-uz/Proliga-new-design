// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qrPZwqtrqWM4S9b4djCj1H
// Component: yP6GdWiKL8XJ

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import UpdateCapitan from "../../UpdateCapitan"; // plasmic-import: P_oyNDh3kiUq/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: qrPZwqtrqWM4S9b4djCj1H/projectcss
import sty from "./PlasmicUserteamNavbar.module.css"; // plasmic-import: yP6GdWiKL8XJ/css

createPlasmicElementProxy;

export type PlasmicUserteamNavbar__VariantMembers = {};
export type PlasmicUserteamNavbar__VariantsArgs = {};
type VariantPropType = keyof PlasmicUserteamNavbar__VariantsArgs;
export const PlasmicUserteamNavbar__VariantProps = new Array<VariantPropType>();

export type PlasmicUserteamNavbar__ArgsType = {
  capitanBtnVisibility?: boolean;
  sellBtnBool?: boolean;
  teamBalance?: number;
  nameOfTeam?: string;
  onlickEditTeam?: (event: any) => void;
};
type ArgPropType = keyof PlasmicUserteamNavbar__ArgsType;
export const PlasmicUserteamNavbar__ArgProps = new Array<ArgPropType>(
  "capitanBtnVisibility",
  "sellBtnBool",
  "teamBalance",
  "nameOfTeam",
  "onlickEditTeam"
);

export type PlasmicUserteamNavbar__OverridesType = {
  root?: Flex__<"div">;
  modal?: Flex__<typeof AntdModal>;
  button?: Flex__<typeof AntdButton>;
  updateCapitan?: Flex__<typeof UpdateCapitan>;
};

export interface DefaultUserteamNavbarProps {
  capitanBtnVisibility?: boolean;
  sellBtnBool?: boolean;
  teamBalance?: number;
  nameOfTeam?: string;
  onlickEditTeam?: (event: any) => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicUserteamNavbar__RenderFunc(props: {
  variants: PlasmicUserteamNavbar__VariantsArgs;
  args: PlasmicUserteamNavbar__ArgsType;
  overrides: PlasmicUserteamNavbar__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          capitanBtnVisibility: false,
          sellBtnBool: (() => {
            try {
              return undefined;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })(),
          teamBalance: 0,
          nameOfTeam: " "
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__esqtx
        )}
      >
        <React.Fragment>
          {(() => {
            try {
              return $props.nameOfTeam;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b";
              }
              throw e;
            }
          })()}
        </React.Fragment>
      </div>
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__i5OnO
        )}
        onClick={args.onlickEditTeam}
      >
        {"Edit team"}
      </div>
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__okBfk
        )}
      >
        {"Team"}
      </div>
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__sEg4Q
        )}
      >
        {"Points"}
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__xjyEu)}>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__uXl0
          )}
        >
          {"Balance"}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__rVwpi
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return "$" + $props.teamBalance;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
      </div>
      <AntdModal
        data-plasmic-name={"modal"}
        data-plasmic-override={overrides.modal}
        className={classNames("__wab_instance", sty.modal)}
        closeButtonClassName={classNames({ [sty["pcls_AqghIw-7_Kzt"]]: true })}
        defaultStylesClassName={classNames(
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          plasmic_plasmic_rich_components_css.plasmic_tokens
        )}
        maskClosable={true}
        modalContentClassName={classNames({ [sty["pcls_IourQiJH9lrn"]]: true })}
        modalScopeClassName={sty["modal__modal"]}
        okText={"Sell"}
        onOk={async () => {
          const $steps = {};

          $steps["postgresUpdateById"] = true
            ? (() => {
                const actionArgs = {};
                return (async ({ dataOp, continueOnError }) => {
                  try {
                    const response = await executePlasmicDataOp(dataOp, {
                      userAuthToken: dataSourcesCtx?.userAuthToken,
                      user: dataSourcesCtx?.user
                    });
                    await plasmicInvalidate(dataOp.invalidatedKeys);
                    return response;
                  } catch (e) {
                    if (!continueOnError) {
                      throw e;
                    }
                    return e;
                  }
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["postgresUpdateById"] != null &&
            typeof $steps["postgresUpdateById"] === "object" &&
            typeof $steps["postgresUpdateById"].then === "function"
          ) {
            $steps["postgresUpdateById"] = await $steps["postgresUpdateById"];
          }

          $steps["revertMoney"] = true
            ? (() => {
                const actionArgs = {};
                return (async ({ dataOp, continueOnError }) => {
                  try {
                    const response = await executePlasmicDataOp(dataOp, {
                      userAuthToken: dataSourcesCtx?.userAuthToken,
                      user: dataSourcesCtx?.user
                    });
                    await plasmicInvalidate(dataOp.invalidatedKeys);
                    return response;
                  } catch (e) {
                    if (!continueOnError) {
                      throw e;
                    }
                    return e;
                  }
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["revertMoney"] != null &&
            typeof $steps["revertMoney"] === "object" &&
            typeof $steps["revertMoney"].then === "function"
          ) {
            $steps["revertMoney"] = await $steps["revertMoney"];
          }

          $steps["upadateActivity"] = true
            ? (() => {
                const actionArgs = {};
                return (async ({ dataOp, continueOnError }) => {
                  try {
                    const response = await executePlasmicDataOp(dataOp, {
                      userAuthToken: dataSourcesCtx?.userAuthToken,
                      user: dataSourcesCtx?.user
                    });
                    await plasmicInvalidate(dataOp.invalidatedKeys);
                    return response;
                  } catch (e) {
                    if (!continueOnError) {
                      throw e;
                    }
                    return e;
                  }
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["upadateActivity"] != null &&
            typeof $steps["upadateActivity"] === "object" &&
            typeof $steps["upadateActivity"].then === "function"
          ) {
            $steps["upadateActivity"] = await $steps["upadateActivity"];
          }
        }}
        onOpenChange={generateStateOnChangeProp($state, ["modal", "open"])}
        open={generateStateValueProp($state, ["modal", "open"])}
        title={"Do you Want Sell this player?"}
        trigger={
          (() => {
            try {
              return $props.sellBtnBool;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <AntdButton
              data-plasmic-name={"button"}
              data-plasmic-override={overrides.button}
              className={classNames("__wab_instance", sty.button)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__sWoHg
                )}
              >
                {"Sell"}
              </div>
            </AntdButton>
          ) : null
        }
        wrapClassName={classNames({ [sty["pcls_TXOaEixpPSuJ"]]: true })}
      >
        <div className={classNames(projectcss.all, sty.freeBox__wRrj)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__z10Xm
            )}
          >
            {"Modal content"}
          </div>
        </div>
      </AntdModal>
      {(() => {
        try {
          return $props.capitanBtnVisibility;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <UpdateCapitan
          data-plasmic-name={"updateCapitan"}
          data-plasmic-override={overrides.updateCapitan}
          acceptBtn={async () => {
            const $steps = {};

            $steps["unsetCapitan"] = true
              ? (() => {
                  const actionArgs = {};
                  return (async ({ dataOp, continueOnError }) => {
                    try {
                      const response = await executePlasmicDataOp(dataOp, {
                        userAuthToken: dataSourcesCtx?.userAuthToken,
                        user: dataSourcesCtx?.user
                      });
                      await plasmicInvalidate(dataOp.invalidatedKeys);
                      return response;
                    } catch (e) {
                      if (!continueOnError) {
                        throw e;
                      }
                      return e;
                    }
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["unsetCapitan"] != null &&
              typeof $steps["unsetCapitan"] === "object" &&
              typeof $steps["unsetCapitan"].then === "function"
            ) {
              $steps["unsetCapitan"] = await $steps["unsetCapitan"];
            }

            $steps["updateCapitan"] = true
              ? (() => {
                  const actionArgs = {};
                  return (async ({ dataOp, continueOnError }) => {
                    try {
                      const response = await executePlasmicDataOp(dataOp, {
                        userAuthToken: dataSourcesCtx?.userAuthToken,
                        user: dataSourcesCtx?.user
                      });
                      await plasmicInvalidate(dataOp.invalidatedKeys);
                      return response;
                    } catch (e) {
                      if (!continueOnError) {
                        throw e;
                      }
                      return e;
                    }
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateCapitan"] != null &&
              typeof $steps["updateCapitan"] === "object" &&
              typeof $steps["updateCapitan"].then === "function"
            ) {
              $steps["updateCapitan"] = await $steps["updateCapitan"];
            }
          }}
          className={classNames("__wab_instance", sty.updateCapitan)}
        />
      ) : null}
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "modal", "button", "updateCapitan"],
  modal: ["modal", "button"],
  button: ["button"],
  updateCapitan: ["updateCapitan"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  modal: typeof AntdModal;
  button: typeof AntdButton;
  updateCapitan: typeof UpdateCapitan;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicUserteamNavbar__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicUserteamNavbar__VariantsArgs;
    args?: PlasmicUserteamNavbar__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicUserteamNavbar__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicUserteamNavbar__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicUserteamNavbar__ArgProps,
          internalVariantPropNames: PlasmicUserteamNavbar__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicUserteamNavbar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicUserteamNavbar";
  } else {
    func.displayName = `PlasmicUserteamNavbar.${nodeName}`;
  }
  return func;
}

export const PlasmicUserteamNavbar = Object.assign(
  // Top-level PlasmicUserteamNavbar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    modal: makeNodeComponent("modal"),
    button: makeNodeComponent("button"),
    updateCapitan: makeNodeComponent("updateCapitan"),

    // Metadata about props expected for PlasmicUserteamNavbar
    internalVariantProps: PlasmicUserteamNavbar__VariantProps,
    internalArgProps: PlasmicUserteamNavbar__ArgProps
  }
);

export default PlasmicUserteamNavbar;
/* prettier-ignore-end */
