// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qrPZwqtrqWM4S9b4djCj1H
// Component: xHwS06ZerIoO

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { useScreenVariants as useScreenVariantskuWqqBs0ERIp } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: KuWQQBs0eRIp/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: qrPZwqtrqWM4S9b4djCj1H/projectcss
import sty from "./PlasmicShowteamNavbar.module.css"; // plasmic-import: xHwS06ZerIoO/css

createPlasmicElementProxy;

export type PlasmicShowteamNavbar__VariantMembers = {};
export type PlasmicShowteamNavbar__VariantsArgs = {};
type VariantPropType = keyof PlasmicShowteamNavbar__VariantsArgs;
export const PlasmicShowteamNavbar__VariantProps = new Array<VariantPropType>();

export type PlasmicShowteamNavbar__ArgsType = {};
type ArgPropType = keyof PlasmicShowteamNavbar__ArgsType;
export const PlasmicShowteamNavbar__ArgProps = new Array<ArgPropType>();

export type PlasmicShowteamNavbar__OverridesType = {
  root?: Flex__<"div">;
  mainStack?: Flex__<"div">;
  items?: Flex__<"div">;
  profil?: Flex__<"div">;
  transfer?: Flex__<"div">;
  ochko?: Flex__<"div">;
  liga?: Flex__<"div">;
  journal?: Flex__<"div">;
  statistika?: Flex__<"div">;
};

export interface DefaultShowteamNavbarProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicShowteamNavbar__RenderFunc(props: {
  variants: PlasmicShowteamNavbar__VariantsArgs;
  args: PlasmicShowteamNavbar__ArgsType;
  overrides: PlasmicShowteamNavbar__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantskuWqqBs0ERIp()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"mainStack"}
        data-plasmic-override={overrides.mainStack}
        className={classNames(projectcss.all, sty.mainStack)}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"items"}
          data-plasmic-override={overrides.items}
          hasGap={true}
          className={classNames(projectcss.all, sty.items)}
        >
          <div
            data-plasmic-name={"profil"}
            data-plasmic-override={overrides.profil}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.profil
            )}
          >
            {"Profil"}
          </div>
          <div
            data-plasmic-name={"transfer"}
            data-plasmic-override={overrides.transfer}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.transfer
            )}
          >
            {"Transfer"}
          </div>
          <div
            data-plasmic-name={"ochko"}
            data-plasmic-override={overrides.ochko}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.ochko
            )}
          >
            {"Ochko"}
          </div>
          <div
            data-plasmic-name={"liga"}
            data-plasmic-override={overrides.liga}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.liga
            )}
          >
            {"Liga"}
          </div>
          <div
            data-plasmic-name={"journal"}
            data-plasmic-override={overrides.journal}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.journal
            )}
          >
            {"Journal"}
          </div>
          <div
            data-plasmic-name={"statistika"}
            data-plasmic-override={overrides.statistika}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.statistika
            )}
          >
            {"Statistika"}
          </div>
        </Stack__>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "mainStack",
    "items",
    "profil",
    "transfer",
    "ochko",
    "liga",
    "journal",
    "statistika"
  ],
  mainStack: [
    "mainStack",
    "items",
    "profil",
    "transfer",
    "ochko",
    "liga",
    "journal",
    "statistika"
  ],
  items: [
    "items",
    "profil",
    "transfer",
    "ochko",
    "liga",
    "journal",
    "statistika"
  ],
  profil: ["profil"],
  transfer: ["transfer"],
  ochko: ["ochko"],
  liga: ["liga"],
  journal: ["journal"],
  statistika: ["statistika"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  mainStack: "div";
  items: "div";
  profil: "div";
  transfer: "div";
  ochko: "div";
  liga: "div";
  journal: "div";
  statistika: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicShowteamNavbar__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicShowteamNavbar__VariantsArgs;
    args?: PlasmicShowteamNavbar__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicShowteamNavbar__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicShowteamNavbar__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicShowteamNavbar__ArgProps,
          internalVariantPropNames: PlasmicShowteamNavbar__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicShowteamNavbar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicShowteamNavbar";
  } else {
    func.displayName = `PlasmicShowteamNavbar.${nodeName}`;
  }
  return func;
}

export const PlasmicShowteamNavbar = Object.assign(
  // Top-level PlasmicShowteamNavbar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    mainStack: makeNodeComponent("mainStack"),
    items: makeNodeComponent("items"),
    profil: makeNodeComponent("profil"),
    transfer: makeNodeComponent("transfer"),
    ochko: makeNodeComponent("ochko"),
    liga: makeNodeComponent("liga"),
    journal: makeNodeComponent("journal"),
    statistika: makeNodeComponent("statistika"),

    // Metadata about props expected for PlasmicShowteamNavbar
    internalVariantProps: PlasmicShowteamNavbar__VariantProps,
    internalArgProps: PlasmicShowteamNavbar__ArgProps
  }
);

export default PlasmicShowteamNavbar;
/* prettier-ignore-end */
